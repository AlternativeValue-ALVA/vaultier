Vaultier.EditorInput=Ember.TextArea.extend({classNames:["vaultier-epic-editor-input"]});
Vaultier.SecretCreateController=Ember.Controller.extend({submitButtonShown:!1,needs:["application"]}),Vaultier.SecretCreateView=Ember.View.extend({templateName:"Secret/SecretCreate",layoutName:"Layout/LayoutStandard",TabView:Ember.View.extend({classNameBindings:"isActive:active".w(),tagName:"li",isActive:function(){var e=this.get("tab"),t=this.get("parentView.controller.controllers.application.currentPath"),r=t.split(".")[t.split(".").length-1];return e==r}.property("parentView.controller.controllers.application.currentPath")})}),Vaultier.SecretCreateSelectRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},model:function(e,t){var r=this.modelFor("Card");!this.get("auth").checkPermissions(t,function(){return r.get("perms.create")}.bind(this),!0)},setupController:function(e){e.set("content",{}),e.set("controllers.SecretCreate.submitButtonShown",!1),e.get("controllers.SecretCreate").set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addWorkspace().addVault().addCard().addText("Create new secret"))},renderTemplate:function(){this.render("SecretCreate"),this.render("SecretTypeSelect",{outlet:"tab",into:"SecretCreate"})}}),Vaultier.SecretCreateSelectController=Ember.Controller.extend({needs:["SecretCreate"]}),Vaultier.SecretCreateSubmitController=Ember.ObjectController.extend({needs:["SecretCreate"]}),Vaultier.SecretCreateSubmitRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},model:function(e,t){var r=this.get("store"),a=this.modelFor("Vault"),o=this.modelFor("Workspace"),i=this.modelFor("Card");if(this.get("auth").checkPermissions(t,function(){return this.modelFor("Card").get("perms.create")}.bind(this),!0)){var s=Ember.RSVP.hash({to_workspace:r.find("Role",{to_workspace:o.get("id")}),to_vault:r.find("Role",{to_vault:a.get("id")}),to_card:r.find("Role",{to_card:i.get("id")})}).then(function(e){return[].concat(e.to_workspace.toArray(),e.to_vault.toArray(),e.to_card.toArray())}),n=r.createRecord("Secret");return Ember.RSVP.hash({secret:n,memberships:s})}},afterModel:function(e,t){var r=e.secret;r.set("card",this.modelFor("Card").get("id"));var a=Vaultier.Secret.proto();switch(t.params["Secret.createSubmit"].type.toUpperCase()){case a.types.FILE.text:this.template="SecretTypeFile",r.set("type",a.types.FILE.value);break;case a.types.PASSWORD.text:this.template="SecretTypePassword",r.set("type",a.types.PASSWORD.value);break;default:r.set("type",a.types.NOTE.value),this.template="SecretTypeNote"}},setupController:function(e,t){e.set("content",t.secret),e.set("memberships",t.memberships),e.set("controllers.SecretCreate.submitButtonShown",!0);var r=this.modelFor("Workspace");this.set("workspace",r);var a=this.modelFor("Vault");this.set("vault",a);var o=this.modelFor("Card");this.set("card",o),e.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addWorkspace().addVault().addCard().addText("Create new secret"))},renderTemplate:function(){this.render("SecretCreate"),this.render(this.template,{outlet:"tab",into:"SecretCreate"})},actions:{submit:function(){var e=this.get("controller.content"),t=function(e){throw $.notify("Oooups! Something went wrong.","error"),e};try{var r=e.saveRecord().then(function(){$.notify("Your secret has been successfully created.","success"),this.transitionTo("Secret.index",this.get("card"))}.bind(this)).catch(t);ApplicationLoader.promise(r)}catch(a){ApplicationLoader.hideLoader(),t(a)}}}}),Vaultier.SecretCreateSelectView=Ember.View.extend({templateName:"Secret/SecretCreateSelect"});
Vaultier.SecretEditRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},serialize:function(e){return{secret:e.id}},model:function(e,t){var r=this.modelFor("Workspace");if(!r.get("hasValidKey"))throw Error("Cannot edit secret without valid workspace key");var o=this.get("store"),i=o.find("Secret",e.secret);return i.then(this.get("auth").checkPermissions(t,function(e){return perms=e.get("perms.update")})),i},setupController:function(e,t){this._super(e,t);var r=this.get("environment");e.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:r}).addHome().addWorkspace().addVault().addCard().addText("Edit secret"))},actions:{save:function(){var e=function(e){throw $.notify("Oooups! Something went wrong.","error"),e};try{var t=this.get("controller.content"),r=t.saveRecord().then(function(){$.notify("Your changes has been successfully saved.","success"),history.go(-1)}.bind(this)).catch(e);ApplicationLoader.promise(r)}catch(o){ApplicationLoader.hideLoader(),e(o)}}}}),Vaultier.SecretEditController=Ember.ObjectController.extend({breadcrumbs:null}),Vaultier.SecretEditView=Ember.View.extend({templateName:"Secret/SecretEdit",layoutName:"Layout/LayoutStandard"});
Vaultier.SecretTypeBaseView=Ember.View.extend({isCreateAction:function(){var e=!(this.get("controller.content.id")>0);return e}.property("controller.content.id")}),Vaultier.SecretTypeFileView=Vaultier.SecretTypeBaseView.extend({templateName:"Secret/SecretTypeFile",didInsertElement:function(){var e=$(this.get("element")),t=e.find(".vlt-secret-type-file"),r=this.get("controller");t.on("change",function(i){var l=FileAPI.getFiles(i);FileAPI.readAsBinaryString(l[0],function(i){if("load"==i.type){var a=i.result,n=i.result.length;n>25e3?(t.closest(".form-group").addClass("has-error"),$.notify("Maximum filesize 25K exceeded!","error")):(t.closest(".form-group").removeClass("has-error"),r.set("content.blob.filedata",a),r.set("content.blob.filename",l[0].name),r.set("content.blob.filesize",l[0].size),r.set("content.blob.filetype",l[0].type),$(e).find(".vlt-filename").attr("value",l[0].name))}})})}}),Vaultier.SecretTypeNoteView=Vaultier.SecretTypeBaseView.extend({templateName:"Secret/SecretTypeNote"}),Vaultier.SecretTypePasswordView=Vaultier.SecretTypeBaseView.extend({templateName:"Secret/SecretTypePassword"}),Vaultier.SecretTypeSelectView=Vaultier.SecretTypeBaseView.extend({templateName:"Secret/SecretTypeSelect"});
Vaultier.SecretIndexRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},model:function(){var e=this.modelFor("Vault"),t=this.modelFor("Workspace"),r=this.modelFor("Card"),o=this.get("store"),a=o.find("Secret",{card:r.get("id")}),n=Ember.RSVP.hash({to_workspace:o.find("Role",{to_workspace:t.get("id")}),to_vault:o.find("Role",{to_vault:e.get("id")}),to_card:o.find("Role",{to_card:r.get("id")})}).then(function(e){return[].concat(e.to_workspace.toArray(),e.to_vault.toArray(),e.to_card.toArray())});return Ember.RSVP.hash({secrets:a,memberships:n})},setupController:function(e,t){e.set("content",t.secrets),e.set("memberships",t.memberships);var r=this.modelFor("Workspace");this.set("workspace",r),e.set("workspace",r);var o=this.modelFor("Vault");this.set("vault",o),e.set("vault",o);var a=this.modelFor("Card");this.set("card",a),e.set("card",a),e.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addWorkspace().addVault().addCard())},actions:{downloadBlob:function(e){ApplicationLoader.showLoader(),e.loadBlob().finally(function(){ApplicationLoader.hideLoader()}).then(function(){for(var t=e.get("blob.filedata"),r=e.get("blob.filetype"),o=e.get("blob.filename"),a=new Uint8Array(t.length),n=0;n<t.length;n++)a[n]=255&t.charCodeAt(n);var i=new Blob([a.buffer],{type:r});saveAs(i,o)}.bind(this))},deleteSecret:function(e){Vaultier.confirmModal(this,"Are you sure?",function(){this.get("controller.content").removeObject(e);var t=e.deleteRecord().then(function(){$.notify("Your secret has been successfully deleted.","success")}.bind(this),function(){e.rollback(),$.notify("Oooups! Something went wrong.","error")}.bind(this));ApplicationLoader.promise(t)}.bind(this))}}}),Vaultier.SecretIndexController=Ember.ArrayController.extend({itemController:"SecretIndexItem",workspace:null,vault:null,card:null}),Vaultier.SecretIndexItemController=Ember.ObjectController.extend({}),Vaultier.SecretIndexView=Ember.View.extend({templateName:"Secret/SecretIndex",layoutName:"Layout/LayoutStandard"}),Vaultier.SecretIndexItemNoteView=Ember.View.extend({templateName:"Secret/SecretIndexItemNote"}),Vaultier.SecretIndexItemPasswordView=Ember.View.extend({templateName:"Secret/SecretIndexItemPassword"}),Vaultier.SecretIndexItemFileView=Ember.View.extend({templateName:"Secret/SecretIndexItemFile"}),Vaultier.SecretIndexItemControlsView=Ember.View.extend({templateName:"Secret/SecretIndexItemControls"});
Vaultier.SecretCardNodeView=Ember.Tree.TreeNodeView.extend({templateName:"Secret/SecretMoveCardNode",Radio:Ember.View.extend({tagName:"input",type:"radio",attributeBindings:["type","name","value"],click:function(){this.get("controller").send("selected",this.$().val())}}),loadData:function(){return[]}}),Vaultier.SecretVaultNodeView=Ember.Tree.TreeNodeView.extend({templateName:"Secret/SecretMoveVaultNode",getSubNodeViewClass:function(){return Vaultier.SecretCardNodeView},loadData:function(){var e=this.get("controller.store"),t=this.get("content.id"),r=e.find("Card",{vault:t}).then(function(e){return e.forEach(function(e){e.set("branch",!0)}),e});return r}}),Vaultier.SecretMoveRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},serialize:function(e){return{secret:e.id}},model:function(e,t){var r=this.modelFor("Workspace"),n=this.get("store"),o=n.find("Secret",e.secret);o.then(this.get("auth").checkPermissions(t,function(e){return perms=e.get("perms.update")}));var i=n.find("Vault",{workspace:r.get("id")}).then(function(e){return e.forEach(function(e){e.set("branch",!0)}),e});return Ember.RSVP.hash({secret:o,vaults:i})},setupController:function(e,t){e.set("content",t.secret),e.set("treeNodes",t.vaults),e.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addWorkspace().addVault().addCard().addText("Move secret"))},actions:{save:function(){var e=this.get("controller.content");e.set("card",this.get("controller.selected")),e.saveRecord().then(function(){$.notify("Your secret has been successfully moved.","success"),history.go(-1)}.bind(this),function(){$.notify("Oooups! Something went wrong.","error")})}}}),Vaultier.SecretMoveController=Ember.ObjectController.extend({moveDisabled:function(){return!this.get("selected")}.property("selected"),selected:!1,breadcrumbs:null,actions:{selected:function(e){this.set("selected",e)}}}),Vaultier.SecretMoveView=Ember.View.extend({templateName:"Secret/SecretMove",layoutName:"Layout/LayoutStandard",Tree:Ember.Tree.TreeView.extend({itemViewClass:Vaultier.SecretVaultNodeView})});
//# sourceMappingURL=data:application/json;base64,