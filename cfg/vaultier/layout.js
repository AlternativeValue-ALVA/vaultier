Vaultier.LayoutLayoutStandardView=Ember.View.extend({templateName:"Layout/LayoutStandard"}),Vaultier.LayoutLayoutWindowView=Ember.View.extend({templateName:"Layout/LayoutStandard"}),Vaultier.LayoutFooterView=Ember.View.extend({templateName:"Layout/Footer"});
Vaultier.LayoutSecurityBoxView=Ember.View.extend({tagName:"span",templateName:"Layout/SecurityBox",actions:{logout:function(){ApplicationLoader.showLoader();var e=this.get("controller.auth");e.logout()}},didInsertElement:function(){var e=Ember.$(this.get("element")).find(".copy-token");e.click(function(t){t.preventDefault(),window.prompt("token",e.attr("href"))})}}),Vaultier.LayoutSecurityBoxController=Ember.Controller.extend({showToken:function(){return this.get("config.FT_FEATURES.dev_show_token")}.property("showToken")});
Vaultier.LayoutSearchBoxViewVaultTpl=null,Vaultier.LayoutSearchBoxViewCardTpl=null,Vaultier.LayoutSearchBoxView=Ember.View.extend({tagName:"span",templateName:"Layout/SearchBox",vaultTpl:['<div class="vlt-search-result vlt-{{type}}">','<div class="vlt-line vlt-name">{{name}}</div>','<div class="vlt-line vlt-path help-block">{{workspace.name}} >  {{name}}</div>','<div class="vlt-line vlt-desc help-block">{{description}}</div>',"</div>"].join(""),cardTpl:['<div class="vlt-search-result vlt-{{type}}">','<div class="vlt-line vlt-name">{{name}}</div>','<div class="vlt-line vlt-path help-block">{{workspace.name}} > {{vault.name}} > {{name}}</div>','<div class="vlt-line vlt-desc help-block">{{description}}</div>',"</div>"].join(""),init:function(){this._super.apply(this,arguments),Vaultier.LayoutSearchBoxViewVaultTpl=this.vaultTpl=Vaultier.LayoutSearchBoxViewVaultTpl||Handlebars.compile(this.vaultTpl),Vaultier.LayoutSearchBoxViewCardTpl=this.cardTpl=Vaultier.LayoutSearchBoxViewCardTpl||Handlebars.compile(this.cardTpl)},willDestroyElement:function(){var e=$(this.get("element")),t=e.find("select"),l=t[0].selectize;l.destroy()},didInsertElement:function(){var e=this.get("controller"),t=$(this.get("element")),l=t.find("select"),a=this.get("vaultTpl"),i=this.get("cardTpl"),r=0,n=function(t){"card"==t.type?e.transitionToRoute("Secret.index",t.workspace.slug,t.vault.slug,t.slug):e.transitionToRoute("Cards.index",t.workspace.slug,t.slug)};l.selectize({valueField:"uid",labelField:"name",searchField:"keywords",sortField:"sort",highlight:!1,options:[],create:!1,onChange:function(){"use strict";this.clearCache()},onType:function(){this.clearOptions(),this.refreshOptions(!0)},score:function(e){var t=this.getScoreFunction(e);return function(e){return t(e)+1}},render:{option:function(e){var t="";return t="card"==e.get("type")?i(e):a(e)}},load:function(e,t){return e.length?void $.ajax({url:"/api/search/search",type:"GET",data:{query:e},error:function(){t()},success:function(e){var l=[];e.cards.forEach(function(e){r++,e.id=e.slug,e.sort=r,e.type="card",e.uid="c-"+e.id,l.push(Ember.Object.create(e))}),e.vaults.forEach(function(e){r++,e.id=e.slug,e.sort=r,e.type="vault",e.uid="v-"+e.id,l.push(Ember.Object.create(e))}),t(l)}}):t()}});var s=l[0].selectize;s.on("item_add",function(e){var t=s.options[e];s.clearOptions(),s.refreshOptions(!0),s.blur(),n(t)}),s.on("load",function(e){"use strict";var t=s.$control;!e||e.length?t.removeClass("has-error"):($.notify("No matches found","error"),t.addClass("has-error"))})}}),Vaultier.LayoutSearchBoxController=Ember.Controller.extend({});
Vaultier.DotDotDotComponent=Ember.Component.extend({tagName:"span",height:40,didInsertElement:function(){this._super(),this.updateDOM()},_contentDidChange:function(){this.updateDOM()}.observes("value"),updateDOM:function(){var t=parseInt(this.get("height"),10)||40;"inDOM"===this.get("state")&&(this.$().text(this.get("value")),this.$().dotdotdot({height:t}))}});
Vaultier.Breadcrumbs=Ember.Object.extend({items:null,environment:null,addLink:function(t,e,i,n){if(this.items=this.items||[],this.items.forEach(function(t){delete t.last}),t)try{args=i?[t,i]:[t],t=this.router.generate.apply(this.router,args)}catch(r){console.error(r.message),console.error("Breadcrumbs error during generate route ("+t+")")}return e=Utils.HandlebarsHelpers.current().ellipsis(e,25),n||(n="/static/vaultier/images/icon-wrench-grey.png"),this.items.push({link:t,title:e,icon:n,last:!0}),this},addText:function(t,e){return this.addLink(null,t,null,e),this},addHome:function(){return this},addSettings:function(){return this},addCollaboratorsIndex:function(t){return this.addLink(t,"Collaborators",null,"/static/vaultier/images/icon-user-grey.png")},addCollaboratorsInvite:function(t){return this.addLink(t,"Invite",null,"/static/vaultier/images/icon-plus-grey.png")},addVault:function(){var t=this.get("environment.vault");return t&&this.addLink("Vault.index",t.get("name"),t,"/static/vaultier/images/icon-vault-grey.png"),this},addCard:function(){var t=this.get("environment.card");return t&&this.addLink("Card.index",t.get("name"),t,"/static/vaultier/images/icon-card-grey.png"),this},addWorkspace:function(){var t=this.get("environment.workspace");return t&&this.addLink("Workspace.index",t.get("name"),t,"/static/vaultier/images/icon-workspace-grey.png"),this}});
Vaultier.LayoutWorkspaceBoxController=Ember.Controller.extend({env:null,init:function(){this._super(),this.env=this.get("environment")}}),Vaultier.LayoutWorkspaceBoxView=Ember.View.extend({tagName:"span",templateName:"Layout/WorkspaceBox"});
Vaultier.LayoutConfirmView=Ember.View.extend({templateName:"Layout/Confirm",didInsertElement:function(){var o=Ember.$(this.get("element")).find(".modal");o.modal("show"),o.one("hidden.bs.modal",function(){this.get("controller.route").disconnectOutlet({parent:"application",outlet:"modal"})}.bind(this))},show:function(o){var t=o.route.get("container").lookup("controller:LayoutConfirm");t.setProperties(o),o.route.render("LayoutConfirm",{into:"application",outlet:"modal",controller:"LayoutConfirm"})},actions:{ok:function(){var o=this.get("controller.fn"),t=Ember.$(this.get("element")).find(".modal");t.one("hidden.bs.modal",o),t.modal("hide")}}}),Vaultier.LayoutConfirmController=Ember.Controller.extend({text:null,fn:null,route:null,fn:null}),Vaultier.confirmModal=function(o,t,e){var n=o.container.lookup("view:LayoutConfirm");n.show({title:"Confirmation",text:t,route:o,fn:e})};
//# sourceMappingURL=data:application/json;base64,