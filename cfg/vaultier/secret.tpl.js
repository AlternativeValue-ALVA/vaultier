Ember.TEMPLATES["Secret/SecretIndex"]=Ember.Handlebars.template(function(r,e,s,n,t){function a(r,e){var n,t="";return e.buffer.push('\r\n                                <div class="btn-group">\r\n                                    <button type="button" class="btn btn-default dropdown-toggle"\r\n                                            data-toggle="dropdown">\r\n                                        <span class="glyphicon glyphicon-cog"></span>\r\n                                        Manage\r\n                                    </button>\r\n                                    <ul class="dropdown-menu caret-left">\r\n                                        '),n=s["if"].call(r,"card.perms.update",{hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(2,h,e),contexts:[r],types:["ID"],data:e}),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n\r\n                                        "),n=s["if"].call(r,"card.perms.invite",{hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(7,c,e),contexts:[r],types:["ID"],data:e}),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n\r\n                                        "),n=s["if"].call(r,"card.perms.create",{hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(10,u,e),contexts:[r],types:["ID"],data:e}),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n                                    </ul>\r\n                                </div>\r\n                            "),t}function h(r,e){var n,t,a,h="";return e.buffer.push("\r\n\r\n                                            <li>\r\n                                                "),t=s["link-to"]||r&&r["link-to"],a={hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(3,o,e),contexts:[r,r],types:["STRING","ID"],data:e},n=t?t.call(r,"Card.edit","card.slug",a):F.call(r,"link-to","Card.edit","card.slug",a),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n                                            </li>\r\n\r\n                                            <li>\r\n                                                "),t=s["link-to"]||r&&r["link-to"],a={hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(5,l,e),contexts:[r,r],types:["STRING","ID"],data:e},n=t?t.call(r,"Card.move","card.slug",a):F.call(r,"link-to","Card.move","card.slug",a),(n||0===n)&&e.buffer.push(n),e.buffer.push('\r\n                                            </li>\r\n\r\n                                            <li>\r\n                                                <a href="#" '),e.buffer.push(H(s.action.call(r,"deleteCard","card",{hash:{},hashTypes:{},hashContexts:{},contexts:[r,r],types:["ID","ID"],data:e}))),e.buffer.push(" >Delete card</a>\r\n                                            </li>\r\n                                        "),h}function o(r,e){e.buffer.push("\r\n                                                    Edit card\r\n                                                ")}function l(r,e){e.buffer.push("\r\n                                                    Move card to another vault\r\n                                                ")}function c(r,e){var n,t,a,h="";return e.buffer.push("\r\n                                            <li>\r\n                                                "),t=s["link-to"]||r&&r["link-to"],a={hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(8,p,e),contexts:[r,r],types:["STRING","ID"],data:e},n=t?t.call(r,"Card.memberIndex","card",a):F.call(r,"link-to","Card.memberIndex","card",a),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n                                            </li>\r\n                                        "),h}function p(r,e){e.buffer.push("\r\n                                                    Share\r\n                                                ")}function u(r,e){var n,t,a,h="";return e.buffer.push("\r\n                                            <li>\r\n                                                "),t=s["link-to"]||r&&r["link-to"],a={hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(11,i,e),contexts:[r],types:["STRING"],data:e},n=t?t.call(r,"Secret.createSelect",a):F.call(r,"link-to","Secret.createSelect",a),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n                                            </li>\r\n                                        "),h}function i(r,e){e.buffer.push("\r\n                                                    Add secret\r\n                                                ")}function f(r,e){var n,t="";return e.buffer.push('\r\n                    <div class="vlt-secret-box">\r\n                        <div class="vlt-visual">\r\n                            <div class="vlt-visual-bg"></div>\r\n                        </div>\r\n                        '),n=s.each.call(r,{hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(14,d,e),contexts:[],types:[],data:e}),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n                    </div>\r\n\r\n                    "),t}function d(r,e){var n,t="";return e.buffer.push("\r\n                            "),n=s["if"].call(r,"isNote",{hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(15,v,e),contexts:[r],types:["ID"],data:e}),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n\r\n                            "),n=s["if"].call(r,"isPassword",{hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(17,b,e),contexts:[r],types:["ID"],data:e}),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n\r\n                            "),n=s["if"].call(r,"isFile",{hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(19,m,e),contexts:[r],types:["ID"],data:e}),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n                        "),t}function v(r,e){var n="";return e.buffer.push("\r\n                                "),e.buffer.push(H(s.view.call(r,"Vaultier.SecretIndexItemNoteView",{hash:{"class":"vlt-secret-item vlt-note"},hashTypes:{"class":"STRING"},hashContexts:{"class":r},contexts:[r],types:["ID"],data:e}))),e.buffer.push("\r\n                            "),n}function b(r,e){var n="";return e.buffer.push("\r\n                                "),e.buffer.push(H(s.view.call(r,"Vaultier.SecretIndexItemPasswordView",{hash:{"class":"vlt-secret-item vlt-password"},hashTypes:{"class":"STRING"},hashContexts:{"class":r},contexts:[r],types:["ID"],data:e}))),e.buffer.push("\r\n                            "),n}function m(r,e){var n="";return e.buffer.push("\r\n                                "),e.buffer.push(H(s.view.call(r,"Vaultier.SecretIndexItemFileView",{hash:{"class":"vlt-secret-item vlt-file"},hashTypes:{"class":"STRING"},hashContexts:{"class":r},contexts:[r],types:["ID"],data:e}))),e.buffer.push("\r\n                            "),n}function y(r,e){var n,t="";return e.buffer.push('\r\n                            <div class="jumbotron vlt-bigbox vlt-secret">\r\n                                <div class="vlt-header">\r\n                                    <div class="vlt-icon">\r\n                                    </div>\r\n                                    <div class="vlt-title">\r\n                                        <h1>You do not have any secret yet</h1>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                '),n=s["if"].call(r,"card.perms.create",{hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(22,g,e),contexts:[r],types:["ID"],data:e}),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n                            </div>\r\n                    "),t}function g(r,e){var n,t,a,h="";return e.buffer.push('\r\n                                    <p>\r\n                                        This card is empty.\r\n                                        Please create one or more secrets on this card.\r\n                                        Secret are secured by encryption and accessible only to you and your team.\r\n                                        Secret could be password, note, credit card number or key file\r\n                                    </p>\r\n\r\n                                    <p class="top-30">\r\n                                        '),t=s["link-to"]||r&&r["link-to"],a={hash:{"class":"btn btn-lg btn-primary"},hashTypes:{"class":"STRING"},hashContexts:{"class":r},inverse:_.noop,fn:_.program(23,x,e),contexts:[r],types:["STRING"],data:e},n=t?t.call(r,"Secret.createSelect",a):F.call(r,"link-to","Secret.createSelect",a),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n                                    </p>\r\n                                "),h}function x(r,e){e.buffer.push('\r\n                                            <span class="glyphicon glyphicon-plus"></span>\r\n                                            Add secret\r\n                                        ')}function I(r,e){var n,t="";return e.buffer.push("\r\n                            "),n=s._triageMustache.call(r,"card.description",{hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:e}),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n                        "),t}function T(r,e){e.buffer.push("\r\n                            No description given\r\n                        ")}function C(r,e){var n,t,a,h="";return e.buffer.push('\r\n                                <div\r\n                                        class="vlt-button-wrapper"\r\n                                        data-toggle="tooltip"\r\n                                        title=\r\n                                                "\r\n                                                 Create one or more secrets on this card.\r\n                                                 Secrets are secured by encryption and accessible only to you and your team.\r\n                                                 Secret could be password, note, credit card number or key file\r\n                                                 "\r\n                                        data-placement="bottom"\r\n                                        >\r\n                                    '),t=s["link-to"]||r&&r["link-to"],a={hash:{"class":"btn btn-primary"},hashTypes:{"class":"STRING"},hashContexts:{"class":r},inverse:_.noop,fn:_.program(30,S,e),contexts:[r],types:["STRING"],data:e},n=t?t.call(r,"Secret.createSelect",a):F.call(r,"link-to","Secret.createSelect",a),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n                                </div>\r\n                            "),h}function S(r,e){e.buffer.push('\r\n                                        <span class="glyphicon glyphicon-plus"></span>\r\n                                        Add secret\r\n                                    ')}function k(r,e){var n,t="";return e.buffer.push('\r\n                                <div class="btn-group">\r\n                                    <button type="button" class="btn btn-default dropdown-toggle"\r\n                                            data-toggle="dropdown">\r\n                                        <span class="glyphicon glyphicon-cog"></span>\r\n                                        Properties\r\n                                    </button>\r\n                                    <ul class="dropdown-menu caret-left">\r\n                                        '),n=s["if"].call(r,"card.perms.update",{hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(33,D,e),contexts:[r],types:["ID"],data:e}),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n                                        "),n=s["if"].call(r,"card.perms.update",{hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(35,w,e),contexts:[r],types:["ID"],data:e}),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n                                    </ul>\r\n                                </div>\r\n                            "),t}function D(r,e){var n,t,a,h="";return e.buffer.push("\r\n\r\n                                            <li>\r\n                                                "),t=s["link-to"]||r&&r["link-to"],a={hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(3,o,e),contexts:[r,r],types:["STRING","ID"],data:e},n=t?t.call(r,"Card.edit","card.slug",a):F.call(r,"link-to","Card.edit","card.slug",a),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n                                            </li>\r\n\r\n                                            <li>\r\n                                                "),t=s["link-to"]||r&&r["link-to"],a={hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(5,l,e),contexts:[r,r],types:["STRING","ID"],data:e},n=t?t.call(r,"Card.move","card.slug",a):F.call(r,"link-to","Card.move","card.slug",a),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n                                            </li>\r\n\r\n                                        "),h}function w(r,e){var n="";return e.buffer.push('\r\n\r\n                                            <li>\r\n                                                <a href="#" '),e.buffer.push(H(s.action.call(r,"deleteCard","card",{hash:{},hashTypes:{},hashContexts:{},contexts:[r,r],types:["ID","ID"],data:e}))),e.buffer.push(" >Delete card</a>\r\n                                            </li>\r\n                                        "),n}function N(r,e){var n,t,a,h="";return e.buffer.push('\r\n                                <div\r\n                                        class="vlt-button-wrapper"\r\n                                        data-toggle="tooltip"\r\n                                        title=\r\n                                                "\r\n                                     Invite new team members to collaborate over this card\r\n                                     or  grant access permission to current team members\r\n                                     "\r\n                                        data-placement="bottom"\r\n                                        >\r\n                                    '),t=s["link-to"]||r&&r["link-to"],a={hash:{"class":"btn btn-default"},hashTypes:{"class":"STRING"},hashContexts:{"class":r},inverse:_.noop,fn:_.program(38,G,e),contexts:[r,r],types:["STRING","ID"],data:e},n=t?t.call(r,"Card.memberInvite","card",a):F.call(r,"link-to","Card.memberInvite","card",a),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n                                </div>\r\n                            "),h}function G(r,e){e.buffer.push('\r\n                                        <span class="glyphicon glyphicon-plus"></span>\r\n                                        Invite\r\n                                    ')}function R(r,e){var n,t,a,h="";return e.buffer.push('\r\n                                <div\r\n                                        class="vlt-button-wrapper"\r\n                                        data-toggle="tooltip"\r\n                                        title=\r\n                                                "\r\n                                     Invite new team members to collaborate over this card\r\n                                     or  grant access permission to current team members\r\n                                     "\r\n                                        data-placement="bottom"\r\n                                        >\r\n                                    '),t=s["link-to"]||r&&r["link-to"],a={hash:{"class":"btn btn-default"},hashTypes:{"class":"STRING"},hashContexts:{"class":r},inverse:_.noop,fn:_.program(41,E,e),contexts:[r,r],types:["STRING","ID"],data:e},n=t?t.call(r,"Card.memberIndex","card",a):F.call(r,"link-to","Card.memberIndex","card",a),(n||0===n)&&e.buffer.push(n),e.buffer.push("\r\n                                </div>\r\n                            "),h}function E(r,e){e.buffer.push('\r\n                                        <span class="glyphicon glyphicon-user"></span>\r\n                                        Team\r\n                                    ')}this.compilerInfo=[4,">= 1.0.0"],s=this.merge(s,Ember.Handlebars.helpers),t=t||{};var M,V,P,A="",_=this,F=s.helperMissing,H=this.escapeExpression;return t.buffer.push('<div class="container-full">\r\n    <div class="vlt-page vlt-page-with-sidebar">\r\n\r\n        <div class="vlt-page-content">\r\n            <div class="col-md-12">\r\n\r\n                <div class="vlt-page-content-responsive-header">\r\n                    <div class="row-fluid">\r\n                        <div class="col-xs-3">\r\n                            '),V=s.exp||e&&e.exp,P={hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(1,a,t),contexts:[e],types:["STRING"],data:t},M=V?V.call(e,"( card.perms.update || card.perms.delete || card.perms.create || card.perms.invite )",P):F.call(e,"exp","( card.perms.update || card.perms.delete || card.perms.create || card.perms.invite )",P),(M||0===M)&&t.buffer.push(M),t.buffer.push('\r\n                        </div>\r\n\r\n                        <div class="col-xs-9">\r\n                            <h2>Card: '),M=s._triageMustache.call(e,"card.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(M||0===M)&&t.buffer.push(M),t.buffer.push(' </h2>\r\n                        </div>\r\n\r\n                        <div class="clearfix"></div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class="top-30 vlt-items">\r\n                    '),M=s["if"].call(e,"length",{hash:{},hashTypes:{},hashContexts:{},inverse:_.program(21,y,t),fn:_.program(13,f,t),contexts:[e],types:["ID"],data:t}),(M||0===M)&&t.buffer.push(M),t.buffer.push('\r\n                </div>\r\n             </div>\r\n        </div>\r\n\r\n        <div class="vlt-page-sidebar">\r\n            <div class="vlt-sidebar-block">\r\n                <div class="vlt-sidebar-block-heading">\r\n                    <div class="vlt-header">\r\n                        <img src="/static/vaultier/images/icon-vault-grey.png" class="vlt-icon">\r\n\r\n                        <h3 class="vlt-title">\r\n                            '),M=s._triageMustache.call(e,"card.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(M||0===M)&&t.buffer.push(M),t.buffer.push('\r\n                        </h3>\r\n                    </div>\r\n                    <div class="vlt-body">\r\n                        '),M=s["if"].call(e,"card.description",{hash:{},hashTypes:{},hashContexts:{},inverse:_.program(27,T,t),fn:_.program(25,I,t),contexts:[e],types:["ID"],data:t}),(M||0===M)&&t.buffer.push(M),t.buffer.push('\r\n                    </div>\r\n                    <div class="vlt-controls">\r\n                        <div>\r\n\r\n                            '),M=s["if"].call(e,"card.perms.create",{hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(29,C,t),contexts:[e],types:["ID"],data:t}),(M||0===M)&&t.buffer.push(M),t.buffer.push("\r\n\r\n                            "),V=s.exp||e&&e.exp,P={hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(32,k,t),contexts:[e],types:["STRING"],data:t},M=V?V.call(e,"( card.perms.update || card.perms.delete)",P):F.call(e,"exp","( card.perms.update || card.perms.delete)",P),(M||0===M)&&t.buffer.push(M),t.buffer.push('\r\n\r\n                        </div>\r\n\r\n                        <div class="clearfix"></div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class="vlt-sidebar-block-sharing">\r\n                    <div class="vlt-header">\r\n                        <img src="/static/vaultier/images/icon-team-grey.png" class="vlt-icon">\r\n\r\n                        <h3 class="vlt-title">\r\n                            Sharing with\r\n                        </h3>\r\n                    </div>\r\n                    <div class="vlt-body">\r\n                        '),t.buffer.push(H((V=s["member-box"]||e&&e["member-box"],P={hash:{roles:"memberships",user:"auth.user"},hashTypes:{roles:"ID",user:"ID"},hashContexts:{roles:e,user:e},contexts:[],types:[],data:t},V?V.call(e,P):F.call(e,"member-box",P)))),t.buffer.push('\r\n                    </div>\r\n                    <div class="vlt-controls">\r\n                        <div>\r\n                            '),M=s["if"].call(e,"card.perms.invite",{hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(37,N,t),contexts:[e],types:["ID"],data:t}),(M||0===M)&&t.buffer.push(M),t.buffer.push("\r\n\r\n                            "),M=s["if"].call(e,"card.perms.invite",{hash:{},hashTypes:{},hashContexts:{},inverse:_.noop,fn:_.program(40,R,t),contexts:[e],types:["ID"],data:t}),(M||0===M)&&t.buffer.push(M),t.buffer.push("\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n"),A});
Ember.TEMPLATES["Secret/SecretEdit"]=Ember.Handlebars.template(function(s,e,a,n,t){function h(s,e){var n="";return e.buffer.push("\n                            "),e.buffer.push(p(a.view.call(s,"Vaultier.SecretTypeNoteView",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:e}))),e.buffer.push("\n                        "),n}function r(s,e){var n="";return e.buffer.push("\n                            "),e.buffer.push(p(a.view.call(s,"Vaultier.SecretTypePasswordView",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:e}))),e.buffer.push("\n                        "),n}function i(s,e){var n="";return e.buffer.push("\n                            "),e.buffer.push(p(a.view.call(s,"Vaultier.SecretTypeFileView",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:e}))),e.buffer.push("\n                        "),n}this.compilerInfo=[4,">= 1.0.0"],a=this.merge(a,Ember.Handlebars.helpers),t=t||{};var l,o="",p=this.escapeExpression,f=this;return t.buffer.push('<div class="container">\n    <div class="vlt-page vlt-page-plain">\n        <div class="vlt-dialog col-md-8 col-md-offset-2 top-50">\n            <form>\n                <div class="vlt-dialog-content">\n                    <div class="vlt-dialog-header">\n                        <h2>Edit secret</h2>\n                    </div>\n                    <div class="vlt-dialog-body">\n\n                        '),l=a["if"].call(e,"isNote",{hash:{},hashTypes:{},hashContexts:{},inverse:f.noop,fn:f.program(1,h,t),contexts:[e],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push("\n\n                        "),l=a["if"].call(e,"isPassword",{hash:{},hashTypes:{},hashContexts:{},inverse:f.noop,fn:f.program(3,r,t),contexts:[e],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push("\n\n                        "),l=a["if"].call(e,"isFile",{hash:{},hashTypes:{},hashContexts:{},inverse:f.noop,fn:f.program(5,i,t),contexts:[e],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push('\n\n                    </div>\n                    <div class="vlt-dialog-footer">\n                        <a href="javascript:window.history.go(-1)" class="btn btn-default btn-sm">\n                            <span class="glyphicon glyphicon-chevron-left"></span>\n                            Back\n                        </a>\n                        <button '),t.buffer.push(p(a.action.call(e,"save",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}))),t.buffer.push(" "),t.buffer.push(p(a["bind-attr"].call(e,{hash:{disabled:"saveDisabled"},hashTypes:{disabled:"ID"},hashContexts:{disabled:e},contexts:[],types:[],data:t}))),t.buffer.push(' class="btn btn-primary">\n                            <span class="glyphicon glyphicon-ok"></span>\n                            Save changes\n                        </button>\n                    </div>\n\n                </div>\n            </form>\n        </div>\n        <div class="clearfix"></div>\n    </div>\n</div>\n\n\n'),o});
Ember.TEMPLATES["Secret/SecretCreate"]=Ember.Handlebars.template(function(n,s,r,a,e){function t(n,s){s.buffer.push('\r\n                                <a>\r\n                                    Choose secret you want to create\r\n                                    <span class="glyphicon glyphicon glyphicon-chevron-right"></span>\r\n                                </a>\r\n                            ')}function h(n,s){s.buffer.push('\r\n                                <a>\r\n                                    Fillout data\r\n                                    <span class="glyphicon glyphicon glyphicon-chevron-right"></span>\r\n                                </a>\r\n                            ')}function i(n,s){var a="";return s.buffer.push("\r\n                            <a "),s.buffer.push(u(r.action.call(n,"submit",{hash:{},hashTypes:{},hashContexts:{},contexts:[n],types:["ID"],data:s}))),s.buffer.push(' class="btn btn-primary">\r\n                                <span class="glyphicon glyphicon-ok"></span>\r\n                                Submit\r\n                            </a>\r\n                        '),a}this.compilerInfo=[4,">= 1.0.0"],r=this.merge(r,Ember.Handlebars.helpers),e=e||{};var l,o,p,c="",u=this.escapeExpression,f=this,v=r.helperMissing;return e.buffer.push('<div class="container">\r\n    <div class="vlt-page vlt-page-plain">\r\n            <div class="vlt-dialog col-md-10 col-md-offset-1 top-50">\r\n\r\n                <div class="vlt-dialog-content">\r\n                    <div class="vlt-dialog-header">\r\n                        <h2>Create new secret wizard</h2>\r\n\r\n                        <ul class="nav nav-pills nav-justified vlt-wizard-steps">\r\n                            '),l=r.view.call(s,"view.TabView",{hash:{tab:"createSelect"},hashTypes:{tab:"STRING"},hashContexts:{tab:s},inverse:f.noop,fn:f.program(1,t,e),contexts:[s],types:["ID"],data:e}),(l||0===l)&&e.buffer.push(l),e.buffer.push("\r\n\r\n                            "),l=r.view.call(s,"view.TabView",{hash:{tab:"createSubmit"},hashTypes:{tab:"STRING"},hashContexts:{tab:s},inverse:f.noop,fn:f.program(3,h,e),contexts:[s],types:["ID"],data:e}),(l||0===l)&&e.buffer.push(l),e.buffer.push('\r\n\r\n                        </ul>\r\n                    </div>\r\n                    <div class="vlt-dialog-body">\r\n                        '),e.buffer.push(u((o=r.outlet||s&&s.outlet,p={hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:e},o?o.call(s,"tab",p):v.call(s,"outlet","tab",p)))),e.buffer.push('\r\n                    </div>\r\n                    <div class="vlt-dialog-footer">\r\n                        <a href="javascript:history.go(-1)" class="btn btn-default btn-sm">\r\n                            <span class="glyphicon glyphicon-chevron-left"></span>\r\n                            Back\r\n                        </a>\r\n                        '),l=r["if"].call(s,"submitButtonShown",{hash:{},hashTypes:{},hashContexts:{},inverse:f.noop,fn:f.program(5,i,e),contexts:[s],types:["ID"],data:e}),(l||0===l)&&e.buffer.push(l),e.buffer.push('\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class="clearfix"></div>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n'),c});
Ember.TEMPLATES["Secret/SecretTypeSelect"]=Ember.Handlebars.template(function(e,r,s,t,n){function l(e,r){r.buffer.push('\r\n        <div class="list-item vlt-select-secret-item">\r\n            <div class="vlt-visual">\r\n                <div class="vlt-icon password"></div>\r\n            </div>\r\n            <div class="vlt-desc">\r\n                <h4>Secret password</h4>\r\n\r\n                <p class="help-block">\r\n                    This type of secret allows yout to save ordinary password\r\n                    together with username, url and related note\r\n                </p>\r\n\r\n                <div class="clearfix"></div>\r\n            </div>\r\n        </div>\r\n    ')}function i(e,r){r.buffer.push('\r\n        <div class="list-item vlt-select-secret-item">\r\n            <div class="vlt-visual">\r\n                <div class="vlt-icon note"></div>\r\n            </div>\r\n            <div class="vlt-desc">\r\n                <h4>Secret note</h4>\r\n\r\n                <p class="help-block">\r\n                    Secret as note, you can save whatever text you want.\r\n                    You can use markdown to format note\r\n                </p>\r\n\r\n                <div class="clearfix"></div>\r\n            </div>\r\n        </div>\r\n    ')}function a(e,r){r.buffer.push('\r\n        <div class="list-item vlt-select-secret-item">\r\n            <div class="vlt-visual">\r\n                <div class="vlt-icon file"></div>\r\n            </div>\r\n            <div class="vlt-desc">\r\n                <h4>Secret file</h4>\r\n\r\n                <p class="help-block">\r\n                    Store file up to 25KB filesize, you can also anotate file with username,\r\n                    password and note\r\n                </p>\r\n\r\n                <div class="clearfix"></div>\r\n            </div>\r\n        </div>\r\n    ')}this.compilerInfo=[4,">= 1.0.0"],s=this.merge(s,Ember.Handlebars.helpers),n=n||{};var c,o,v,d="",h=this,u=s.helperMissing;return n.buffer.push('<div class="vlt-create-secret col-md-10 col-md-offset-1">\r\n\r\n    <h4>Please select type of secret you would like to create</h4>\r\n\r\n    '),o=s["link-to"]||r&&r["link-to"],v={hash:{},hashTypes:{},hashContexts:{},inverse:h.noop,fn:h.program(1,l,n),contexts:[r,r],types:["STRING","STRING"],data:n},c=o?o.call(r,"Secret.createSubmit","password",v):u.call(r,"link-to","Secret.createSubmit","password",v),(c||0===c)&&n.buffer.push(c),n.buffer.push("\r\n\r\n    "),o=s["link-to"]||r&&r["link-to"],v={hash:{},hashTypes:{},hashContexts:{},inverse:h.noop,fn:h.program(3,i,n),contexts:[r,r],types:["STRING","STRING"],data:n},c=o?o.call(r,"Secret.createSubmit","note",v):u.call(r,"link-to","Secret.createSubmit","note",v),(c||0===c)&&n.buffer.push(c),n.buffer.push("\r\n\r\n    "),o=s["link-to"]||r&&r["link-to"],v={hash:{},hashTypes:{},hashContexts:{},inverse:h.noop,fn:h.program(5,a,n),contexts:[r,r],types:["STRING","STRING"],data:n},c=o?o.call(r,"Secret.createSubmit","file",v):u.call(r,"link-to","Secret.createSubmit","file",v),(c||0===c)&&n.buffer.push(c),n.buffer.push('\r\n\r\n</div>\r\n<div class="clearfix"></div>\r\n'),d});
Ember.TEMPLATES["Secret/SecretTypeNote"]=Ember.Handlebars.template(function(e,s,r,a,n){function t(e,s){var a,n,t="";return s.buffer.push('\r\n<div class="col-md-5 bottom-15">\r\n    <div class="callout callout-info">\r\n        <h4>Secret will be shared with:</h4>\r\n        '),s.buffer.push(i((a=r["member-box"]||e&&e["member-box"],n={hash:{roles:"memberships",user:"auth.user"},hashTypes:{roles:"ID",user:"ID"},hashContexts:{roles:e,user:e},contexts:[],types:[],data:s},a?a.call(e,n):o.call(e,"member-box",n)))),s.buffer.push("\r\n    </div>\r\n</div>\r\n"),t}this.compilerInfo=[4,">= 1.0.0"],r=this.merge(r,Ember.Handlebars.helpers),n=n||{};var h,l="",o=r.helperMissing,i=this.escapeExpression,c=this;return n.buffer.push("<div "),n.buffer.push(i(r["bind-attr"].call(s,{hash:{"class":"view.isCreateAction:col-md-7:col-md-10 view.isCreateAction::col-md-offset-1 "},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[],types:[],data:n}))),n.buffer.push('>\r\n\r\n\r\n    <h4>Title</h4>\r\n    <hr class="top-0"/>\r\n\r\n    <div class="form-group" '),n.buffer.push(i(r["bind-attr"].call(s,{hash:{"class":"errors.name:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[],types:[],data:n}))),n.buffer.push(">\r\n        "),n.buffer.push(i(r.view.call(s,"Em.TextField",{hash:{elementId:"secret-name",valueBinding:"content.name","class":"form-control"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING"},hashContexts:{elementId:s,valueBinding:s,"class":s},contexts:[s],types:["ID"],data:n}))),n.buffer.push('\r\n        <span class="error">'),h=r._triageMustache.call(s,"errors.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:n}),(h||0===h)&&n.buffer.push(h),n.buffer.push('</span>\r\n    </div>\r\n    <div class="help-block">\r\n        Informational field. Do not enter any sensitive information. This field is not encrypted\r\n    </div>\r\n\r\n\r\n    <h4 class="top-30">Please fillout your note</h4>\r\n    <hr class="top-0"/>\r\n    <div class="form-group">\r\n        '),h=r._triageMustache.call(s,"errors.description",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:n}),(h||0===h)&&n.buffer.push(h),n.buffer.push("\r\n        "),n.buffer.push(i(r.view.call(s,"Vaultier.EditorInput",{hash:{elementId:"secret-description",valueBinding:"content.note","class":"form-control",rows:8},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING",rows:"INTEGER"},hashContexts:{elementId:s,valueBinding:s,"class":s,rows:s},contexts:[s],types:["ID"],data:n}))),n.buffer.push('\r\n        <div class="help-block">\r\n            Markdown is available. Markdown manual <a\r\n                href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank">here</a>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n'),h=r.unless.call(s,"content.id",{hash:{},hashTypes:{},hashContexts:{},inverse:c.noop,fn:c.program(1,t,n),contexts:[s],types:["ID"],data:n}),(h||0===h)&&n.buffer.push(h),n.buffer.push('\r\n\r\n<div class="clearfix"></div>\r\n\r\n'),l});
Ember.TEMPLATES["Secret/SecretTypePassword"]=Ember.Handlebars.template(function(s,e,r,a,t){function n(s,e){var a,t,n="";return e.buffer.push('\r\n<div class="col-md-5 bottom-15">\r\n    <div class="callout callout-info">\r\n        <h4>Secret will be shared with:</h4>\r\n        '),e.buffer.push(c((a=r["member-box"]||s&&s["member-box"],t={hash:{roles:"memberships",user:"auth.user"},hashTypes:{roles:"ID",user:"ID"},hashContexts:{roles:s,user:s},contexts:[],types:[],data:e},a?a.call(s,t):o.call(s,"member-box",t)))),e.buffer.push("\r\n    </div>\r\n</div>\r\n"),n}this.compilerInfo=[4,">= 1.0.0"],r=this.merge(r,Ember.Handlebars.helpers),t=t||{};var h,l="",o=r.helperMissing,c=this.escapeExpression,u=this;return t.buffer.push("<div "),t.buffer.push(c(r["bind-attr"].call(e,{hash:{"class":"view.isCreateAction:col-md-7:col-md-10 view.isCreateAction::col-md-offset-1 "},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:t}))),t.buffer.push('>\r\n\r\n\r\n    <h4>Title</h4>\r\n    <hr class="top-0"/>\r\n\r\n    <div class="form-group" '),t.buffer.push(c(r["bind-attr"].call(e,{hash:{"class":"errors.name:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:t}))),t.buffer.push(">\r\n        "),t.buffer.push(c(r.view.call(e,"Em.TextField",{hash:{elementId:"secret-name",valueBinding:"content.name","class":"form-control"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING"},hashContexts:{elementId:e,valueBinding:e,"class":e},contexts:[e],types:["ID"],data:t}))),t.buffer.push('\r\n        <span class="error">'),h=r._triageMustache.call(e,"errors.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(h||0===h)&&t.buffer.push(h),t.buffer.push('</span>\r\n    </div>\r\n    <div class="help-block">\r\n        Informational field. Do not enter any sensitive information. This field is not cyphered\r\n    </div>\r\n\r\n    <h4 class="top-30">Please fillout data for your password secret</h4>\r\n    <hr class="top-0"/>\r\n\r\n    <div class="form-group" '),t.buffer.push(c(r["bind-attr"].call(e,{hash:{"class":"errors.url:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:t}))),t.buffer.push('>\r\n        <label for="secret-url">URL</label>\r\n        '),h=r._triageMustache.call(e,"errors.url",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(h||0===h)&&t.buffer.push(h),t.buffer.push("\r\n        "),t.buffer.push(c(r.view.call(e,"Em.TextField",{hash:{elementId:"secret-url",valueBinding:"content.url","class":"form-control"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING"},hashContexts:{elementId:e,valueBinding:e,"class":e},contexts:[e],types:["ID"],data:t}))),t.buffer.push('\r\n    </div>\r\n\r\n    <div class="form-group" '),t.buffer.push(c(r["bind-attr"].call(e,{hash:{"class":"errors.username:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:t}))),t.buffer.push('>\r\n        <label for="secret-username">Username</label>\r\n        '),h=r._triageMustache.call(e,"errors.username",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(h||0===h)&&t.buffer.push(h),t.buffer.push("\r\n        "),t.buffer.push(c(r.view.call(e,"Em.TextField",{hash:{elementId:"secret-username",valueBinding:"content.username","class":"form-control"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING"},hashContexts:{elementId:e,valueBinding:e,"class":e},contexts:[e],types:["ID"],data:t}))),t.buffer.push('\r\n    </div>\r\n\r\n    <div class="form-group" '),t.buffer.push(c(r["bind-attr"].call(e,{hash:{"class":"errors.password:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:t}))),t.buffer.push('>\r\n        <label for="secret-password">Password</label>\r\n        '),h=r._triageMustache.call(e,"errors.password",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(h||0===h)&&t.buffer.push(h),t.buffer.push("\r\n        "),t.buffer.push(c(r.view.call(e,"Em.TextField",{hash:{elementId:"secret-password",valueBinding:"content.password","class":"form-control"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING"},hashContexts:{elementId:e,valueBinding:e,"class":e},contexts:[e],types:["ID"],data:t}))),t.buffer.push('\r\n    </div>\r\n\r\n    <div class="form-group" '),t.buffer.push(c(r["bind-attr"].call(e,{hash:{"class":"errors.note:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:t}))),t.buffer.push('>\r\n        <label for="secret-note">Note</label>\r\n        '),h=r._triageMustache.call(e,"errors.note",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(h||0===h)&&t.buffer.push(h),t.buffer.push("\r\n        "),t.buffer.push(c(r.view.call(e,"Em.TextArea",{hash:{elementId:"secret-note",valueBinding:"content.note","class":"form-control",rows:5},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING",rows:"INTEGER"},hashContexts:{elementId:e,valueBinding:e,"class":e,rows:e},contexts:[e],types:["ID"],data:t}))),t.buffer.push('\r\n    </div>\r\n    <div class="help-block">\r\n        Markdown is available. Markdown manual <a\r\n            href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet"\r\n            target="_blank">\r\n        here\r\n    </a>\r\n    </div>\r\n</div>\r\n\r\n'),h=r.unless.call(e,"content.id",{hash:{},hashTypes:{},hashContexts:{},inverse:u.noop,fn:u.program(1,n,t),contexts:[e],types:["ID"],data:t}),(h||0===h)&&t.buffer.push(h),t.buffer.push('\r\n\r\n<div class="clearfix"></div>'),l});
Ember.TEMPLATES["Secret/SecretTypeFile"]=Ember.Handlebars.template(function(e,s,r,a,t){function n(e,s){var a,t,n="";return s.buffer.push('\r\n<div class="col-md-5 bottom-15">\r\n    <div class="callout callout-info">\r\n        <h4>Secret will be shared with:</h4>\r\n        '),s.buffer.push(u((a=r["member-box"]||e&&e["member-box"],t={hash:{roles:"memberships",user:"auth.user"},hashTypes:{roles:"ID",user:"ID"},hashContexts:{roles:e,user:e},contexts:[],types:[],data:s},a?a.call(e,t):o.call(e,"member-box",t)))),s.buffer.push("\r\n    </div>\r\n</div>\r\n"),n}this.compilerInfo=[4,">= 1.0.0"],r=this.merge(r,Ember.Handlebars.helpers),t=t||{};var l,h="",o=r.helperMissing,u=this.escapeExpression,c=this;return t.buffer.push("<div "),t.buffer.push(u(r["bind-attr"].call(s,{hash:{"class":"view.isCreateAction:col-md-7:col-md-10 view.isCreateAction::col-md-offset-1 "},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[],types:[],data:t}))),t.buffer.push('>\r\n\r\n\r\n\r\n    <div class="form-group" '),t.buffer.push(u(r["bind-attr"].call(s,{hash:{"class":"errors.name:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[],types:[],data:t}))),t.buffer.push('>\r\n        <label for="secret-name">Name</label>\r\n        '),l=r._triageMustache.call(s,"errors.url",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push("\r\n        "),t.buffer.push(u(r.view.call(s,"Em.TextField",{hash:{elementId:"secret-name",valueBinding:"content.name","class":"form-control"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING"},hashContexts:{elementId:s,valueBinding:s,"class":s},contexts:[s],types:["ID"],data:t}))),t.buffer.push('\r\n        <div class="help-block">\r\n            Informational field. Do not enter any sensitive information. This field is not cyphered\r\n        </div>\r\n    </div>\r\n\r\n    <h4>Please fillout data for your file secret</h4>\r\n\r\n    <div class="form-group" '),t.buffer.push(u(r["bind-attr"].call(s,{hash:{"class":"errors.url:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[],types:[],data:t}))),t.buffer.push('>\r\n        <label for="secret-url">URL</label>\r\n        '),l=r._triageMustache.call(s,"errors.url",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push("\r\n        "),t.buffer.push(u(r.view.call(s,"Em.TextField",{hash:{elementId:"secret-url",valueBinding:"content.url","class":"form-control"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING"},hashContexts:{elementId:s,valueBinding:s,"class":s},contexts:[s],types:["ID"],data:t}))),t.buffer.push('\r\n    </div>\r\n\r\n    <div class="form-group" '),t.buffer.push(u(r["bind-attr"].call(s,{hash:{"class":"errors.username:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[],types:[],data:t}))),t.buffer.push('>\r\n        <label for="secret-username">Username</label>\r\n        '),l=r._triageMustache.call(s,"errors.username",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push("\r\n        "),t.buffer.push(u(r.view.call(s,"Em.TextField",{hash:{elementId:"secret-username",valueBinding:"content.username","class":"form-control"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING"},hashContexts:{elementId:s,valueBinding:s,"class":s},contexts:[s],types:["ID"],data:t}))),t.buffer.push('\r\n    </div>\r\n\r\n    <div class="form-group" '),t.buffer.push(u(r["bind-attr"].call(s,{hash:{"class":"errors.password:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[],types:[],data:t}))),t.buffer.push('>\r\n        <label for="secret-password">Password</label>\r\n        '),l=r._triageMustache.call(s,"errors.password",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push("\r\n        "),t.buffer.push(u(r.view.call(s,"Em.TextField",{hash:{elementId:"secret-password",valueBinding:"content.password","class":"form-control"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING"},hashContexts:{elementId:s,valueBinding:s,"class":s},contexts:[s],types:["ID"],data:t}))),t.buffer.push('\r\n    </div>\r\n\r\n    <div class="form-group" '),t.buffer.push(u(r["bind-attr"].call(s,{hash:{"class":"error:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[],types:[],data:t}))),t.buffer.push('>\r\n        <label for="secret-file" class="control-label">Secret file</label>\r\n\r\n        <div class="input-group">\r\n            <input '),t.buffer.push(u(r["bind-attr"].call(s,{hash:{value:"content.filename"},hashTypes:{value:"STRING"},hashContexts:{value:s},contexts:[],types:[],data:t}))),t.buffer.push('\r\n                    type="text"\r\n                    class="form-control vlt-filename"\r\n                    readonly=""\r\n                    placeholder="Select your key">\r\n\r\n            <span class="vlt-secret-type-file input-group-btn btn btn-default btn-file">\r\n                Browse <input type="file">\r\n            </span>\r\n\r\n        </div>\r\n        <div class="help-block">\r\n            Store file up to 25KB filesize\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <div class="form-group" '),t.buffer.push(u(r["bind-attr"].call(s,{hash:{"class":"errors.name:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[],types:[],data:t}))),t.buffer.push('>\r\n        <label for="secret-note">Note</label>\r\n        '),l=r._triageMustache.call(s,"errors.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push("\r\n        "),t.buffer.push(u(r.view.call(s,"Em.TextArea",{hash:{elementId:"secret-note",valueBinding:"content.note","class":"form-control",rows:5},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING",rows:"INTEGER"},hashContexts:{elementId:s,valueBinding:s,"class":s,rows:s},contexts:[s],types:["ID"],data:t}))),t.buffer.push("\r\n    </div>\r\n</div>\r\n\r\n"),l=r.unless.call(s,"content.id",{hash:{},hashTypes:{},hashContexts:{},inverse:c.noop,fn:c.program(1,n,t),contexts:[s],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push('\r\n\r\n<div class="clearfix"></div>'),h});
Ember.TEMPLATES["Secret/SecretIndexItemNote"]=Ember.Handlebars.template(function(e,r,s,n,t){function a(e,r){var n,t="";return r.buffer.push('\r\n            <h3 class="top-0">'),n=s._triageMustache.call(e,"name",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:r}),(n||0===n)&&r.buffer.push(n),r.buffer.push("</h3>\r\n        "),t}function h(e,r){var n,t,a="";return r.buffer.push('\r\n            <div class="vlt-attrs">\r\n                <div class="vlt-markdown">\r\n                    '),r.buffer.push(u((n=s.renderMarkdown||e&&e.renderMarkdown,t={hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:r},n?n.call(e,"note",t):d.call(e,"renderMarkdown","note",t)))),r.buffer.push("\r\n                </div>\r\n            </div>\r\n\r\n            "),r.buffer.push(u(s.view.call(e,"Vaultier.SecretIndexItemControlsView",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:r}))),r.buffer.push("\r\n        "),a}function p(e,r){r.buffer.push('\r\n            <div class="alert alert-warning top-15">\r\n                Encrypted data cannot be decrypted\r\n            </div>\r\n        ')}this.compilerInfo=[4,">= 1.0.0"],s=this.merge(s,Ember.Handlebars.helpers),t=t||{};var i,l="",d=s.helperMissing,u=this.escapeExpression,f=this;return t.buffer.push('<div class="vlt-wrapper">\r\n    <div class="vlt-visual">\r\n        <div class="vlt-icon">\r\n        </div>\r\n        <div class="vlt-type">\r\n            Note\r\n        </div>\r\n    </div>\r\n    <div class="vlt-inner">\r\n        '),i=s["if"].call(r,"name",{hash:{},hashTypes:{},hashContexts:{},inverse:f.noop,fn:f.program(1,a,t),contexts:[r],types:["ID"],data:t}),(i||0===i)&&t.buffer.push(i),t.buffer.push("\r\n\r\n        "),i=s["if"].call(r,"decrypted",{hash:{},hashTypes:{},hashContexts:{},inverse:f.program(5,p,t),fn:f.program(3,h,t),contexts:[r],types:["ID"],data:t}),(i||0===i)&&t.buffer.push(i),t.buffer.push("\r\n\r\n    </div>\r\n</div>"),l});
Ember.TEMPLATES["Secret/SecretIndexItemPassword"]=Ember.Handlebars.template(function(r,s,e,t,n){function a(r,s){var t,n="";return s.buffer.push('\r\n            <h3 class="top-0">'),t=e._triageMustache.call(r,"name",{hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("</h3>\r\n        "),n}function h(r,s){var t,n="";return s.buffer.push('\r\n            <div class="vlt-attrs">\r\n                <table class="table table-bordered">\r\n                    <colgroup>\r\n                        <col class="col-lg-1">\r\n                        <col class="col-lg-7">\r\n                    </colgroup>\r\n                    <tbody>\r\n                    '),t=e["if"].call(r,"url",{hash:{},hashTypes:{},hashContexts:{},inverse:v.noop,fn:v.program(4,u,s),contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("\r\n\r\n                    "),t=e["if"].call(r,"username",{hash:{},hashTypes:{},hashContexts:{},inverse:v.noop,fn:v.program(6,f,s),contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("\r\n\r\n                    "),t=e["if"].call(r,"password",{hash:{},hashTypes:{},hashContexts:{},inverse:v.noop,fn:v.program(8,p,s),contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("\r\n\r\n                    "),t=e["if"].call(r,"note",{hash:{},hashTypes:{},hashContexts:{},inverse:v.noop,fn:v.program(10,o,s),contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("\r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        "),n}function u(r,s){var t,n="";return s.buffer.push('\r\n                        <tr>\r\n                            <td class="vlt-attr-name">\r\n                                URL\r\n                            </td>\r\n                            <td><a '),s.buffer.push(i(e["bind-attr"].call(r,{hash:{href:"url"},hashTypes:{href:"ID"},hashContexts:{href:r},contexts:[],types:[],data:s}))),s.buffer.push(' target="_blank">'),t=e._triageMustache.call(r,"url",{hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("</a></td>\r\n                        </tr>\r\n                    "),n}function f(r,s){var t,n="";return s.buffer.push('\r\n                        <tr>\r\n                            <td class="vlt-attr-name">\r\n                                Username\r\n                            </td>\r\n                            <td>'),t=e._triageMustache.call(r,"username",{hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("</td>\r\n                        </tr>\r\n                    "),n}function p(r,s){var t,n="";return s.buffer.push('\r\n                        <tr>\r\n                            <td class="vlt-attr-name">\r\n                                Password\r\n                            </td>\r\n                            <td>'),t=e._triageMustache.call(r,"password",{hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("</td>\r\n                        </tr>\r\n                    "),n}function o(r,s){var t,n,a="";return s.buffer.push('\r\n                        <tr>\r\n                            <td class="vlt-attr-name">\r\n                                Note\r\n                            </td>\r\n                            <td>\r\n                                <div class="vlt-markdown">\r\n                                    '),s.buffer.push(i((t=e.renderMarkdown||r&&r.renderMarkdown,n={hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:s},t?t.call(r,"note",n):b.call(r,"renderMarkdown","note",n)))),s.buffer.push("\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    "),a}function l(r,s){s.buffer.push('\r\n            <div class="alert alert-warning top-15">\r\n                Encrypted data cannot be decrypted\r\n            </div>\r\n        ')}this.compilerInfo=[4,">= 1.0.0"],e=this.merge(e,Ember.Handlebars.helpers),n=n||{};var d,c="",i=this.escapeExpression,b=e.helperMissing,v=this;return n.buffer.push('<div class="vlt-wrapper">\r\n    <div class="vlt-visual">\r\n        <div class="vlt-icon">\r\n        </div>\r\n        <div class="vlt-type">\r\n            Password\r\n        </div>\r\n    </div>\r\n    <div class="vlt-inner">\r\n        '),d=e["if"].call(s,"name",{hash:{},hashTypes:{},hashContexts:{},inverse:v.noop,fn:v.program(1,a,n),contexts:[s],types:["ID"],data:n}),(d||0===d)&&n.buffer.push(d),n.buffer.push("\r\n\r\n        "),d=e["if"].call(s,"decrypted",{hash:{},hashTypes:{},hashContexts:{},inverse:v.program(12,l,n),fn:v.program(3,h,n),contexts:[s],types:["ID"],data:n}),(d||0===d)&&n.buffer.push(d),n.buffer.push("\r\n\r\n\r\n        "),n.buffer.push(i(e.view.call(s,"Vaultier.SecretIndexItemControlsView",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:n}))),n.buffer.push("\r\n\r\n    </div>\r\n</div>"),c});
Ember.TEMPLATES["Secret/SecretIndexItemFile"]=Ember.Handlebars.template(function(r,s,e,t,n){function a(r,s){var t,n="";return s.buffer.push('\r\n            <div class="vlt-attrs">\r\n                <table class="table table-bordered">\r\n                    <colgroup>\r\n                        <col class="col-lg-1">\r\n                        <col class="col-lg-7">\r\n                    </colgroup>\r\n                    <tbody>\r\n                    '),t=e["if"].call(r,"url",{hash:{},hashTypes:{},hashContexts:{},inverse:x.noop,fn:x.program(2,h,s),contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("\r\n\r\n                    "),t=e["if"].call(r,"username",{hash:{},hashTypes:{},hashContexts:{},inverse:x.noop,fn:x.program(4,u,s),contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("\r\n\r\n                    "),t=e["if"].call(r,"password",{hash:{},hashTypes:{},hashContexts:{},inverse:x.noop,fn:x.program(6,f,s),contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("\r\n\r\n                    "),t=e["if"].call(r,"filename",{hash:{},hashTypes:{},hashContexts:{},inverse:x.noop,fn:x.program(8,p,s),contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("\r\n\r\n                    "),t=e["if"].call(r,"filesize",{hash:{},hashTypes:{},hashContexts:{},inverse:x.noop,fn:x.program(10,l,s),contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("\r\n\r\n                    "),t=e["if"].call(r,"__hidden__filetype",{hash:{},hashTypes:{},hashContexts:{},inverse:x.noop,fn:x.program(12,o,s),contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("\r\n\r\n                    "),t=e["if"].call(r,"note",{hash:{},hashTypes:{},hashContexts:{},inverse:x.noop,fn:x.program(14,c,s),contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("\r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n            "),s.buffer.push(v(e.view.call(r,"Vaultier.SecretIndexItemControlsView",{hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:s}))),s.buffer.push("\r\n        "),n}function h(r,s){var t,n="";return s.buffer.push('\r\n                        <tr>\r\n                            <td class="vlt-attr-name">\r\n                                URL\r\n                            </td>\r\n                            <td>'),t=e._triageMustache.call(r,"url",{hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("</td>\r\n                        </tr>\r\n                    "),n}function u(r,s){var t,n="";return s.buffer.push('\r\n                        <tr>\r\n                            <td class="vlt-attr-name">\r\n                                Username\r\n                            </td>\r\n                            <td>'),t=e._triageMustache.call(r,"username",{hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("</td>\r\n                        </tr>\r\n                    "),n}function f(r,s){var t,n="";return s.buffer.push('\r\n                        <tr>\r\n                            <td class="vlt-attr-name">\r\n                                Password\r\n                            </td>\r\n                            <td>'),t=e._triageMustache.call(r,"password",{hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("</td>\r\n                        </tr>\r\n                    "),n}function p(r,s){var t,n="";return s.buffer.push('\r\n                        <tr>\r\n                            <td class="vlt-attr-name">\r\n                                Filename\r\n                            </td>\r\n                            <td>\r\n                                '),t=e._triageMustache.call(r,"filename",{hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("\r\n                                <a "),s.buffer.push(v(e.action.call(r,"downloadBlob","content",{hash:{},hashTypes:{},hashContexts:{},contexts:[r,r],types:["ID","ID"],data:s}))),s.buffer.push(' class="btn btn-default btn-sm pull-right">\r\n                                    <span class="glyphicon glyphicon-save"></span>\r\n                                    Save to computer\r\n                                </a>\r\n                            </td>\r\n                        </tr>\r\n                    '),n}function l(r,s){var t,n,a="";return s.buffer.push('\r\n                        <tr>\r\n                            <td class="vlt-attr-name">\r\n                                Filesize\r\n                            </td>\r\n                            <td>'),s.buffer.push(v((t=e.humanFilesize||r&&r.humanFilesize,n={hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:s},t?t.call(r,"filesize",n):y.call(r,"humanFilesize","filesize",n)))),s.buffer.push("</td>\r\n                        </tr>\r\n                    "),a}function o(r,s){var t,n="";return s.buffer.push('\r\n                        <tr>\r\n                            <td class="vlt-attr-name">\r\n                                Mime type\r\n                            </td>\r\n                            <td>'),t=e._triageMustache.call(r,"filetype",{hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("</td>\r\n                        </tr>\r\n                    "),n}function c(r,s){var t,n,a="";return s.buffer.push('\r\n                        <tr>\r\n                            <td class="vlt-attr-name">\r\n                                Note\r\n                            </td>\r\n                            <td>\r\n                                <div class="vlt-markdown">\r\n                                    '),s.buffer.push(v((t=e.renderMarkdown||r&&r.renderMarkdown,n={hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:s},t?t.call(r,"note",n):y.call(r,"renderMarkdown","note",n)))),s.buffer.push("\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    "),a}function d(r,s){s.buffer.push('\r\n            <div class="alert alert-warning top-15">\r\n                Encrypted data cannot be decrypted\r\n            </div>\r\n        ')}this.compilerInfo=[4,">= 1.0.0"],e=this.merge(e,Ember.Handlebars.helpers),n=n||{};var i,b="",v=this.escapeExpression,y=e.helperMissing,x=this;return n.buffer.push('<div class="vlt-wrapper">\r\n    <div class="vlt-visual">\r\n        <div class="vlt-icon">\r\n        </div>\r\n        <div class="vlt-type">\r\n            File\r\n        </div>\r\n    </div>\r\n    <div class="vlt-inner">\r\n        <h3 class="top-0">'),i=e._triageMustache.call(s,"name",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:n}),(i||0===i)&&n.buffer.push(i),n.buffer.push("</h3>\r\n\r\n        "),i=e["if"].call(s,"decrypted",{hash:{},hashTypes:{},hashContexts:{},inverse:x.program(16,d,n),fn:x.program(1,a,n),contexts:[s],types:["ID"],data:n}),(i||0===i)&&n.buffer.push(i),n.buffer.push("\r\n\r\n    </div>\r\n</div>"),b});
Ember.TEMPLATES["Secret/SecretIndexItemControls"]=Ember.Handlebars.template(function(e,r,s,t,n){function a(e,r){var t,n="";return r.buffer.push('\r\n\r\n        <div class="vlt-buttons col-md-6">\r\n            <div class="btn-group">\r\n                <a type="button"\r\n                   class="btn btn-default dropdown-toggle btn-sm"\r\n                   data-toggle="dropdown">\r\n                    <span class="glyphicon glyphicon-cog"></span>\r\n                </a>\r\n                <ul class="dropdown-menu caret-left">\r\n\r\n                    '),t=s["if"].call(e,"perms.update",{hash:{},hashTypes:{},hashContexts:{},inverse:d.noop,fn:d.program(2,p,r),contexts:[e],types:["ID"],data:r}),(t||0===t)&&r.buffer.push(t),r.buffer.push("\r\n\r\n                    "),t=s["if"].call(e,"perms.delete",{hash:{},hashTypes:{},hashContexts:{},inverse:d.noop,fn:d.program(7,i,r),contexts:[e],types:["ID"],data:r}),(t||0===t)&&r.buffer.push(t),r.buffer.push("\r\n\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n    "),n}function p(e,r){var t,n,a,p="";return r.buffer.push("\r\n                        <li>\r\n                            "),n=s["link-to"]||e&&e["link-to"],a={hash:{},hashTypes:{},hashContexts:{},inverse:d.noop,fn:d.program(3,l,r),contexts:[e,e],types:["STRING","ID"],data:r},t=n?n.call(e,"Secret.edit","id",a):b.call(e,"link-to","Secret.edit","id",a),(t||0===t)&&r.buffer.push(t),r.buffer.push("\r\n                            "),n=s["link-to"]||e&&e["link-to"],a={hash:{},hashTypes:{},hashContexts:{},inverse:d.noop,fn:d.program(5,h,r),contexts:[e,e],types:["STRING","ID"],data:r},t=n?n.call(e,"Secret.move","id",a):b.call(e,"link-to","Secret.move","id",a),(t||0===t)&&r.buffer.push(t),r.buffer.push("\r\n                        </li>\r\n                    "),p}function l(e,r){r.buffer.push("Edit secret")}function h(e,r){r.buffer.push("Move secret to another card")}function i(e,r){var t="";return r.buffer.push('\r\n                        <li>\r\n                            <a href="javascript:" '),r.buffer.push(v(s.action.call(e,"deleteSecret","",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e],types:["ID","ID"],data:r}))),r.buffer.push(">Delete secret</a>\r\n                        </li>\r\n                    "),t}this.compilerInfo=[4,">= 1.0.0"],s=this.merge(s,Ember.Handlebars.helpers),n=n||{};var o,f,u,c="",d=this,b=s.helperMissing,v=this.escapeExpression;return n.buffer.push('<div class="vlt-controls">\r\n    <div class="vlt-author col-md-6">\r\n        <div class="vlt-footer-item help-block pull-left">\r\n            '),n.buffer.push(v((f=s.printUser||r&&r.printUser,u={hash:{ellipsis:12,prefix:"Created by:"},hashTypes:{ellipsis:"INTEGER",prefix:"STRING"},hashContexts:{ellipsis:r,prefix:r},contexts:[r],types:["ID"],data:n},f?f.call(r,"created_by",u):b.call(r,"printUser","created_by",u)))),n.buffer.push('\r\n        </div>\r\n        <div class="vlt-footer-item help-block pull-right">\r\n            '),n.buffer.push(v((f=s.printAgo||r&&r.printAgo,u={hash:{prefix:"Latest modification at:"},hashTypes:{prefix:"STRING"},hashContexts:{prefix:r},contexts:[r],types:["ID"],data:n},f?f.call(r,"updated_at",u):b.call(r,"printAgo","updated_at",u)))),n.buffer.push('\r\n        </div>\r\n        <div class="clearfix"></div>\r\n    </div>\r\n\r\n    '),f=s.exp||r&&r.exp,u={hash:{},hashTypes:{},hashContexts:{},inverse:d.noop,fn:d.program(1,a,n),contexts:[r],types:["STRING"],data:n},o=f?f.call(r,"(perms.update || perms.delete)",u):b.call(r,"exp","(perms.update || perms.delete)",u),(o||0===o)&&n.buffer.push(o),n.buffer.push('\r\n\r\n    <div class="clearfix"></div>\r\n\r\n</div>'),c});
Ember.TEMPLATES["Secret/SecretMove"]=Ember.Handlebars.template(function(s,e,n,a,t){this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),t=t||{};var l="",i=this.escapeExpression;return t.buffer.push('<div class="row">\n    <div class="col-md-12">\n\n        <div class="vlt-dialog vlt-dialog-window">\n                <div class="vlt-dialog-content">\n                    <div class="vlt-dialog-header">\n                        <h2>Move secret to another card</h2>\n                    </div>\n                    <div class="vlt-dialog-body">\n                        <h4>Please select target card</h4>\n                        <div class="vlt-tree">\n                            '),t.buffer.push(i(n.view.call(e,"view.Tree",{hash:{content:"treeNodes"},hashTypes:{content:"ID"},hashContexts:{content:e},contexts:[e],types:["ID"],data:t}))),t.buffer.push('\n                        </div>\n                        <div class="help-block">\n                            Also all granted permissions will be moved.\n                        </div>\n                        <div class="clearfix"></div>\n                   </div>\n                    <div class="vlt-dialog-footer">\n                        <a href="javascript:window.history.go(-1)" class="btn btn-default btn-sm">\n                            <span class="glyphicon glyphicon-chevron-left"></span>\n                            Back\n                        </a>\n                        <button '),t.buffer.push(i(n.action.call(e,"save",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}))),t.buffer.push(" "),t.buffer.push(i(n["bind-attr"].call(e,{hash:{disabled:"moveDisabled"},hashTypes:{disabled:"ID"},hashContexts:{disabled:e},contexts:[],types:[],data:t}))),t.buffer.push(' class="btn btn-primary">\n                            <span class="glyphicon glyphicon-ok"></span>\n                            Move\n                        </button>\n                    </div>\n\n                </div>\n        </div>\n    </div>\n</div>\n\n'),l});
Ember.TEMPLATES["Secret/SecretMoveVaultNode"]=Ember.Handlebars.template(function(e,s,t,a,h){this.compilerInfo=[4,">= 1.0.0"],t=this.merge(t,Ember.Handlebars.helpers),h=h||{};var r,l="",n=this.escapeExpression;return h.buffer.push('<div class="vlt-node vlt-vault" '),h.buffer.push(n(t["bind-attr"].call(s,{hash:{"class":"view.loading:vlt-loading"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[],types:[],data:h}))),h.buffer.push(">\n    "),r=t._triageMustache.call(s,"view.content.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:h}),(r||0===r)&&h.buffer.push(r),h.buffer.push("\n</div>"),l});
Ember.TEMPLATES["Secret/SecretMoveCardNode"]=Ember.Handlebars.template(function(e,a,s,t,n){this.compilerInfo=[4,">= 1.0.0"],s=this.merge(s,Ember.Handlebars.helpers),n=n||{};var h,l="",r=this.escapeExpression;return n.buffer.push('<div class="vlt-node vlt-card" '),n.buffer.push(r(s["bind-attr"].call(a,{hash:{"class":"view.loading:vlt-loading"},hashTypes:{"class":"STRING"},hashContexts:{"class":a},contexts:[],types:[],data:n}))),n.buffer.push(">\n\n    <label>\n        "),n.buffer.push(r(s.view.call(a,"view.Radio",{hash:{name:"move-target",value:"view.content.id"},hashTypes:{name:"STRING",value:"ID"},hashContexts:{name:a,value:a},contexts:[a],types:["ID"],data:n}))),n.buffer.push("\n        "),h=s._triageMustache.call(a,"view.content.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["ID"],data:n}),(h||0===h)&&n.buffer.push(h),n.buffer.push("\n    </label>\n</div>"),l});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNlY3JldEluZGV4LmpzIiwiU2VjcmV0RWRpdC5qcyIsIlNlY3JldENyZWF0ZS5qcyIsIlNlY3JldFR5cGVTZWxlY3QuanMiLCJTZWNyZXRUeXBlTm90ZS5qcyIsIlNlY3JldFR5cGVQYXNzd29yZC5qcyIsIlNlY3JldFR5cGVGaWxlLmpzIiwiU2VjcmV0SW5kZXhJdGVtTm90ZS5qcyIsIlNlY3JldEluZGV4SXRlbVBhc3N3b3JkLmpzIiwiU2VjcmV0SW5kZXhJdGVtRmlsZS5qcyIsIlNlY3JldEluZGV4SXRlbUNvbnRyb2xzLmpzIiwiU2VjcmV0TW92ZS5qcyIsIlNlY3JldE1vdmVWYXVsdE5vZGUuanMiLCJTZWNyZXRNb3ZlQ2FyZE5vZGUuanMiXSwibmFtZXMiOlsiRW1iZXIiLCJURU1QTEFURVMiLCJIYW5kbGViYXJzIiwidGVtcGxhdGUiLCJkZXB0aDAiLCJoZWxwZXJzIiwicGFydGlhbHMiLCJkYXRhIiwicHJvZ3JhbTEiLCJzdGFjazEiLCJidWZmZXIiLCJwdXNoIiwiY2FsbCIsImhhc2giLCJoYXNoVHlwZXMiLCJoYXNoQ29udGV4dHMiLCJpbnZlcnNlIiwic2VsZiIsIm5vb3AiLCJmbiIsInByb2dyYW0iLCJwcm9ncmFtMiIsImNvbnRleHRzIiwidHlwZXMiLCJwcm9ncmFtNyIsInByb2dyYW0xMCIsImhlbHBlciIsIm9wdGlvbnMiLCJwcm9ncmFtMyIsImhlbHBlck1pc3NpbmciLCJwcm9ncmFtNSIsImVzY2FwZUV4cHJlc3Npb24iLCJhY3Rpb24iLCJwcm9ncmFtOCIsInByb2dyYW0xMSIsInByb2dyYW0xMyIsImVhY2giLCJwcm9ncmFtMTQiLCJwcm9ncmFtMTUiLCJwcm9ncmFtMTciLCJwcm9ncmFtMTkiLCJ2aWV3IiwiY2xhc3MiLCJwcm9ncmFtMjEiLCJwcm9ncmFtMjIiLCJwcm9ncmFtMjMiLCJwcm9ncmFtMjUiLCJfdHJpYWdlTXVzdGFjaGUiLCJwcm9ncmFtMjciLCJwcm9ncmFtMjkiLCJwcm9ncmFtMzAiLCJwcm9ncmFtMzIiLCJwcm9ncmFtMzMiLCJwcm9ncmFtMzUiLCJwcm9ncmFtMzciLCJwcm9ncmFtMzgiLCJwcm9ncmFtNDAiLCJwcm9ncmFtNDEiLCJ0aGlzIiwiY29tcGlsZXJJbmZvIiwibWVyZ2UiLCJleHAiLCJyb2xlcyIsInVzZXIiLCJkaXNhYmxlZCIsInRhYiIsIm91dGxldCIsImVsZW1lbnRJZCIsInZhbHVlQmluZGluZyIsInJvd3MiLCJ1bmxlc3MiLCJ2YWx1ZSIsInJlbmRlck1hcmtkb3duIiwicHJvZ3JhbTQiLCJwcm9ncmFtNiIsImhyZWYiLCJwcm9ncmFtMTIiLCJodW1hbkZpbGVzaXplIiwicHJvZ3JhbTE2IiwicHJpbnRVc2VyIiwiZWxsaXBzaXMiLCJwcmVmaXgiLCJwcmludEFnbyIsImNvbnRlbnQiLCJuYW1lIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTUMsVUFBVSxzQkFBd0JELE1BQU1FLFdBQVdDLFNBQVMsU0FBbUJELEVBQVdFLEVBQU9DLEVBQVFDLEVBQVNDLEdBS3hILFFBQVNDLEdBQVNKLEVBQU9HLEdBRXZCLEdBQWlCRSxHQUFiQyxFQUFTLEVBV2IsT0FWQUgsR0FBS0csT0FBT0MsS0FBSyxnaUJBQ2pCRixFQUFTSixFQUFRLE1BQU1PLEtBQUtSLEVBQVEscUJBQXNCUyxRQUFRQyxhQUFhQyxnQkFBZ0JDLFFBQVFDLEVBQUtDLEtBQUtDLEdBQUdGLEVBQUtHLFFBQVEsRUFBR0MsRUFBVWQsR0FBTWUsVUFBVWxCLEdBQVFtQixPQUFPLE1BQU1oQixLQUFLQSxLQUNyTEUsR0FBcUIsSUFBWEEsSUFBZ0JGLEVBQUtHLE9BQU9DLEtBQUtGLEdBQzlDRixFQUFLRyxPQUFPQyxLQUFLLG9EQUNqQkYsRUFBU0osRUFBUSxNQUFNTyxLQUFLUixFQUFRLHFCQUFzQlMsUUFBUUMsYUFBYUMsZ0JBQWdCQyxRQUFRQyxFQUFLQyxLQUFLQyxHQUFHRixFQUFLRyxRQUFRLEVBQUdJLEVBQVVqQixHQUFNZSxVQUFVbEIsR0FBUW1CLE9BQU8sTUFBTWhCLEtBQUtBLEtBQ3JMRSxHQUFxQixJQUFYQSxJQUFnQkYs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RDtBQ2RUVixNQUFNQyxVQUFVLDZCQUErQkQsTUFBTUUsV0FBV0MsU0FBUyxTQUFtQkQsRUFBV0UsRUFBT0MsRUFBUUMsRUFBU0MsR0FDL0htRCxLQUFLQyxjQUFnQixFQUFFLFlBQ3ZCdEQsRUFBVXFELEtBQUtFLE1BQU12RCxFQUFTTCxNQUFNRSxXQUFXRyxTQUFVRSxFQUFPQSxLQUM5RCxJQUFpQkUsR0FBYkMsRUFBUyxHQUFZcUIsRUFBaUIyQixLQUFLM0IsZ0JBZ0IvQyxPQWJBeEIsR0FBS0csT0FBT0MsS0FBSyxtQ0FDakJKLEVBQUtHLE9BQU9DLEtBQUtvQixFQUFpQjFCLEVBQVEsYUFBYU8sS0FBS1IsR0FBU1MsTUFDbkU2QixRQUFTLDRCQUNUNUIsV0FBVzRCLFFBQVMsVUFBVTNCLGNBQWMyQixRQUFTdEMsR0FBUWtCLFlBQVlDLFNBQVNoQixLQUFLQSxNQUN6RkEsRUFBS0csT0FBT0MsS0FBSyw4QkFDakJKLEVBQUtHLE9BQU9DLEtBQUtvQixFQUFpQjFCLEVBQVFvQyxLQUFLN0IsS0FBS1IsRUFBUSxjQUFlUyxNQUN6RXVFLEtBQVEsY0FDUmIsTUFBUyxtQkFDVHpELFdBQVdzRSxLQUFRLFNBQVNiLE1BQVMsTUFBTXhELGNBQWNxRSxLQUFRaEYsRUFBT21FLE1BQVNuRSxHQUFRa0IsVUFBVWxCLEdBQVFtQixPQUFPLE1BQU1oQixLQUFLQSxNQUMvSEEsRUFBS0csT0FBT0MsS0FBSyxjQUNqQkYsRUFBU0osRUFBUTBDLGdCQUFnQm5DLEtBQUtSLEVBQVEscUJBQXNCUyxRQUFRQyxhQUFhQyxnQkFBZ0JPLFVBQVVsQixHQUFRbUIsT0FBTyxNQUFNaEIsS0FBS0EsS0FDMUlFLEdBQXFCLElBQVhBLElBQWdCRixFQUFLRyxPQUFPQyxLQUFLRixHQUM5Q0YsRUFBS0csT0FBT0MsS0FBSywwQkFDVkQiLCJmaWxlIjoic2VjcmV0LnRwbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIkVtYmVyLlRFTVBMQVRFU1tcIlNlY3JldC9TZWNyZXRJbmRleFwiXSA9IEVtYmVyLkhhbmRsZWJhcnMudGVtcGxhdGUoZnVuY3Rpb24gYW5vbnltb3VzKEhhbmRsZWJhcnMsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xudGhpcy5jb21waWxlckluZm8gPSBbNCwnPj0gMS4wLjAnXTtcbmhlbHBlcnMgPSB0aGlzLm1lcmdlKGhlbHBlcnMsIEVtYmVyLkhhbmRsZWJhcnMuaGVscGVycyk7IGRhdGEgPSBkYXRhIHx8IHt9O1xuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMSwgaGVscGVyLCBvcHRpb25zLCBzZWxmPXRoaXMsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcblxuZnVuY3Rpb24gcHJvZ3JhbTEoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJidG4tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZVxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPVxcXCJkcm9wZG93blxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNvZ1xcXCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYW5hZ2VcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XFxcImRyb3Bkb3duLW1lbnUgY2FyZXQtbGVmdFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVyc1snaWYnXS5jYWxsKGRlcHRoMCwgXCJjYXJkLnBlcm1zLnVwZGF0ZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgyLCBwcm9ncmFtMiwgZGF0YSksY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzWydpZiddLmNhbGwoZGVwdGgwLCBcImNhcmQucGVybXMuaW52aXRlXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDcsIHByb2dyYW03LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwiY2FyZC5wZXJtcy5jcmVhdGVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxpbnZlcnNlOnNlbGYubm9vcCxmbjpzZWxmLnByb2dyYW0oMTAsIHByb2dyYW0xMCwgZGF0YSksY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuZnVuY3Rpb24gcHJvZ3JhbTIoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxLCBoZWxwZXIsIG9wdGlvbnM7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IChoZWxwZXIgPSBoZWxwZXJzWydsaW5rLXRvJ10gfHwgKGRlcHRoMCAmJiBkZXB0aDBbJ2xpbmstdG8nXSksb3B0aW9ucz17aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgzLCBwcm9ncmFtMywgZGF0YSksY29udGV4dHM6W2RlcHRoMCxkZXB0aDBdLHR5cGVzOltcIlNUUklOR1wiLFwiSURcIl0sZGF0YTpkYXRhfSxoZWxwZXIgPyBoZWxwZXIuY2FsbChkZXB0aDAsIFwiQ2FyZC5lZGl0XCIsIFwiY2FyZC5zbHVnXCIsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJsaW5rLXRvXCIsIFwiQ2FyZC5lZGl0XCIsIFwiY2FyZC5zbHVnXCIsIG9wdGlvbnMpKTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IChoZWxwZXIgPSBoZWxwZXJzWydsaW5rLXRvJ10gfHwgKGRlcHRoMCAmJiBkZXB0aDBbJ2xpbmstdG8nXSksb3B0aW9ucz17aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSg1LCBwcm9ncmFtNSwgZGF0YSksY29udGV4dHM6W2RlcHRoMCxkZXB0aDBdLHR5cGVzOltcIlNUUklOR1wiLFwiSURcIl0sZGF0YTpkYXRhfSxoZWxwZXIgPyBoZWxwZXIuY2FsbChkZXB0aDAsIFwiQ2FyZC5tb3ZlXCIsIFwiY2FyZC5zbHVnXCIsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJsaW5rLXRvXCIsIFwiQ2FyZC5tb3ZlXCIsIFwiY2FyZC5zbHVnXCIsIG9wdGlvbnMpKTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVxcXCIjXFxcIiBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzLmFjdGlvbi5jYWxsKGRlcHRoMCwgXCJkZWxldGVDYXJkXCIsIFwiY2FyZFwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDAsZGVwdGgwXSx0eXBlczpbXCJJRFwiLFwiSURcIl0sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIiA+RGVsZXRlIGNhcmQ8L2E+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cbmZ1bmN0aW9uIHByb2dyYW0zKGRlcHRoMCxkYXRhKSB7XG4gIFxuICBcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFZGl0IGNhcmRcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTUoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIFxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vdmUgY2FyZCB0byBhbm90aGVyIHZhdWx0XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICB9XG5cbmZ1bmN0aW9uIHByb2dyYW03KGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMSwgaGVscGVyLCBvcHRpb25zO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSAoaGVscGVyID0gaGVscGVyc1snbGluay10byddIHx8IChkZXB0aDAgJiYgZGVwdGgwWydsaW5rLXRvJ10pLG9wdGlvbnM9e2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxpbnZlcnNlOnNlbGYubm9vcCxmbjpzZWxmLnByb2dyYW0oOCwgcHJvZ3JhbTgsIGRhdGEpLGNvbnRleHRzOltkZXB0aDAsZGVwdGgwXSx0eXBlczpbXCJTVFJJTkdcIixcIklEXCJdLGRhdGE6ZGF0YX0saGVscGVyID8gaGVscGVyLmNhbGwoZGVwdGgwLCBcIkNhcmQubWVtYmVySW5kZXhcIiwgXCJjYXJkXCIsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJsaW5rLXRvXCIsIFwiQ2FyZC5tZW1iZXJJbmRleFwiLCBcImNhcmRcIiwgb3B0aW9ucykpO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cbmZ1bmN0aW9uIHByb2dyYW04KGRlcHRoMCxkYXRhKSB7XG4gIFxuICBcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaGFyZVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtMTAoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxLCBoZWxwZXIsIG9wdGlvbnM7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IChoZWxwZXIgPSBoZWxwZXJzWydsaW5rLXRvJ10gfHwgKGRlcHRoMCAmJiBkZXB0aDBbJ2xpbmstdG8nXSksb3B0aW9ucz17aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgxMSwgcHJvZ3JhbTExLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJTVFJJTkdcIl0sZGF0YTpkYXRhfSxoZWxwZXIgPyBoZWxwZXIuY2FsbChkZXB0aDAsIFwiU2VjcmV0LmNyZWF0ZVNlbGVjdFwiLCBvcHRpb25zKSA6IGhlbHBlck1pc3NpbmcuY2FsbChkZXB0aDAsIFwibGluay10b1wiLCBcIlNlY3JldC5jcmVhdGVTZWxlY3RcIiwgb3B0aW9ucykpO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cbmZ1bmN0aW9uIHByb2dyYW0xMShkZXB0aDAsZGF0YSkge1xuICBcbiAgXG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWRkIHNlY3JldFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtMTMoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtc2VjcmV0LWJveFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LXZpc3VhbFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC12aXN1YWwtYmdcXFwiPjwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgxNCwgcHJvZ3JhbTE0LCBkYXRhKSxjb250ZXh0czpbXSx0eXBlczpbXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cbmZ1bmN0aW9uIHByb2dyYW0xNChkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazE7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzWydpZiddLmNhbGwoZGVwdGgwLCBcImlzTm90ZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgxNSwgcHJvZ3JhbTE1LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwiaXNQYXNzd29yZFwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgxNywgcHJvZ3JhbTE3LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwiaXNGaWxlXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDE5LCBwcm9ncmFtMTksIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5mdW5jdGlvbiBwcm9ncmFtMTUoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJztcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVycy52aWV3LmNhbGwoZGVwdGgwLCBcIlZhdWx0aWVyLlNlY3JldEluZGV4SXRlbU5vdGVWaWV3XCIsIHtoYXNoOntcbiAgICAnY2xhc3MnOiAoXCJ2bHQtc2VjcmV0LWl0ZW0gdmx0LW5vdGVcIilcbiAgfSxoYXNoVHlwZXM6eydjbGFzcyc6IFwiU1RSSU5HXCJ9LGhhc2hDb250ZXh0czp7J2NsYXNzJzogZGVwdGgwfSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtMTcoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJztcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVycy52aWV3LmNhbGwoZGVwdGgwLCBcIlZhdWx0aWVyLlNlY3JldEluZGV4SXRlbVBhc3N3b3JkVmlld1wiLCB7aGFzaDp7XG4gICAgJ2NsYXNzJzogKFwidmx0LXNlY3JldC1pdGVtIHZsdC1wYXNzd29yZFwiKVxuICB9LGhhc2hUeXBlczp7J2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnY2xhc3MnOiBkZXB0aDB9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbmZ1bmN0aW9uIHByb2dyYW0xOShkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzLnZpZXcuY2FsbChkZXB0aDAsIFwiVmF1bHRpZXIuU2VjcmV0SW5kZXhJdGVtRmlsZVZpZXdcIiwge2hhc2g6e1xuICAgICdjbGFzcyc6IChcInZsdC1zZWNyZXQtaXRlbSB2bHQtZmlsZVwiKVxuICB9LGhhc2hUeXBlczp7J2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnY2xhc3MnOiBkZXB0aDB9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbmZ1bmN0aW9uIHByb2dyYW0yMShkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazE7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwianVtYm90cm9uIHZsdC1iaWdib3ggdmx0LXNlY3JldFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtaGVhZGVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtaWNvblxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LXRpdGxlXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPllvdSBkbyBub3QgaGF2ZSBhbnkgc2VjcmV0IHlldDwvaDE+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVyc1snaWYnXS5jYWxsKGRlcHRoMCwgXCJjYXJkLnBlcm1zLmNyZWF0ZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgyMiwgcHJvZ3JhbTIyLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuZnVuY3Rpb24gcHJvZ3JhbTIyKGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMSwgaGVscGVyLCBvcHRpb25zO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgY2FyZCBpcyBlbXB0eS5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxlYXNlIGNyZWF0ZSBvbmUgb3IgbW9yZSBzZWNyZXRzIG9uIHRoaXMgY2FyZC5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VjcmV0IGFyZSBzZWN1cmVkIGJ5IGVuY3J5cHRpb24gYW5kIGFjY2Vzc2libGUgb25seSB0byB5b3UgYW5kIHlvdXIgdGVhbS5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VjcmV0IGNvdWxkIGJlIHBhc3N3b3JkLCBub3RlLCBjcmVkaXQgY2FyZCBudW1iZXIgb3Iga2V5IGZpbGVcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcInRvcC0zMFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gKGhlbHBlciA9IGhlbHBlcnNbJ2xpbmstdG8nXSB8fCAoZGVwdGgwICYmIGRlcHRoMFsnbGluay10byddKSxvcHRpb25zPXtoYXNoOntcbiAgICAnY2xhc3MnOiAoXCJidG4gYnRuLWxnIGJ0bi1wcmltYXJ5XCIpXG4gIH0saGFzaFR5cGVzOnsnY2xhc3MnOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eydjbGFzcyc6IGRlcHRoMH0saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDIzLCBwcm9ncmFtMjMsIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIlNUUklOR1wiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCJTZWNyZXQuY3JlYXRlU2VsZWN0XCIsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJsaW5rLXRvXCIsIFwiU2VjcmV0LmNyZWF0ZVNlbGVjdFwiLCBvcHRpb25zKSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cbmZ1bmN0aW9uIHByb2dyYW0yMyhkZXB0aDAsZGF0YSkge1xuICBcbiAgXG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLXBsdXNcXFwiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFkZCBzZWNyZXRcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICB9XG5cbmZ1bmN0aW9uIHByb2dyYW0yNShkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazE7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzLl90cmlhZ2VNdXN0YWNoZS5jYWxsKGRlcHRoMCwgXCJjYXJkLmRlc2NyaXB0aW9uXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTI3KGRlcHRoMCxkYXRhKSB7XG4gIFxuICBcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBObyBkZXNjcmlwdGlvbiBnaXZlblxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtMjkoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxLCBoZWxwZXIsIG9wdGlvbnM7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcInZsdC1idXR0b24td3JhcHBlclxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9XFxcInRvb2x0aXBcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXRlIG9uZSBvciBtb3JlIHNlY3JldHMgb24gdGhpcyBjYXJkLlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWNyZXRzIGFyZSBzZWN1cmVkIGJ5IGVuY3J5cHRpb24gYW5kIGFjY2Vzc2libGUgb25seSB0byB5b3UgYW5kIHlvdXIgdGVhbS5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VjcmV0IGNvdWxkIGJlIHBhc3N3b3JkLCBub3RlLCBjcmVkaXQgY2FyZCBudW1iZXIgb3Iga2V5IGZpbGVcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBsYWNlbWVudD1cXFwiYm90dG9tXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSAoaGVscGVyID0gaGVscGVyc1snbGluay10byddIHx8IChkZXB0aDAgJiYgZGVwdGgwWydsaW5rLXRvJ10pLG9wdGlvbnM9e2hhc2g6e1xuICAgICdjbGFzcyc6IChcImJ0biBidG4tcHJpbWFyeVwiKVxuICB9LGhhc2hUeXBlczp7J2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnY2xhc3MnOiBkZXB0aDB9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgzMCwgcHJvZ3JhbTMwLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJTVFJJTkdcIl0sZGF0YTpkYXRhfSxoZWxwZXIgPyBoZWxwZXIuY2FsbChkZXB0aDAsIFwiU2VjcmV0LmNyZWF0ZVNlbGVjdFwiLCBvcHRpb25zKSA6IGhlbHBlck1pc3NpbmcuY2FsbChkZXB0aDAsIFwibGluay10b1wiLCBcIlNlY3JldC5jcmVhdGVTZWxlY3RcIiwgb3B0aW9ucykpO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5mdW5jdGlvbiBwcm9ncmFtMzAoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIFxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLXBsdXNcXFwiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWRkIHNlY3JldFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtMzIoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJidG4tZ3JvdXBcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZVxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPVxcXCJkcm9wZG93blxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNvZ1xcXCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9wZXJ0aWVzXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVxcXCJkcm9wZG93bi1tZW51IGNhcmV0LWxlZnRcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwiY2FyZC5wZXJtcy51cGRhdGVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxpbnZlcnNlOnNlbGYubm9vcCxmbjpzZWxmLnByb2dyYW0oMzMsIHByb2dyYW0zMywgZGF0YSksY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzWydpZiddLmNhbGwoZGVwdGgwLCBcImNhcmQucGVybXMudXBkYXRlXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDM1LCBwcm9ncmFtMzUsIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cbmZ1bmN0aW9uIHByb2dyYW0zMyhkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazEsIGhlbHBlciwgb3B0aW9ucztcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gKGhlbHBlciA9IGhlbHBlcnNbJ2xpbmstdG8nXSB8fCAoZGVwdGgwICYmIGRlcHRoMFsnbGluay10byddKSxvcHRpb25zPXtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDMsIHByb2dyYW0zLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwLGRlcHRoMF0sdHlwZXM6W1wiU1RSSU5HXCIsXCJJRFwiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCJDYXJkLmVkaXRcIiwgXCJjYXJkLnNsdWdcIiwgb3B0aW9ucykgOiBoZWxwZXJNaXNzaW5nLmNhbGwoZGVwdGgwLCBcImxpbmstdG9cIiwgXCJDYXJkLmVkaXRcIiwgXCJjYXJkLnNsdWdcIiwgb3B0aW9ucykpO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gKGhlbHBlciA9IGhlbHBlcnNbJ2xpbmstdG8nXSB8fCAoZGVwdGgwICYmIGRlcHRoMFsnbGluay10byddKSxvcHRpb25zPXtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDUsIHByb2dyYW01LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwLGRlcHRoMF0sdHlwZXM6W1wiU1RSSU5HXCIsXCJJRFwiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCJDYXJkLm1vdmVcIiwgXCJjYXJkLnNsdWdcIiwgb3B0aW9ucykgOiBoZWxwZXJNaXNzaW5nLmNhbGwoZGVwdGgwLCBcImxpbmstdG9cIiwgXCJDYXJkLm1vdmVcIiwgXCJjYXJkLnNsdWdcIiwgb3B0aW9ucykpO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTM1KGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJyc7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVxcXCIjXFxcIiBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzLmFjdGlvbi5jYWxsKGRlcHRoMCwgXCJkZWxldGVDYXJkXCIsIFwiY2FyZFwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDAsZGVwdGgwXSx0eXBlczpbXCJJRFwiLFwiSURcIl0sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIiA+RGVsZXRlIGNhcmQ8L2E+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTM3KGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMSwgaGVscGVyLCBvcHRpb25zO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJ2bHQtYnV0dG9uLXdyYXBwZXJcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPVxcXCJ0b29sdGlwXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludml0ZSBuZXcgdGVhbSBtZW1iZXJzIHRvIGNvbGxhYm9yYXRlIG92ZXIgdGhpcyBjYXJkXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yICBncmFudCBhY2Nlc3MgcGVybWlzc2lvbiB0byBjdXJyZW50IHRlYW0gbWVtYmVyc1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGxhY2VtZW50PVxcXCJib3R0b21cXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IChoZWxwZXIgPSBoZWxwZXJzWydsaW5rLXRvJ10gfHwgKGRlcHRoMCAmJiBkZXB0aDBbJ2xpbmstdG8nXSksb3B0aW9ucz17aGFzaDp7XG4gICAgJ2NsYXNzJzogKFwiYnRuIGJ0bi1kZWZhdWx0XCIpXG4gIH0saGFzaFR5cGVzOnsnY2xhc3MnOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eydjbGFzcyc6IGRlcHRoMH0saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDM4LCBwcm9ncmFtMzgsIGRhdGEpLGNvbnRleHRzOltkZXB0aDAsZGVwdGgwXSx0eXBlczpbXCJTVFJJTkdcIixcIklEXCJdLGRhdGE6ZGF0YX0saGVscGVyID8gaGVscGVyLmNhbGwoZGVwdGgwLCBcIkNhcmQubWVtYmVySW52aXRlXCIsIFwiY2FyZFwiLCBvcHRpb25zKSA6IGhlbHBlck1pc3NpbmcuY2FsbChkZXB0aDAsIFwibGluay10b1wiLCBcIkNhcmQubWVtYmVySW52aXRlXCIsIFwiY2FyZFwiLCBvcHRpb25zKSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cbmZ1bmN0aW9uIHByb2dyYW0zOChkZXB0aDAsZGF0YSkge1xuICBcbiAgXG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tcGx1c1xcXCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnZpdGVcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTQwKGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMSwgaGVscGVyLCBvcHRpb25zO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJ2bHQtYnV0dG9uLXdyYXBwZXJcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPVxcXCJ0b29sdGlwXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludml0ZSBuZXcgdGVhbSBtZW1iZXJzIHRvIGNvbGxhYm9yYXRlIG92ZXIgdGhpcyBjYXJkXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yICBncmFudCBhY2Nlc3MgcGVybWlzc2lvbiB0byBjdXJyZW50IHRlYW0gbWVtYmVyc1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcGxhY2VtZW50PVxcXCJib3R0b21cXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IChoZWxwZXIgPSBoZWxwZXJzWydsaW5rLXRvJ10gfHwgKGRlcHRoMCAmJiBkZXB0aDBbJ2xpbmstdG8nXSksb3B0aW9ucz17aGFzaDp7XG4gICAgJ2NsYXNzJzogKFwiYnRuIGJ0bi1kZWZhdWx0XCIpXG4gIH0saGFzaFR5cGVzOnsnY2xhc3MnOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eydjbGFzcyc6IGRlcHRoMH0saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDQxLCBwcm9ncmFtNDEsIGRhdGEpLGNvbnRleHRzOltkZXB0aDAsZGVwdGgwXSx0eXBlczpbXCJTVFJJTkdcIixcIklEXCJdLGRhdGE6ZGF0YX0saGVscGVyID8gaGVscGVyLmNhbGwoZGVwdGgwLCBcIkNhcmQubWVtYmVySW5kZXhcIiwgXCJjYXJkXCIsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJsaW5rLXRvXCIsIFwiQ2FyZC5tZW1iZXJJbmRleFwiLCBcImNhcmRcIiwgb3B0aW9ucykpO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5mdW5jdGlvbiBwcm9ncmFtNDEoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIFxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLXVzZXJcXFwiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGVhbVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgfVxuXG4gIGRhdGEuYnVmZmVyLnB1c2goXCI8ZGl2IGNsYXNzPVxcXCJjb250YWluZXItZnVsbFxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcInZsdC1wYWdlIHZsdC1wYWdlLXdpdGgtc2lkZWJhclxcXCI+XFxyXFxuXFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtcGFnZS1jb250ZW50XFxcIj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTJcXFwiPlxcclxcblxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtcGFnZS1jb250ZW50LXJlc3BvbnNpdmUtaGVhZGVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInJvdy1mbHVpZFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLXhzLTNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IChoZWxwZXIgPSBoZWxwZXJzLmV4cCB8fCAoZGVwdGgwICYmIGRlcHRoMC5leHApLG9wdGlvbnM9e2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxpbnZlcnNlOnNlbGYubm9vcCxmbjpzZWxmLnByb2dyYW0oMSwgcHJvZ3JhbTEsIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIlNUUklOR1wiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCIoIGNhcmQucGVybXMudXBkYXRlIHx8IGNhcmQucGVybXMuZGVsZXRlIHx8IGNhcmQucGVybXMuY3JlYXRlIHx8IGNhcmQucGVybXMuaW52aXRlIClcIiwgb3B0aW9ucykgOiBoZWxwZXJNaXNzaW5nLmNhbGwoZGVwdGgwLCBcImV4cFwiLCBcIiggY2FyZC5wZXJtcy51cGRhdGUgfHwgY2FyZC5wZXJtcy5kZWxldGUgfHwgY2FyZC5wZXJtcy5jcmVhdGUgfHwgY2FyZC5wZXJtcy5pbnZpdGUgKVwiLCBvcHRpb25zKSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjb2wteHMtOVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5DYXJkOiBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnMuX3RyaWFnZU11c3RhY2hlLmNhbGwoZGVwdGgwLCBcImNhcmQubmFtZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiIDwvaDI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2xlYXJmaXhcXFwiPjwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcblxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ0b3AtMzAgdmx0LWl0ZW1zXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVyc1snaWYnXS5jYWxsKGRlcHRoMCwgXCJsZW5ndGhcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxpbnZlcnNlOnNlbGYucHJvZ3JhbSgyMSwgcHJvZ3JhbTIxLCBkYXRhKSxmbjpzZWxmLnByb2dyYW0oMTMsIHByb2dyYW0xMywgZGF0YSksY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtcGFnZS1zaWRlYmFyXFxcIj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtc2lkZWJhci1ibG9ja1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1zaWRlYmFyLWJsb2NrLWhlYWRpbmdcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LWhlYWRlclxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XFxcIi9zdGF0aWMvdmF1bHRpZXIvaW1hZ2VzL2ljb24tdmF1bHQtZ3JleS5wbmdcXFwiIGNsYXNzPVxcXCJ2bHQtaWNvblxcXCI+XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVxcXCJ2bHQtdGl0bGVcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnMuX3RyaWFnZU11c3RhY2hlLmNhbGwoZGVwdGgwLCBcImNhcmQubmFtZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LWJvZHlcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVyc1snaWYnXS5jYWxsKGRlcHRoMCwgXCJjYXJkLmRlc2NyaXB0aW9uXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLnByb2dyYW0oMjcsIHByb2dyYW0yNywgZGF0YSksZm46c2VsZi5wcm9ncmFtKDI1LCBwcm9ncmFtMjUsIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1jb250cm9sc1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzWydpZiddLmNhbGwoZGVwdGgwLCBcImNhcmQucGVybXMuY3JlYXRlXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDI5LCBwcm9ncmFtMjksIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gKGhlbHBlciA9IGhlbHBlcnMuZXhwIHx8IChkZXB0aDAgJiYgZGVwdGgwLmV4cCksb3B0aW9ucz17aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgzMiwgcHJvZ3JhbTMyLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJTVFJJTkdcIl0sZGF0YTpkYXRhfSxoZWxwZXIgPyBoZWxwZXIuY2FsbChkZXB0aDAsIFwiKCBjYXJkLnBlcm1zLnVwZGF0ZSB8fCBjYXJkLnBlcm1zLmRlbGV0ZSlcIiwgb3B0aW9ucykgOiBoZWxwZXJNaXNzaW5nLmNhbGwoZGVwdGgwLCBcImV4cFwiLCBcIiggY2FyZC5wZXJtcy51cGRhdGUgfHwgY2FyZC5wZXJtcy5kZWxldGUpXCIsIG9wdGlvbnMpKTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNsZWFyZml4XFxcIj48L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LXNpZGViYXItYmxvY2stc2hhcmluZ1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtaGVhZGVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cXFwiL3N0YXRpYy92YXVsdGllci9pbWFnZXMvaWNvbi10ZWFtLWdyZXkucG5nXFxcIiBjbGFzcz1cXFwidmx0LWljb25cXFwiPlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cXFwidmx0LXRpdGxlXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2hhcmluZyB3aXRoXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LWJvZHlcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKChoZWxwZXIgPSBoZWxwZXJzWydtZW1iZXItYm94J10gfHwgKGRlcHRoMCAmJiBkZXB0aDBbJ21lbWJlci1ib3gnXSksb3B0aW9ucz17aGFzaDp7XG4gICAgJ3JvbGVzJzogKFwibWVtYmVyc2hpcHNcIiksXG4gICAgJ3VzZXInOiAoXCJhdXRoLnVzZXJcIilcbiAgfSxoYXNoVHlwZXM6eydyb2xlcyc6IFwiSURcIiwndXNlcic6IFwiSURcIn0saGFzaENvbnRleHRzOnsncm9sZXMnOiBkZXB0aDAsJ3VzZXInOiBkZXB0aDB9LGNvbnRleHRzOltdLHR5cGVzOltdLGRhdGE6ZGF0YX0saGVscGVyID8gaGVscGVyLmNhbGwoZGVwdGgwLCBvcHRpb25zKSA6IGhlbHBlck1pc3NpbmcuY2FsbChkZXB0aDAsIFwibWVtYmVyLWJveFwiLCBvcHRpb25zKSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtY29udHJvbHNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVyc1snaWYnXS5jYWxsKGRlcHRoMCwgXCJjYXJkLnBlcm1zLmludml0ZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgzNywgcHJvZ3JhbTM3LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwiY2FyZC5wZXJtcy5pbnZpdGVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxpbnZlcnNlOnNlbGYubm9vcCxmbjpzZWxmLnByb2dyYW0oNDAsIHByb2dyYW00MCwgZGF0YSksY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcblxcclxcbiAgICA8L2Rpdj5cXHJcXG5cXHJcXG48L2Rpdj5cXHJcXG5cXHJcXG5cXHJcXG5cIik7XG4gIHJldHVybiBidWZmZXI7XG4gIFxufSk7IiwiRW1iZXIuVEVNUExBVEVTW1wiU2VjcmV0L1NlY3JldEVkaXRcIl0gPSBFbWJlci5IYW5kbGViYXJzLnRlbXBsYXRlKGZ1bmN0aW9uIGFub255bW91cyhIYW5kbGViYXJzLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbnRoaXMuY29tcGlsZXJJbmZvID0gWzQsJz49IDEuMC4wJ107XG5oZWxwZXJzID0gdGhpcy5tZXJnZShoZWxwZXJzLCBFbWJlci5IYW5kbGViYXJzLmhlbHBlcnMpOyBkYXRhID0gZGF0YSB8fCB7fTtcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazEsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBzZWxmPXRoaXM7XG5cbmZ1bmN0aW9uIHByb2dyYW0xKGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJyc7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVycy52aWV3LmNhbGwoZGVwdGgwLCBcIlZhdWx0aWVyLlNlY3JldFR5cGVOb3RlVmlld1wiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTMoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJztcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzLnZpZXcuY2FsbChkZXB0aDAsIFwiVmF1bHRpZXIuU2VjcmV0VHlwZVBhc3N3b3JkVmlld1wiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTUoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJztcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzLnZpZXcuY2FsbChkZXB0aDAsIFwiVmF1bHRpZXIuU2VjcmV0VHlwZUZpbGVWaWV3XCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG4gIGRhdGEuYnVmZmVyLnB1c2goXCI8ZGl2IGNsYXNzPVxcXCJjb250YWluZXJcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtcGFnZSB2bHQtcGFnZS1wbGFpblxcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtZGlhbG9nIGNvbC1tZC04IGNvbC1tZC1vZmZzZXQtMiB0b3AtNTBcXFwiPlxcbiAgICAgICAgICAgIDxmb3JtPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtZGlhbG9nLWNvbnRlbnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LWRpYWxvZy1oZWFkZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5FZGl0IHNlY3JldDwvaDI+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1kaWFsb2ctYm9keVxcXCI+XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzWydpZiddLmNhbGwoZGVwdGgwLCBcImlzTm90ZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgxLCBwcm9ncmFtMSwgZGF0YSksY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwiaXNQYXNzd29yZFwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgzLCBwcm9ncmFtMywgZGF0YSksY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwiaXNGaWxlXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDUsIHByb2dyYW01LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcblxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtZGlhbG9nLWZvb3RlclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiamF2YXNjcmlwdDp3aW5kb3cuaGlzdG9yeS5nbygtMSlcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1sZWZ0XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJhY2tcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzLmFjdGlvbi5jYWxsKGRlcHRoMCwgXCJzYXZlXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIiBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzWydiaW5kLWF0dHInXS5jYWxsKGRlcHRoMCwge2hhc2g6e1xuICAgICdkaXNhYmxlZCc6IChcInNhdmVEaXNhYmxlZFwiKVxuICB9LGhhc2hUeXBlczp7J2Rpc2FibGVkJzogXCJJRFwifSxoYXNoQ29udGV4dHM6eydkaXNhYmxlZCc6IGRlcHRoMH0sY29udGV4dHM6W10sdHlwZXM6W10sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tb2tcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2F2ZSBjaGFuZ2VzXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9mb3JtPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjbGVhcmZpeFxcXCI+PC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblxcblxcblwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgXG59KTsiLCJFbWJlci5URU1QTEFURVNbXCJTZWNyZXQvU2VjcmV0Q3JlYXRlXCJdID0gRW1iZXIuSGFuZGxlYmFycy50ZW1wbGF0ZShmdW5jdGlvbiBhbm9ueW1vdXMoSGFuZGxlYmFycyxkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG50aGlzLmNvbXBpbGVySW5mbyA9IFs0LCc+PSAxLjAuMCddO1xuaGVscGVycyA9IHRoaXMubWVyZ2UoaGVscGVycywgRW1iZXIuSGFuZGxlYmFycy5oZWxwZXJzKTsgZGF0YSA9IGRhdGEgfHwge307XG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxLCBoZWxwZXIsIG9wdGlvbnMsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBzZWxmPXRoaXMsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nO1xuXG5mdW5jdGlvbiBwcm9ncmFtMShkZXB0aDAsZGF0YSkge1xuICBcbiAgXG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENob29zZSBzZWNyZXQgeW91IHdhbnQgdG8gY3JlYXRlXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcXFwiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICB9XG5cbmZ1bmN0aW9uIHByb2dyYW0zKGRlcHRoMCxkYXRhKSB7XG4gIFxuICBcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGE+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsbG91dCBkYXRhXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcXFwiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICB9XG5cbmZ1bmN0aW9uIHByb2dyYW01KGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJyc7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVycy5hY3Rpb24uY2FsbChkZXB0aDAsIFwic3VibWl0XCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLW9rXFxcIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdWJtaXRcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG4gIGRhdGEuYnVmZmVyLnB1c2goXCI8ZGl2IGNsYXNzPVxcXCJjb250YWluZXJcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtcGFnZSB2bHQtcGFnZS1wbGFpblxcXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LWRpYWxvZyBjb2wtbWQtMTAgY29sLW1kLW9mZnNldC0xIHRvcC01MFxcXCI+XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1kaWFsb2ctY29udGVudFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtZGlhbG9nLWhlYWRlclxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyPkNyZWF0ZSBuZXcgc2VjcmV0IHdpemFyZDwvaDI+XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVxcXCJuYXYgbmF2LXBpbGxzIG5hdi1qdXN0aWZpZWQgdmx0LXdpemFyZC1zdGVwc1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVycy52aWV3LmNhbGwoZGVwdGgwLCBcInZpZXcuVGFiVmlld1wiLCB7aGFzaDp7XG4gICAgJ3RhYic6IChcImNyZWF0ZVNlbGVjdFwiKVxuICB9LGhhc2hUeXBlczp7J3RhYic6IFwiU1RSSU5HXCJ9LGhhc2hDb250ZXh0czp7J3RhYic6IGRlcHRoMH0saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDEsIHByb2dyYW0xLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnMudmlldy5jYWxsKGRlcHRoMCwgXCJ2aWV3LlRhYlZpZXdcIiwge2hhc2g6e1xuICAgICd0YWInOiAoXCJjcmVhdGVTdWJtaXRcIilcbiAgfSxoYXNoVHlwZXM6eyd0YWInOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eyd0YWInOiBkZXB0aDB9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgzLCBwcm9ncmFtMywgZGF0YSksY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtZGlhbG9nLWJvZHlcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKChoZWxwZXIgPSBoZWxwZXJzLm91dGxldCB8fCAoZGVwdGgwICYmIGRlcHRoMC5vdXRsZXQpLG9wdGlvbnM9e2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCJ0YWJcIiwgb3B0aW9ucykgOiBoZWxwZXJNaXNzaW5nLmNhbGwoZGVwdGgwLCBcIm91dGxldFwiLCBcInRhYlwiLCBvcHRpb25zKSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtZGlhbG9nLWZvb3RlclxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiamF2YXNjcmlwdDpoaXN0b3J5LmdvKC0xKVxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc21cXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnRcXFwiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQmFja1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwic3VibWl0QnV0dG9uU2hvd25cIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxpbnZlcnNlOnNlbGYubm9vcCxmbjpzZWxmLnByb2dyYW0oNSwgcHJvZ3JhbTUsIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2xlYXJmaXhcXFwiPjwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L2Rpdj5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cIik7XG4gIHJldHVybiBidWZmZXI7XG4gIFxufSk7IiwiRW1iZXIuVEVNUExBVEVTW1wiU2VjcmV0L1NlY3JldFR5cGVTZWxlY3RcIl0gPSBFbWJlci5IYW5kbGViYXJzLnRlbXBsYXRlKGZ1bmN0aW9uIGFub255bW91cyhIYW5kbGViYXJzLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbnRoaXMuY29tcGlsZXJJbmZvID0gWzQsJz49IDEuMC4wJ107XG5oZWxwZXJzID0gdGhpcy5tZXJnZShoZWxwZXJzLCBFbWJlci5IYW5kbGViYXJzLmhlbHBlcnMpOyBkYXRhID0gZGF0YSB8fCB7fTtcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazEsIGhlbHBlciwgb3B0aW9ucywgc2VsZj10aGlzLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZztcblxuZnVuY3Rpb24gcHJvZ3JhbTEoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIFxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJsaXN0LWl0ZW0gdmx0LXNlbGVjdC1zZWNyZXQtaXRlbVxcXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LXZpc3VhbFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1pY29uIHBhc3N3b3JkXFxcIj48L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtZGVzY1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxoND5TZWNyZXQgcGFzc3dvcmQ8L2g0PlxcclxcblxcclxcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFwiaGVscC1ibG9ja1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICBUaGlzIHR5cGUgb2Ygc2VjcmV0IGFsbG93cyB5b3V0IHRvIHNhdmUgb3JkaW5hcnkgcGFzc3dvcmRcXHJcXG4gICAgICAgICAgICAgICAgICAgIHRvZ2V0aGVyIHdpdGggdXNlcm5hbWUsIHVybCBhbmQgcmVsYXRlZCBub3RlXFxyXFxuICAgICAgICAgICAgICAgIDwvcD5cXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2xlYXJmaXhcXFwiPjwvZGl2PlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIFwiKTtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtMyhkZXB0aDAsZGF0YSkge1xuICBcbiAgXG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImxpc3QtaXRlbSB2bHQtc2VsZWN0LXNlY3JldC1pdGVtXFxcIj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtdmlzdWFsXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LWljb24gbm90ZVxcXCI+PC9kaXY+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LWRlc2NcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8aDQ+U2VjcmV0IG5vdGU8L2g0PlxcclxcblxcclxcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFwiaGVscC1ibG9ja1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICBTZWNyZXQgYXMgbm90ZSwgeW91IGNhbiBzYXZlIHdoYXRldmVyIHRleHQgeW91IHdhbnQuXFxyXFxuICAgICAgICAgICAgICAgICAgICBZb3UgY2FuIHVzZSBtYXJrZG93biB0byBmb3JtYXQgbm90ZVxcclxcbiAgICAgICAgICAgICAgICA8L3A+XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNsZWFyZml4XFxcIj48L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICBcIik7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTUoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIFxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJsaXN0LWl0ZW0gdmx0LXNlbGVjdC1zZWNyZXQtaXRlbVxcXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LXZpc3VhbFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1pY29uIGZpbGVcXFwiPjwvZGl2PlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1kZXNjXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGg0PlNlY3JldCBmaWxlPC9oND5cXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcImhlbHAtYmxvY2tcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgU3RvcmUgZmlsZSB1cCB0byAyNUtCIGZpbGVzaXplLCB5b3UgY2FuIGFsc28gYW5vdGF0ZSBmaWxlIHdpdGggdXNlcm5hbWUsXFxyXFxuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZCBhbmQgbm90ZVxcclxcbiAgICAgICAgICAgICAgICA8L3A+XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNsZWFyZml4XFxcIj48L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICBcIik7XG4gIH1cblxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPGRpdiBjbGFzcz1cXFwidmx0LWNyZWF0ZS1zZWNyZXQgY29sLW1kLTEwIGNvbC1tZC1vZmZzZXQtMVxcXCI+XFxyXFxuXFxyXFxuICAgIDxoND5QbGVhc2Ugc2VsZWN0IHR5cGUgb2Ygc2VjcmV0IHlvdSB3b3VsZCBsaWtlIHRvIGNyZWF0ZTwvaDQ+XFxyXFxuXFxyXFxuICAgIFwiKTtcbiAgc3RhY2sxID0gKGhlbHBlciA9IGhlbHBlcnNbJ2xpbmstdG8nXSB8fCAoZGVwdGgwICYmIGRlcHRoMFsnbGluay10byddKSxvcHRpb25zPXtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDEsIHByb2dyYW0xLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwLGRlcHRoMF0sdHlwZXM6W1wiU1RSSU5HXCIsXCJTVFJJTkdcIl0sZGF0YTpkYXRhfSxoZWxwZXIgPyBoZWxwZXIuY2FsbChkZXB0aDAsIFwiU2VjcmV0LmNyZWF0ZVN1Ym1pdFwiLCBcInBhc3N3b3JkXCIsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJsaW5rLXRvXCIsIFwiU2VjcmV0LmNyZWF0ZVN1Ym1pdFwiLCBcInBhc3N3b3JkXCIsIG9wdGlvbnMpKTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcbiAgICBcIik7XG4gIHN0YWNrMSA9IChoZWxwZXIgPSBoZWxwZXJzWydsaW5rLXRvJ10gfHwgKGRlcHRoMCAmJiBkZXB0aDBbJ2xpbmstdG8nXSksb3B0aW9ucz17aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgzLCBwcm9ncmFtMywgZGF0YSksY29udGV4dHM6W2RlcHRoMCxkZXB0aDBdLHR5cGVzOltcIlNUUklOR1wiLFwiU1RSSU5HXCJdLGRhdGE6ZGF0YX0saGVscGVyID8gaGVscGVyLmNhbGwoZGVwdGgwLCBcIlNlY3JldC5jcmVhdGVTdWJtaXRcIiwgXCJub3RlXCIsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJsaW5rLXRvXCIsIFwiU2VjcmV0LmNyZWF0ZVN1Ym1pdFwiLCBcIm5vdGVcIiwgb3B0aW9ucykpO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuXFxyXFxuICAgIFwiKTtcbiAgc3RhY2sxID0gKGhlbHBlciA9IGhlbHBlcnNbJ2xpbmstdG8nXSB8fCAoZGVwdGgwICYmIGRlcHRoMFsnbGluay10byddKSxvcHRpb25zPXtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDUsIHByb2dyYW01LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwLGRlcHRoMF0sdHlwZXM6W1wiU1RSSU5HXCIsXCJTVFJJTkdcIl0sZGF0YTpkYXRhfSxoZWxwZXIgPyBoZWxwZXIuY2FsbChkZXB0aDAsIFwiU2VjcmV0LmNyZWF0ZVN1Ym1pdFwiLCBcImZpbGVcIiwgb3B0aW9ucykgOiBoZWxwZXJNaXNzaW5nLmNhbGwoZGVwdGgwLCBcImxpbmstdG9cIiwgXCJTZWNyZXQuY3JlYXRlU3VibWl0XCIsIFwiZmlsZVwiLCBvcHRpb25zKSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG5cXHJcXG48L2Rpdj5cXHJcXG48ZGl2IGNsYXNzPVxcXCJjbGVhcmZpeFxcXCI+PC9kaXY+XFxyXFxuXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICBcbn0pOyIsIkVtYmVyLlRFTVBMQVRFU1tcIlNlY3JldC9TZWNyZXRUeXBlTm90ZVwiXSA9IEVtYmVyLkhhbmRsZWJhcnMudGVtcGxhdGUoZnVuY3Rpb24gYW5vbnltb3VzKEhhbmRsZWJhcnMsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xudGhpcy5jb21waWxlckluZm8gPSBbNCwnPj0gMS4wLjAnXTtcbmhlbHBlcnMgPSB0aGlzLm1lcmdlKGhlbHBlcnMsIEVtYmVyLkhhbmRsZWJhcnMuaGVscGVycyk7IGRhdGEgPSBkYXRhIHx8IHt9O1xuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMSwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBzZWxmPXRoaXM7XG5cbmZ1bmN0aW9uIHByb2dyYW0xKGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJycsIGhlbHBlciwgb3B0aW9ucztcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbjxkaXYgY2xhc3M9XFxcImNvbC1tZC01IGJvdHRvbS0xNVxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNhbGxvdXQgY2FsbG91dC1pbmZvXFxcIj5cXHJcXG4gICAgICAgIDxoND5TZWNyZXQgd2lsbCBiZSBzaGFyZWQgd2l0aDo8L2g0PlxcclxcbiAgICAgICAgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oKGhlbHBlciA9IGhlbHBlcnNbJ21lbWJlci1ib3gnXSB8fCAoZGVwdGgwICYmIGRlcHRoMFsnbWVtYmVyLWJveCddKSxvcHRpb25zPXtoYXNoOntcbiAgICAncm9sZXMnOiAoXCJtZW1iZXJzaGlwc1wiKSxcbiAgICAndXNlcic6IChcImF1dGgudXNlclwiKVxuICB9LGhhc2hUeXBlczp7J3JvbGVzJzogXCJJRFwiLCd1c2VyJzogXCJJRFwifSxoYXNoQ29udGV4dHM6eydyb2xlcyc6IGRlcHRoMCwndXNlcic6IGRlcHRoMH0sY29udGV4dHM6W10sdHlwZXM6W10sZGF0YTpkYXRhfSxoZWxwZXIgPyBoZWxwZXIuY2FsbChkZXB0aDAsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJtZW1iZXItYm94XCIsIG9wdGlvbnMpKSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlxcclxcblwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG4gIGRhdGEuYnVmZmVyLnB1c2goXCI8ZGl2IFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnNbJ2JpbmQtYXR0ciddLmNhbGwoZGVwdGgwLCB7aGFzaDp7XG4gICAgJ2NsYXNzJzogKFwidmlldy5pc0NyZWF0ZUFjdGlvbjpjb2wtbWQtNzpjb2wtbWQtMTAgdmlldy5pc0NyZWF0ZUFjdGlvbjo6Y29sLW1kLW9mZnNldC0xIFwiKVxuICB9LGhhc2hUeXBlczp7J2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnY2xhc3MnOiBkZXB0aDB9LGNvbnRleHRzOltdLHR5cGVzOltdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCI+XFxyXFxuXFxyXFxuXFxyXFxuICAgIDxoND5UaXRsZTwvaDQ+XFxyXFxuICAgIDxociBjbGFzcz1cXFwidG9wLTBcXFwiLz5cXHJcXG5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCIgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVyc1snYmluZC1hdHRyJ10uY2FsbChkZXB0aDAsIHtoYXNoOntcbiAgICAnY2xhc3MnOiAoXCJlcnJvcnMubmFtZTpoYXMtZXJyb3JcIilcbiAgfSxoYXNoVHlwZXM6eydjbGFzcyc6IFwiU1RSSU5HXCJ9LGhhc2hDb250ZXh0czp7J2NsYXNzJzogZGVwdGgwfSxjb250ZXh0czpbXSx0eXBlczpbXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPlxcclxcbiAgICAgICAgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVycy52aWV3LmNhbGwoZGVwdGgwLCBcIkVtLlRleHRGaWVsZFwiLCB7aGFzaDp7XG4gICAgJ2VsZW1lbnRJZCc6IChcInNlY3JldC1uYW1lXCIpLFxuICAgICd2YWx1ZUJpbmRpbmcnOiAoXCJjb250ZW50Lm5hbWVcIiksXG4gICAgJ2NsYXNzJzogKFwiZm9ybS1jb250cm9sXCIpXG4gIH0saGFzaFR5cGVzOnsnZWxlbWVudElkJzogXCJTVFJJTkdcIiwndmFsdWVCaW5kaW5nJzogXCJTVFJJTkdcIiwnY2xhc3MnOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eydlbGVtZW50SWQnOiBkZXB0aDAsJ3ZhbHVlQmluZGluZyc6IGRlcHRoMCwnY2xhc3MnOiBkZXB0aDB9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJlcnJvclxcXCI+XCIpO1xuICBzdGFjazEgPSBoZWxwZXJzLl90cmlhZ2VNdXN0YWNoZS5jYWxsKGRlcHRoMCwgXCJlcnJvcnMubmFtZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPC9zcGFuPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiaGVscC1ibG9ja1xcXCI+XFxyXFxuICAgICAgICBJbmZvcm1hdGlvbmFsIGZpZWxkLiBEbyBub3QgZW50ZXIgYW55IHNlbnNpdGl2ZSBpbmZvcm1hdGlvbi4gVGhpcyBmaWVsZCBpcyBub3QgZW5jcnlwdGVkXFxyXFxuICAgIDwvZGl2PlxcclxcblxcclxcblxcclxcbiAgICA8aDQgY2xhc3M9XFxcInRvcC0zMFxcXCI+UGxlYXNlIGZpbGxvdXQgeW91ciBub3RlPC9oND5cXHJcXG4gICAgPGhyIGNsYXNzPVxcXCJ0b3AtMFxcXCIvPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXHJcXG4gICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5fdHJpYWdlTXVzdGFjaGUuY2FsbChkZXB0aDAsIFwiZXJyb3JzLmRlc2NyaXB0aW9uXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnMudmlldy5jYWxsKGRlcHRoMCwgXCJWYXVsdGllci5FZGl0b3JJbnB1dFwiLCB7aGFzaDp7XG4gICAgJ2VsZW1lbnRJZCc6IChcInNlY3JldC1kZXNjcmlwdGlvblwiKSxcbiAgICAndmFsdWVCaW5kaW5nJzogKFwiY29udGVudC5ub3RlXCIpLFxuICAgICdjbGFzcyc6IChcImZvcm0tY29udHJvbFwiKSxcbiAgICAncm93cyc6ICg4KVxuICB9LGhhc2hUeXBlczp7J2VsZW1lbnRJZCc6IFwiU1RSSU5HXCIsJ3ZhbHVlQmluZGluZyc6IFwiU1RSSU5HXCIsJ2NsYXNzJzogXCJTVFJJTkdcIiwncm93cyc6IFwiSU5URUdFUlwifSxoYXNoQ29udGV4dHM6eydlbGVtZW50SWQnOiBkZXB0aDAsJ3ZhbHVlQmluZGluZyc6IGRlcHRoMCwnY2xhc3MnOiBkZXB0aDAsJ3Jvd3MnOiBkZXB0aDB9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImhlbHAtYmxvY2tcXFwiPlxcclxcbiAgICAgICAgICAgIE1hcmtkb3duIGlzIGF2YWlsYWJsZS4gTWFya2Rvd24gbWFudWFsIDxhXFxyXFxuICAgICAgICAgICAgICAgIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9hZGFtLXAvbWFya2Rvd24taGVyZS93aWtpL01hcmtkb3duLUNoZWF0c2hlZXRcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5oZXJlPC9hPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlxcclxcblxcclxcblwiKTtcbiAgc3RhY2sxID0gaGVscGVycy51bmxlc3MuY2FsbChkZXB0aDAsIFwiY29udGVudC5pZFwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgxLCBwcm9ncmFtMSwgZGF0YSksY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG5cXHJcXG48ZGl2IGNsYXNzPVxcXCJjbGVhcmZpeFxcXCI+PC9kaXY+XFxyXFxuXFxyXFxuXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICBcbn0pOyIsIkVtYmVyLlRFTVBMQVRFU1tcIlNlY3JldC9TZWNyZXRUeXBlUGFzc3dvcmRcIl0gPSBFbWJlci5IYW5kbGViYXJzLnRlbXBsYXRlKGZ1bmN0aW9uIGFub255bW91cyhIYW5kbGViYXJzLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbnRoaXMuY29tcGlsZXJJbmZvID0gWzQsJz49IDEuMC4wJ107XG5oZWxwZXJzID0gdGhpcy5tZXJnZShoZWxwZXJzLCBFbWJlci5IYW5kbGViYXJzLmhlbHBlcnMpOyBkYXRhID0gZGF0YSB8fCB7fTtcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazEsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgc2VsZj10aGlzO1xuXG5mdW5jdGlvbiBwcm9ncmFtMShkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBoZWxwZXIsIG9wdGlvbnM7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG48ZGl2IGNsYXNzPVxcXCJjb2wtbWQtNSBib3R0b20tMTVcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjYWxsb3V0IGNhbGxvdXQtaW5mb1xcXCI+XFxyXFxuICAgICAgICA8aDQ+U2VjcmV0IHdpbGwgYmUgc2hhcmVkIHdpdGg6PC9oND5cXHJcXG4gICAgICAgIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKChoZWxwZXIgPSBoZWxwZXJzWydtZW1iZXItYm94J10gfHwgKGRlcHRoMCAmJiBkZXB0aDBbJ21lbWJlci1ib3gnXSksb3B0aW9ucz17aGFzaDp7XG4gICAgJ3JvbGVzJzogKFwibWVtYmVyc2hpcHNcIiksXG4gICAgJ3VzZXInOiAoXCJhdXRoLnVzZXJcIilcbiAgfSxoYXNoVHlwZXM6eydyb2xlcyc6IFwiSURcIiwndXNlcic6IFwiSURcIn0saGFzaENvbnRleHRzOnsncm9sZXMnOiBkZXB0aDAsJ3VzZXInOiBkZXB0aDB9LGNvbnRleHRzOltdLHR5cGVzOltdLGRhdGE6ZGF0YX0saGVscGVyID8gaGVscGVyLmNhbGwoZGVwdGgwLCBvcHRpb25zKSA6IGhlbHBlck1pc3NpbmcuY2FsbChkZXB0aDAsIFwibWVtYmVyLWJveFwiLCBvcHRpb25zKSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L2Rpdj5cXHJcXG5cIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cblxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPGRpdiBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzWydiaW5kLWF0dHInXS5jYWxsKGRlcHRoMCwge2hhc2g6e1xuICAgICdjbGFzcyc6IChcInZpZXcuaXNDcmVhdGVBY3Rpb246Y29sLW1kLTc6Y29sLW1kLTEwIHZpZXcuaXNDcmVhdGVBY3Rpb246OmNvbC1tZC1vZmZzZXQtMSBcIilcbiAgfSxoYXNoVHlwZXM6eydjbGFzcyc6IFwiU1RSSU5HXCJ9LGhhc2hDb250ZXh0czp7J2NsYXNzJzogZGVwdGgwfSxjb250ZXh0czpbXSx0eXBlczpbXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPlxcclxcblxcclxcblxcclxcbiAgICA8aDQ+VGl0bGU8L2g0PlxcclxcbiAgICA8aHIgY2xhc3M9XFxcInRvcC0wXFxcIi8+XFxyXFxuXFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnNbJ2JpbmQtYXR0ciddLmNhbGwoZGVwdGgwLCB7aGFzaDp7XG4gICAgJ2NsYXNzJzogKFwiZXJyb3JzLm5hbWU6aGFzLWVycm9yXCIpXG4gIH0saGFzaFR5cGVzOnsnY2xhc3MnOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eydjbGFzcyc6IGRlcHRoMH0sY29udGV4dHM6W10sdHlwZXM6W10sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIj5cXHJcXG4gICAgICAgIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnMudmlldy5jYWxsKGRlcHRoMCwgXCJFbS5UZXh0RmllbGRcIiwge2hhc2g6e1xuICAgICdlbGVtZW50SWQnOiAoXCJzZWNyZXQtbmFtZVwiKSxcbiAgICAndmFsdWVCaW5kaW5nJzogKFwiY29udGVudC5uYW1lXCIpLFxuICAgICdjbGFzcyc6IChcImZvcm0tY29udHJvbFwiKVxuICB9LGhhc2hUeXBlczp7J2VsZW1lbnRJZCc6IFwiU1RSSU5HXCIsJ3ZhbHVlQmluZGluZyc6IFwiU1RSSU5HXCIsJ2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnZWxlbWVudElkJzogZGVwdGgwLCd2YWx1ZUJpbmRpbmcnOiBkZXB0aDAsJ2NsYXNzJzogZGVwdGgwfSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZXJyb3JcXFwiPlwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5fdHJpYWdlTXVzdGFjaGUuY2FsbChkZXB0aDAsIFwiZXJyb3JzLm5hbWVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIjwvc3Bhbj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImhlbHAtYmxvY2tcXFwiPlxcclxcbiAgICAgICAgSW5mb3JtYXRpb25hbCBmaWVsZC4gRG8gbm90IGVudGVyIGFueSBzZW5zaXRpdmUgaW5mb3JtYXRpb24uIFRoaXMgZmllbGQgaXMgbm90IGN5cGhlcmVkXFxyXFxuICAgIDwvZGl2PlxcclxcblxcclxcbiAgICA8aDQgY2xhc3M9XFxcInRvcC0zMFxcXCI+UGxlYXNlIGZpbGxvdXQgZGF0YSBmb3IgeW91ciBwYXNzd29yZCBzZWNyZXQ8L2g0PlxcclxcbiAgICA8aHIgY2xhc3M9XFxcInRvcC0wXFxcIi8+XFxyXFxuXFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnNbJ2JpbmQtYXR0ciddLmNhbGwoZGVwdGgwLCB7aGFzaDp7XG4gICAgJ2NsYXNzJzogKFwiZXJyb3JzLnVybDpoYXMtZXJyb3JcIilcbiAgfSxoYXNoVHlwZXM6eydjbGFzcyc6IFwiU1RSSU5HXCJ9LGhhc2hDb250ZXh0czp7J2NsYXNzJzogZGVwdGgwfSxjb250ZXh0czpbXSx0eXBlczpbXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPlxcclxcbiAgICAgICAgPGxhYmVsIGZvcj1cXFwic2VjcmV0LXVybFxcXCI+VVJMPC9sYWJlbD5cXHJcXG4gICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5fdHJpYWdlTXVzdGFjaGUuY2FsbChkZXB0aDAsIFwiZXJyb3JzLnVybFwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzLnZpZXcuY2FsbChkZXB0aDAsIFwiRW0uVGV4dEZpZWxkXCIsIHtoYXNoOntcbiAgICAnZWxlbWVudElkJzogKFwic2VjcmV0LXVybFwiKSxcbiAgICAndmFsdWVCaW5kaW5nJzogKFwiY29udGVudC51cmxcIiksXG4gICAgJ2NsYXNzJzogKFwiZm9ybS1jb250cm9sXCIpXG4gIH0saGFzaFR5cGVzOnsnZWxlbWVudElkJzogXCJTVFJJTkdcIiwndmFsdWVCaW5kaW5nJzogXCJTVFJJTkdcIiwnY2xhc3MnOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eydlbGVtZW50SWQnOiBkZXB0aDAsJ3ZhbHVlQmluZGluZyc6IGRlcHRoMCwnY2xhc3MnOiBkZXB0aDB9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnNbJ2JpbmQtYXR0ciddLmNhbGwoZGVwdGgwLCB7aGFzaDp7XG4gICAgJ2NsYXNzJzogKFwiZXJyb3JzLnVzZXJuYW1lOmhhcy1lcnJvclwiKVxuICB9LGhhc2hUeXBlczp7J2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnY2xhc3MnOiBkZXB0aDB9LGNvbnRleHRzOltdLHR5cGVzOltdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCI+XFxyXFxuICAgICAgICA8bGFiZWwgZm9yPVxcXCJzZWNyZXQtdXNlcm5hbWVcXFwiPlVzZXJuYW1lPC9sYWJlbD5cXHJcXG4gICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5fdHJpYWdlTXVzdGFjaGUuY2FsbChkZXB0aDAsIFwiZXJyb3JzLnVzZXJuYW1lXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnMudmlldy5jYWxsKGRlcHRoMCwgXCJFbS5UZXh0RmllbGRcIiwge2hhc2g6e1xuICAgICdlbGVtZW50SWQnOiAoXCJzZWNyZXQtdXNlcm5hbWVcIiksXG4gICAgJ3ZhbHVlQmluZGluZyc6IChcImNvbnRlbnQudXNlcm5hbWVcIiksXG4gICAgJ2NsYXNzJzogKFwiZm9ybS1jb250cm9sXCIpXG4gIH0saGFzaFR5cGVzOnsnZWxlbWVudElkJzogXCJTVFJJTkdcIiwndmFsdWVCaW5kaW5nJzogXCJTVFJJTkdcIiwnY2xhc3MnOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eydlbGVtZW50SWQnOiBkZXB0aDAsJ3ZhbHVlQmluZGluZyc6IGRlcHRoMCwnY2xhc3MnOiBkZXB0aDB9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnNbJ2JpbmQtYXR0ciddLmNhbGwoZGVwdGgwLCB7aGFzaDp7XG4gICAgJ2NsYXNzJzogKFwiZXJyb3JzLnBhc3N3b3JkOmhhcy1lcnJvclwiKVxuICB9LGhhc2hUeXBlczp7J2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnY2xhc3MnOiBkZXB0aDB9LGNvbnRleHRzOltdLHR5cGVzOltdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCI+XFxyXFxuICAgICAgICA8bGFiZWwgZm9yPVxcXCJzZWNyZXQtcGFzc3dvcmRcXFwiPlBhc3N3b3JkPC9sYWJlbD5cXHJcXG4gICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5fdHJpYWdlTXVzdGFjaGUuY2FsbChkZXB0aDAsIFwiZXJyb3JzLnBhc3N3b3JkXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnMudmlldy5jYWxsKGRlcHRoMCwgXCJFbS5UZXh0RmllbGRcIiwge2hhc2g6e1xuICAgICdlbGVtZW50SWQnOiAoXCJzZWNyZXQtcGFzc3dvcmRcIiksXG4gICAgJ3ZhbHVlQmluZGluZyc6IChcImNvbnRlbnQucGFzc3dvcmRcIiksXG4gICAgJ2NsYXNzJzogKFwiZm9ybS1jb250cm9sXCIpXG4gIH0saGFzaFR5cGVzOnsnZWxlbWVudElkJzogXCJTVFJJTkdcIiwndmFsdWVCaW5kaW5nJzogXCJTVFJJTkdcIiwnY2xhc3MnOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eydlbGVtZW50SWQnOiBkZXB0aDAsJ3ZhbHVlQmluZGluZyc6IGRlcHRoMCwnY2xhc3MnOiBkZXB0aDB9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnNbJ2JpbmQtYXR0ciddLmNhbGwoZGVwdGgwLCB7aGFzaDp7XG4gICAgJ2NsYXNzJzogKFwiZXJyb3JzLm5vdGU6aGFzLWVycm9yXCIpXG4gIH0saGFzaFR5cGVzOnsnY2xhc3MnOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eydjbGFzcyc6IGRlcHRoMH0sY29udGV4dHM6W10sdHlwZXM6W10sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIj5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9XFxcInNlY3JldC1ub3RlXFxcIj5Ob3RlPC9sYWJlbD5cXHJcXG4gICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5fdHJpYWdlTXVzdGFjaGUuY2FsbChkZXB0aDAsIFwiZXJyb3JzLm5vdGVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVycy52aWV3LmNhbGwoZGVwdGgwLCBcIkVtLlRleHRBcmVhXCIsIHtoYXNoOntcbiAgICAnZWxlbWVudElkJzogKFwic2VjcmV0LW5vdGVcIiksXG4gICAgJ3ZhbHVlQmluZGluZyc6IChcImNvbnRlbnQubm90ZVwiKSxcbiAgICAnY2xhc3MnOiAoXCJmb3JtLWNvbnRyb2xcIiksXG4gICAgJ3Jvd3MnOiAoNSlcbiAgfSxoYXNoVHlwZXM6eydlbGVtZW50SWQnOiBcIlNUUklOR1wiLCd2YWx1ZUJpbmRpbmcnOiBcIlNUUklOR1wiLCdjbGFzcyc6IFwiU1RSSU5HXCIsJ3Jvd3MnOiBcIklOVEVHRVJcIn0saGFzaENvbnRleHRzOnsnZWxlbWVudElkJzogZGVwdGgwLCd2YWx1ZUJpbmRpbmcnOiBkZXB0aDAsJ2NsYXNzJzogZGVwdGgwLCdyb3dzJzogZGVwdGgwfSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJoZWxwLWJsb2NrXFxcIj5cXHJcXG4gICAgICAgIE1hcmtkb3duIGlzIGF2YWlsYWJsZS4gTWFya2Rvd24gbWFudWFsIDxhXFxyXFxuICAgICAgICAgICAgaHJlZj1cXFwiaHR0cHM6Ly9naXRodWIuY29tL2FkYW0tcC9tYXJrZG93bi1oZXJlL3dpa2kvTWFya2Rvd24tQ2hlYXRzaGVldFxcXCJcXHJcXG4gICAgICAgICAgICB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+XFxyXFxuICAgICAgICBoZXJlXFxyXFxuICAgIDwvYT5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XFxyXFxuXFxyXFxuXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzLnVubGVzcy5jYWxsKGRlcHRoMCwgXCJjb250ZW50LmlkXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDEsIHByb2dyYW0xLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcbjxkaXYgY2xhc3M9XFxcImNsZWFyZml4XFxcIj48L2Rpdj5cIik7XG4gIHJldHVybiBidWZmZXI7XG4gIFxufSk7IiwiRW1iZXIuVEVNUExBVEVTW1wiU2VjcmV0L1NlY3JldFR5cGVGaWxlXCJdID0gRW1iZXIuSGFuZGxlYmFycy50ZW1wbGF0ZShmdW5jdGlvbiBhbm9ueW1vdXMoSGFuZGxlYmFycyxkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG50aGlzLmNvbXBpbGVySW5mbyA9IFs0LCc+PSAxLjAuMCddO1xuaGVscGVycyA9IHRoaXMubWVyZ2UoaGVscGVycywgRW1iZXIuSGFuZGxlYmFycy5oZWxwZXJzKTsgZGF0YSA9IGRhdGEgfHwge307XG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIHNlbGY9dGhpcztcblxuZnVuY3Rpb24gcHJvZ3JhbTEoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJywgaGVscGVyLCBvcHRpb25zO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuPGRpdiBjbGFzcz1cXFwiY29sLW1kLTUgYm90dG9tLTE1XFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY2FsbG91dCBjYWxsb3V0LWluZm9cXFwiPlxcclxcbiAgICAgICAgPGg0PlNlY3JldCB3aWxsIGJlIHNoYXJlZCB3aXRoOjwvaDQ+XFxyXFxuICAgICAgICBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbigoaGVscGVyID0gaGVscGVyc1snbWVtYmVyLWJveCddIHx8IChkZXB0aDAgJiYgZGVwdGgwWydtZW1iZXItYm94J10pLG9wdGlvbnM9e2hhc2g6e1xuICAgICdyb2xlcyc6IChcIm1lbWJlcnNoaXBzXCIpLFxuICAgICd1c2VyJzogKFwiYXV0aC51c2VyXCIpXG4gIH0saGFzaFR5cGVzOnsncm9sZXMnOiBcIklEXCIsJ3VzZXInOiBcIklEXCJ9LGhhc2hDb250ZXh0czp7J3JvbGVzJzogZGVwdGgwLCd1c2VyJzogZGVwdGgwfSxjb250ZXh0czpbXSx0eXBlczpbXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgb3B0aW9ucykgOiBoZWxwZXJNaXNzaW5nLmNhbGwoZGVwdGgwLCBcIm1lbWJlci1ib3hcIiwgb3B0aW9ucykpKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XFxyXFxuXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbiAgZGF0YS5idWZmZXIucHVzaChcIjxkaXYgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVyc1snYmluZC1hdHRyJ10uY2FsbChkZXB0aDAsIHtoYXNoOntcbiAgICAnY2xhc3MnOiAoXCJ2aWV3LmlzQ3JlYXRlQWN0aW9uOmNvbC1tZC03OmNvbC1tZC0xMCB2aWV3LmlzQ3JlYXRlQWN0aW9uOjpjb2wtbWQtb2Zmc2V0LTEgXCIpXG4gIH0saGFzaFR5cGVzOnsnY2xhc3MnOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eydjbGFzcyc6IGRlcHRoMH0sY29udGV4dHM6W10sdHlwZXM6W10sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIj5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCIgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVyc1snYmluZC1hdHRyJ10uY2FsbChkZXB0aDAsIHtoYXNoOntcbiAgICAnY2xhc3MnOiAoXCJlcnJvcnMubmFtZTpoYXMtZXJyb3JcIilcbiAgfSxoYXNoVHlwZXM6eydjbGFzcyc6IFwiU1RSSU5HXCJ9LGhhc2hDb250ZXh0czp7J2NsYXNzJzogZGVwdGgwfSxjb250ZXh0czpbXSx0eXBlczpbXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPlxcclxcbiAgICAgICAgPGxhYmVsIGZvcj1cXFwic2VjcmV0LW5hbWVcXFwiPk5hbWU8L2xhYmVsPlxcclxcbiAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzLl90cmlhZ2VNdXN0YWNoZS5jYWxsKGRlcHRoMCwgXCJlcnJvcnMudXJsXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnMudmlldy5jYWxsKGRlcHRoMCwgXCJFbS5UZXh0RmllbGRcIiwge2hhc2g6e1xuICAgICdlbGVtZW50SWQnOiAoXCJzZWNyZXQtbmFtZVwiKSxcbiAgICAndmFsdWVCaW5kaW5nJzogKFwiY29udGVudC5uYW1lXCIpLFxuICAgICdjbGFzcyc6IChcImZvcm0tY29udHJvbFwiKVxuICB9LGhhc2hUeXBlczp7J2VsZW1lbnRJZCc6IFwiU1RSSU5HXCIsJ3ZhbHVlQmluZGluZyc6IFwiU1RSSU5HXCIsJ2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnZWxlbWVudElkJzogZGVwdGgwLCd2YWx1ZUJpbmRpbmcnOiBkZXB0aDAsJ2NsYXNzJzogZGVwdGgwfSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJoZWxwLWJsb2NrXFxcIj5cXHJcXG4gICAgICAgICAgICBJbmZvcm1hdGlvbmFsIGZpZWxkLiBEbyBub3QgZW50ZXIgYW55IHNlbnNpdGl2ZSBpbmZvcm1hdGlvbi4gVGhpcyBmaWVsZCBpcyBub3QgY3lwaGVyZWRcXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgPGg0PlBsZWFzZSBmaWxsb3V0IGRhdGEgZm9yIHlvdXIgZmlsZSBzZWNyZXQ8L2g0PlxcclxcblxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIiBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzWydiaW5kLWF0dHInXS5jYWxsKGRlcHRoMCwge2hhc2g6e1xuICAgICdjbGFzcyc6IChcImVycm9ycy51cmw6aGFzLWVycm9yXCIpXG4gIH0saGFzaFR5cGVzOnsnY2xhc3MnOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eydjbGFzcyc6IGRlcHRoMH0sY29udGV4dHM6W10sdHlwZXM6W10sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIj5cXHJcXG4gICAgICAgIDxsYWJlbCBmb3I9XFxcInNlY3JldC11cmxcXFwiPlVSTDwvbGFiZWw+XFxyXFxuICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnMuX3RyaWFnZU11c3RhY2hlLmNhbGwoZGVwdGgwLCBcImVycm9ycy51cmxcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVycy52aWV3LmNhbGwoZGVwdGgwLCBcIkVtLlRleHRGaWVsZFwiLCB7aGFzaDp7XG4gICAgJ2VsZW1lbnRJZCc6IChcInNlY3JldC11cmxcIiksXG4gICAgJ3ZhbHVlQmluZGluZyc6IChcImNvbnRlbnQudXJsXCIpLFxuICAgICdjbGFzcyc6IChcImZvcm0tY29udHJvbFwiKVxuICB9LGhhc2hUeXBlczp7J2VsZW1lbnRJZCc6IFwiU1RSSU5HXCIsJ3ZhbHVlQmluZGluZyc6IFwiU1RSSU5HXCIsJ2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnZWxlbWVudElkJzogZGVwdGgwLCd2YWx1ZUJpbmRpbmcnOiBkZXB0aDAsJ2NsYXNzJzogZGVwdGgwfSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgIDwvZGl2PlxcclxcblxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIiBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzWydiaW5kLWF0dHInXS5jYWxsKGRlcHRoMCwge2hhc2g6e1xuICAgICdjbGFzcyc6IChcImVycm9ycy51c2VybmFtZTpoYXMtZXJyb3JcIilcbiAgfSxoYXNoVHlwZXM6eydjbGFzcyc6IFwiU1RSSU5HXCJ9LGhhc2hDb250ZXh0czp7J2NsYXNzJzogZGVwdGgwfSxjb250ZXh0czpbXSx0eXBlczpbXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPlxcclxcbiAgICAgICAgPGxhYmVsIGZvcj1cXFwic2VjcmV0LXVzZXJuYW1lXFxcIj5Vc2VybmFtZTwvbGFiZWw+XFxyXFxuICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnMuX3RyaWFnZU11c3RhY2hlLmNhbGwoZGVwdGgwLCBcImVycm9ycy51c2VybmFtZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzLnZpZXcuY2FsbChkZXB0aDAsIFwiRW0uVGV4dEZpZWxkXCIsIHtoYXNoOntcbiAgICAnZWxlbWVudElkJzogKFwic2VjcmV0LXVzZXJuYW1lXCIpLFxuICAgICd2YWx1ZUJpbmRpbmcnOiAoXCJjb250ZW50LnVzZXJuYW1lXCIpLFxuICAgICdjbGFzcyc6IChcImZvcm0tY29udHJvbFwiKVxuICB9LGhhc2hUeXBlczp7J2VsZW1lbnRJZCc6IFwiU1RSSU5HXCIsJ3ZhbHVlQmluZGluZyc6IFwiU1RSSU5HXCIsJ2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnZWxlbWVudElkJzogZGVwdGgwLCd2YWx1ZUJpbmRpbmcnOiBkZXB0aDAsJ2NsYXNzJzogZGVwdGgwfSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgIDwvZGl2PlxcclxcblxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIiBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzWydiaW5kLWF0dHInXS5jYWxsKGRlcHRoMCwge2hhc2g6e1xuICAgICdjbGFzcyc6IChcImVycm9ycy5wYXNzd29yZDpoYXMtZXJyb3JcIilcbiAgfSxoYXNoVHlwZXM6eydjbGFzcyc6IFwiU1RSSU5HXCJ9LGhhc2hDb250ZXh0czp7J2NsYXNzJzogZGVwdGgwfSxjb250ZXh0czpbXSx0eXBlczpbXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPlxcclxcbiAgICAgICAgPGxhYmVsIGZvcj1cXFwic2VjcmV0LXBhc3N3b3JkXFxcIj5QYXNzd29yZDwvbGFiZWw+XFxyXFxuICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnMuX3RyaWFnZU11c3RhY2hlLmNhbGwoZGVwdGgwLCBcImVycm9ycy5wYXNzd29yZFwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzLnZpZXcuY2FsbChkZXB0aDAsIFwiRW0uVGV4dEZpZWxkXCIsIHtoYXNoOntcbiAgICAnZWxlbWVudElkJzogKFwic2VjcmV0LXBhc3N3b3JkXCIpLFxuICAgICd2YWx1ZUJpbmRpbmcnOiAoXCJjb250ZW50LnBhc3N3b3JkXCIpLFxuICAgICdjbGFzcyc6IChcImZvcm0tY29udHJvbFwiKVxuICB9LGhhc2hUeXBlczp7J2VsZW1lbnRJZCc6IFwiU1RSSU5HXCIsJ3ZhbHVlQmluZGluZyc6IFwiU1RSSU5HXCIsJ2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnZWxlbWVudElkJzogZGVwdGgwLCd2YWx1ZUJpbmRpbmcnOiBkZXB0aDAsJ2NsYXNzJzogZGVwdGgwfSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgIDwvZGl2PlxcclxcblxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIiBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzWydiaW5kLWF0dHInXS5jYWxsKGRlcHRoMCwge2hhc2g6e1xuICAgICdjbGFzcyc6IChcImVycm9yOmhhcy1lcnJvclwiKVxuICB9LGhhc2hUeXBlczp7J2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnY2xhc3MnOiBkZXB0aDB9LGNvbnRleHRzOltdLHR5cGVzOltdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCI+XFxyXFxuICAgICAgICA8bGFiZWwgZm9yPVxcXCJzZWNyZXQtZmlsZVxcXCIgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPlNlY3JldCBmaWxlPC9sYWJlbD5cXHJcXG5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwXFxcIj5cXHJcXG4gICAgICAgICAgICA8aW5wdXQgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVyc1snYmluZC1hdHRyJ10uY2FsbChkZXB0aDAsIHtoYXNoOntcbiAgICAndmFsdWUnOiAoXCJjb250ZW50LmZpbGVuYW1lXCIpXG4gIH0saGFzaFR5cGVzOnsndmFsdWUnOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eyd2YWx1ZSc6IGRlcHRoMH0sY29udGV4dHM6W10sdHlwZXM6W10sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cXFwidGV4dFxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgdmx0LWZpbGVuYW1lXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHk9XFxcIlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVxcXCJTZWxlY3QgeW91ciBrZXlcXFwiPlxcclxcblxcclxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ2bHQtc2VjcmV0LXR5cGUtZmlsZSBpbnB1dC1ncm91cC1idG4gYnRuIGJ0bi1kZWZhdWx0IGJ0bi1maWxlXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgQnJvd3NlIDxpbnB1dCB0eXBlPVxcXCJmaWxlXFxcIj5cXHJcXG4gICAgICAgICAgICA8L3NwYW4+XFxyXFxuXFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImhlbHAtYmxvY2tcXFwiPlxcclxcbiAgICAgICAgICAgIFN0b3JlIGZpbGUgdXAgdG8gMjVLQiBmaWxlc2l6ZVxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcblxcclxcblxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIiBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzWydiaW5kLWF0dHInXS5jYWxsKGRlcHRoMCwge2hhc2g6e1xuICAgICdjbGFzcyc6IChcImVycm9ycy5uYW1lOmhhcy1lcnJvclwiKVxuICB9LGhhc2hUeXBlczp7J2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnY2xhc3MnOiBkZXB0aDB9LGNvbnRleHRzOltdLHR5cGVzOltdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCI+XFxyXFxuICAgICAgICA8bGFiZWwgZm9yPVxcXCJzZWNyZXQtbm90ZVxcXCI+Tm90ZTwvbGFiZWw+XFxyXFxuICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnMuX3RyaWFnZU11c3RhY2hlLmNhbGwoZGVwdGgwLCBcImVycm9ycy5uYW1lXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnMudmlldy5jYWxsKGRlcHRoMCwgXCJFbS5UZXh0QXJlYVwiLCB7aGFzaDp7XG4gICAgJ2VsZW1lbnRJZCc6IChcInNlY3JldC1ub3RlXCIpLFxuICAgICd2YWx1ZUJpbmRpbmcnOiAoXCJjb250ZW50Lm5vdGVcIiksXG4gICAgJ2NsYXNzJzogKFwiZm9ybS1jb250cm9sXCIpLFxuICAgICdyb3dzJzogKDUpXG4gIH0saGFzaFR5cGVzOnsnZWxlbWVudElkJzogXCJTVFJJTkdcIiwndmFsdWVCaW5kaW5nJzogXCJTVFJJTkdcIiwnY2xhc3MnOiBcIlNUUklOR1wiLCdyb3dzJzogXCJJTlRFR0VSXCJ9LGhhc2hDb250ZXh0czp7J2VsZW1lbnRJZCc6IGRlcHRoMCwndmFsdWVCaW5kaW5nJzogZGVwdGgwLCdjbGFzcyc6IGRlcHRoMCwncm93cyc6IGRlcHRoMH0sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L2Rpdj5cXHJcXG5cXHJcXG5cIik7XG4gIHN0YWNrMSA9IGhlbHBlcnMudW5sZXNzLmNhbGwoZGVwdGgwLCBcImNvbnRlbnQuaWRcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxpbnZlcnNlOnNlbGYubm9vcCxmbjpzZWxmLnByb2dyYW0oMSwgcHJvZ3JhbTEsIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuXFxyXFxuPGRpdiBjbGFzcz1cXFwiY2xlYXJmaXhcXFwiPjwvZGl2PlwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgXG59KTsiLCJFbWJlci5URU1QTEFURVNbXCJTZWNyZXQvU2VjcmV0SW5kZXhJdGVtTm90ZVwiXSA9IEVtYmVyLkhhbmRsZWJhcnMudGVtcGxhdGUoZnVuY3Rpb24gYW5vbnltb3VzKEhhbmRsZWJhcnMsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xudGhpcy5jb21waWxlckluZm8gPSBbNCwnPj0gMS4wLjAnXTtcbmhlbHBlcnMgPSB0aGlzLm1lcmdlKGhlbHBlcnMsIEVtYmVyLkhhbmRsZWJhcnMuaGVscGVycyk7IGRhdGEgPSBkYXRhIHx8IHt9O1xuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMSwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBzZWxmPXRoaXM7XG5cbmZ1bmN0aW9uIHByb2dyYW0xKGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgIDxoMyBjbGFzcz1cXFwidG9wLTBcXFwiPlwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5fdHJpYWdlTXVzdGFjaGUuY2FsbChkZXB0aDAsIFwibmFtZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPC9oMz5cXHJcXG4gICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtMyhkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBoZWxwZXIsIG9wdGlvbnM7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtYXR0cnNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtbWFya2Rvd25cXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oKGhlbHBlciA9IGhlbHBlcnMucmVuZGVyTWFya2Rvd24gfHwgKGRlcHRoMCAmJiBkZXB0aDAucmVuZGVyTWFya2Rvd24pLG9wdGlvbnM9e2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCJub3RlXCIsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJyZW5kZXJNYXJrZG93blwiLCBcIm5vdGVcIiwgb3B0aW9ucykpKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgICAgICAgICAgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVycy52aWV3LmNhbGwoZGVwdGgwLCBcIlZhdWx0aWVyLlNlY3JldEluZGV4SXRlbUNvbnRyb2xzVmlld1wiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtNShkZXB0aDAsZGF0YSkge1xuICBcbiAgXG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJhbGVydCBhbGVydC13YXJuaW5nIHRvcC0xNVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIEVuY3J5cHRlZCBkYXRhIGNhbm5vdCBiZSBkZWNyeXB0ZWRcXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIFwiKTtcbiAgfVxuXG4gIGRhdGEuYnVmZmVyLnB1c2goXCI8ZGl2IGNsYXNzPVxcXCJ2bHQtd3JhcHBlclxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcInZsdC12aXN1YWxcXFwiPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LWljb25cXFwiPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtdHlwZVxcXCI+XFxyXFxuICAgICAgICAgICAgTm90ZVxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtaW5uZXJcXFwiPlxcclxcbiAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzWydpZiddLmNhbGwoZGVwdGgwLCBcIm5hbWVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxpbnZlcnNlOnNlbGYubm9vcCxmbjpzZWxmLnByb2dyYW0oMSwgcHJvZ3JhbTEsIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuXFxyXFxuICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwiZGVjcnlwdGVkXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLnByb2dyYW0oNSwgcHJvZ3JhbTUsIGRhdGEpLGZuOnNlbGYucHJvZ3JhbSgzLCBwcm9ncmFtMywgZGF0YSksY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICBcbn0pOyIsIkVtYmVyLlRFTVBMQVRFU1tcIlNlY3JldC9TZWNyZXRJbmRleEl0ZW1QYXNzd29yZFwiXSA9IEVtYmVyLkhhbmRsZWJhcnMudGVtcGxhdGUoZnVuY3Rpb24gYW5vbnltb3VzKEhhbmRsZWJhcnMsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xudGhpcy5jb21waWxlckluZm8gPSBbNCwnPj0gMS4wLjAnXTtcbmhlbHBlcnMgPSB0aGlzLm1lcmdlKGhlbHBlcnMsIEVtYmVyLkhhbmRsZWJhcnMuaGVscGVycyk7IGRhdGEgPSBkYXRhIHx8IHt9O1xuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMSwgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBzZWxmPXRoaXM7XG5cbmZ1bmN0aW9uIHByb2dyYW0xKGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgIDxoMyBjbGFzcz1cXFwidG9wLTBcXFwiPlwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5fdHJpYWdlTXVzdGFjaGUuY2FsbChkZXB0aDAsIFwibmFtZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPC9oMz5cXHJcXG4gICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtMyhkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazE7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtYXR0cnNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9XFxcInRhYmxlIHRhYmxlLWJvcmRlcmVkXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxjb2xncm91cD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8Y29sIGNsYXNzPVxcXCJjb2wtbGctMVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGNvbCBjbGFzcz1cXFwiY29sLWxnLTdcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9jb2xncm91cD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDx0Ym9keT5cXHJcXG4gICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVyc1snaWYnXS5jYWxsKGRlcHRoMCwgXCJ1cmxcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxpbnZlcnNlOnNlbGYubm9vcCxmbjpzZWxmLnByb2dyYW0oNCwgcHJvZ3JhbTQsIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwidXNlcm5hbWVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxpbnZlcnNlOnNlbGYubm9vcCxmbjpzZWxmLnByb2dyYW0oNiwgcHJvZ3JhbTYsIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwicGFzc3dvcmRcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxpbnZlcnNlOnNlbGYubm9vcCxmbjpzZWxmLnByb2dyYW0oOCwgcHJvZ3JhbTgsIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwibm90ZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgxMCwgcHJvZ3JhbTEwLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cXHJcXG4gICAgICAgICAgICAgICAgPC90YWJsZT5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuZnVuY3Rpb24gcHJvZ3JhbTQoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInZsdC1hdHRyLW5hbWVcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVVJMXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48YSBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzWydiaW5kLWF0dHInXS5jYWxsKGRlcHRoMCwge2hhc2g6e1xuICAgICdocmVmJzogKFwidXJsXCIpXG4gIH0saGFzaFR5cGVzOnsnaHJlZic6IFwiSURcIn0saGFzaENvbnRleHRzOnsnaHJlZic6IGRlcHRoMH0sY29udGV4dHM6W10sdHlwZXM6W10sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+XCIpO1xuICBzdGFjazEgPSBoZWxwZXJzLl90cmlhZ2VNdXN0YWNoZS5jYWxsKGRlcHRoMCwgXCJ1cmxcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIjwvYT48L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTYoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInZsdC1hdHRyLW5hbWVcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXNlcm5hbWVcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5fdHJpYWdlTXVzdGFjaGUuY2FsbChkZXB0aDAsIFwidXNlcm5hbWVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIjwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtOChkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazE7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidmx0LWF0dHItbmFtZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXNzd29yZFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XCIpO1xuICBzdGFjazEgPSBoZWxwZXJzLl90cmlhZ2VNdXN0YWNoZS5jYWxsKGRlcHRoMCwgXCJwYXNzd29yZFwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbmZ1bmN0aW9uIHByb2dyYW0xMChkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBoZWxwZXIsIG9wdGlvbnM7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidmx0LWF0dHItbmFtZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3RlXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1tYXJrZG93blxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oKGhlbHBlciA9IGhlbHBlcnMucmVuZGVyTWFya2Rvd24gfHwgKGRlcHRoMCAmJiBkZXB0aDAucmVuZGVyTWFya2Rvd24pLG9wdGlvbnM9e2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCJub3RlXCIsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJyZW5kZXJNYXJrZG93blwiLCBcIm5vdGVcIiwgb3B0aW9ucykpKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTEyKGRlcHRoMCxkYXRhKSB7XG4gIFxuICBcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImFsZXJ0IGFsZXJ0LXdhcm5pbmcgdG9wLTE1XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgRW5jcnlwdGVkIGRhdGEgY2Fubm90IGJlIGRlY3J5cHRlZFxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgXCIpO1xuICB9XG5cbiAgZGF0YS5idWZmZXIucHVzaChcIjxkaXYgY2xhc3M9XFxcInZsdC13cmFwcGVyXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwidmx0LXZpc3VhbFxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtaWNvblxcXCI+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC10eXBlXFxcIj5cXHJcXG4gICAgICAgICAgICBQYXNzd29yZFxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtaW5uZXJcXFwiPlxcclxcbiAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzWydpZiddLmNhbGwoZGVwdGgwLCBcIm5hbWVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxpbnZlcnNlOnNlbGYubm9vcCxmbjpzZWxmLnByb2dyYW0oMSwgcHJvZ3JhbTEsIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuXFxyXFxuICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwiZGVjcnlwdGVkXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLnByb2dyYW0oMTIsIHByb2dyYW0xMiwgZGF0YSksZm46c2VsZi5wcm9ncmFtKDMsIHByb2dyYW0zLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcblxcclxcbiAgICAgICAgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVycy52aWV3LmNhbGwoZGVwdGgwLCBcIlZhdWx0aWVyLlNlY3JldEluZGV4SXRlbUNvbnRyb2xzVmlld1wiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICBcbn0pOyIsIkVtYmVyLlRFTVBMQVRFU1tcIlNlY3JldC9TZWNyZXRJbmRleEl0ZW1GaWxlXCJdID0gRW1iZXIuSGFuZGxlYmFycy50ZW1wbGF0ZShmdW5jdGlvbiBhbm9ueW1vdXMoSGFuZGxlYmFycyxkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG50aGlzLmNvbXBpbGVySW5mbyA9IFs0LCc+PSAxLjAuMCddO1xuaGVscGVycyA9IHRoaXMubWVyZ2UoaGVscGVycywgRW1iZXIuSGFuZGxlYmFycy5oZWxwZXJzKTsgZGF0YSA9IGRhdGEgfHwge307XG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIHNlbGY9dGhpcztcblxuZnVuY3Rpb24gcHJvZ3JhbTEoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LWF0dHJzXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVxcXCJ0YWJsZSB0YWJsZS1ib3JkZXJlZFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8Y29sZ3JvdXA+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGNvbCBjbGFzcz1cXFwiY29sLWxnLTFcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxjb2wgY2xhc3M9XFxcImNvbC1sZy03XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvY29sZ3JvdXA+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGJvZHk+XFxyXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwidXJsXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDIsIHByb2dyYW0yLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzWydpZiddLmNhbGwoZGVwdGgwLCBcInVzZXJuYW1lXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDQsIHByb2dyYW00LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzWydpZiddLmNhbGwoZGVwdGgwLCBcInBhc3N3b3JkXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDYsIHByb2dyYW02LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzWydpZiddLmNhbGwoZGVwdGgwLCBcImZpbGVuYW1lXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDgsIHByb2dyYW04LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzWydpZiddLmNhbGwoZGVwdGgwLCBcImZpbGVzaXplXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDEwLCBwcm9ncmFtMTAsIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwiX19oaWRkZW5fX2ZpbGV0eXBlXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDEyLCBwcm9ncmFtMTIsIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwibm90ZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgxNCwgcHJvZ3JhbTE0LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cXHJcXG4gICAgICAgICAgICAgICAgPC90YWJsZT5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgICAgICAgICBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzLnZpZXcuY2FsbChkZXB0aDAsIFwiVmF1bHRpZXIuU2VjcmV0SW5kZXhJdGVtQ29udHJvbHNWaWV3XCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5mdW5jdGlvbiBwcm9ncmFtMihkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazE7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidmx0LWF0dHItbmFtZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVUkxcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5fdHJpYWdlTXVzdGFjaGUuY2FsbChkZXB0aDAsIFwidXJsXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCI8L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTQoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInZsdC1hdHRyLW5hbWVcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXNlcm5hbWVcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5fdHJpYWdlTXVzdGFjaGUuY2FsbChkZXB0aDAsIFwidXNlcm5hbWVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIjwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtNihkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazE7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidmx0LWF0dHItbmFtZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXNzd29yZFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XCIpO1xuICBzdGFjazEgPSBoZWxwZXJzLl90cmlhZ2VNdXN0YWNoZS5jYWxsKGRlcHRoMCwgXCJwYXNzd29yZFwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbmZ1bmN0aW9uIHByb2dyYW04KGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ2bHQtYXR0ci1uYW1lXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGVuYW1lXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5fdHJpYWdlTXVzdGFjaGUuY2FsbChkZXB0aDAsIFwiZmlsZW5hbWVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVycy5hY3Rpb24uY2FsbChkZXB0aDAsIFwiZG93bmxvYWRCbG9iXCIsIFwiY29udGVudFwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDAsZGVwdGgwXSx0eXBlczpbXCJJRFwiLFwiSURcIl0sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBwdWxsLXJpZ2h0XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1zYXZlXFxcIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2F2ZSB0byBjb21wdXRlclxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTEwKGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJycsIGhlbHBlciwgb3B0aW9ucztcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJ2bHQtYXR0ci1uYW1lXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGVzaXplXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5cIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbigoaGVscGVyID0gaGVscGVycy5odW1hbkZpbGVzaXplIHx8IChkZXB0aDAgJiYgZGVwdGgwLmh1bWFuRmlsZXNpemUpLG9wdGlvbnM9e2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCJmaWxlc2l6ZVwiLCBvcHRpb25zKSA6IGhlbHBlck1pc3NpbmcuY2FsbChkZXB0aDAsIFwiaHVtYW5GaWxlc2l6ZVwiLCBcImZpbGVzaXplXCIsIG9wdGlvbnMpKSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbmZ1bmN0aW9uIHByb2dyYW0xMihkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazE7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8dHI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwidmx0LWF0dHItbmFtZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNaW1lIHR5cGVcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5fdHJpYWdlTXVzdGFjaGUuY2FsbChkZXB0aDAsIFwiZmlsZXR5cGVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIjwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtMTQoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJywgaGVscGVyLCBvcHRpb25zO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcInZsdC1hdHRyLW5hbWVcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm90ZVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtbWFya2Rvd25cXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKChoZWxwZXIgPSBoZWxwZXJzLnJlbmRlck1hcmtkb3duIHx8IChkZXB0aDAgJiYgZGVwdGgwLnJlbmRlck1hcmtkb3duKSxvcHRpb25zPXtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSxoZWxwZXIgPyBoZWxwZXIuY2FsbChkZXB0aDAsIFwibm90ZVwiLCBvcHRpb25zKSA6IGhlbHBlck1pc3NpbmcuY2FsbChkZXB0aDAsIFwicmVuZGVyTWFya2Rvd25cIiwgXCJub3RlXCIsIG9wdGlvbnMpKSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbmZ1bmN0aW9uIHByb2dyYW0xNihkZXB0aDAsZGF0YSkge1xuICBcbiAgXG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJhbGVydCBhbGVydC13YXJuaW5nIHRvcC0xNVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIEVuY3J5cHRlZCBkYXRhIGNhbm5vdCBiZSBkZWNyeXB0ZWRcXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIFwiKTtcbiAgfVxuXG4gIGRhdGEuYnVmZmVyLnB1c2goXCI8ZGl2IGNsYXNzPVxcXCJ2bHQtd3JhcHBlclxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcInZsdC12aXN1YWxcXFwiPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LWljb25cXFwiPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtdHlwZVxcXCI+XFxyXFxuICAgICAgICAgICAgRmlsZVxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtaW5uZXJcXFwiPlxcclxcbiAgICAgICAgPGgzIGNsYXNzPVxcXCJ0b3AtMFxcXCI+XCIpO1xuICBzdGFjazEgPSBoZWxwZXJzLl90cmlhZ2VNdXN0YWNoZS5jYWxsKGRlcHRoMCwgXCJuYW1lXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCI8L2gzPlxcclxcblxcclxcbiAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzWydpZiddLmNhbGwoZGVwdGgwLCBcImRlY3J5cHRlZFwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5wcm9ncmFtKDE2LCBwcm9ncmFtMTYsIGRhdGEpLGZuOnNlbGYucHJvZ3JhbSgxLCBwcm9ncmFtMSwgZGF0YSksY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICBcbn0pOyIsIkVtYmVyLlRFTVBMQVRFU1tcIlNlY3JldC9TZWNyZXRJbmRleEl0ZW1Db250cm9sc1wiXSA9IEVtYmVyLkhhbmRsZWJhcnMudGVtcGxhdGUoZnVuY3Rpb24gYW5vbnltb3VzKEhhbmRsZWJhcnMsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xudGhpcy5jb21waWxlckluZm8gPSBbNCwnPj0gMS4wLjAnXTtcbmhlbHBlcnMgPSB0aGlzLm1lcmdlKGhlbHBlcnMsIEVtYmVyLkhhbmRsZWJhcnMuaGVscGVycyk7IGRhdGEgPSBkYXRhIHx8IHt9O1xuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMSwgaGVscGVyLCBvcHRpb25zLCBzZWxmPXRoaXMsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcblxuZnVuY3Rpb24gcHJvZ3JhbTEoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuXFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtYnV0dG9ucyBjb2wtbWQtNlxcXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYnRuLWdyb3VwXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGEgdHlwZT1cXFwiYnV0dG9uXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZSBidG4tc21cXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPVxcXCJkcm9wZG93blxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jb2dcXFwiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgPC9hPlxcclxcbiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XFxcImRyb3Bkb3duLW1lbnUgY2FyZXQtbGVmdFxcXCI+XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwicGVybXMudXBkYXRlXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDIsIHByb2dyYW0yLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzWydpZiddLmNhbGwoZGVwdGgwLCBcInBlcm1zLmRlbGV0ZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSg3LCBwcm9ncmFtNywgZGF0YSksY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgPC91bD5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcblxcclxcbiAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cbmZ1bmN0aW9uIHByb2dyYW0yKGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMSwgaGVscGVyLCBvcHRpb25zO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IChoZWxwZXIgPSBoZWxwZXJzWydsaW5rLXRvJ10gfHwgKGRlcHRoMCAmJiBkZXB0aDBbJ2xpbmstdG8nXSksb3B0aW9ucz17aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgzLCBwcm9ncmFtMywgZGF0YSksY29udGV4dHM6W2RlcHRoMCxkZXB0aDBdLHR5cGVzOltcIlNUUklOR1wiLFwiSURcIl0sZGF0YTpkYXRhfSxoZWxwZXIgPyBoZWxwZXIuY2FsbChkZXB0aDAsIFwiU2VjcmV0LmVkaXRcIiwgXCJpZFwiLCBvcHRpb25zKSA6IGhlbHBlck1pc3NpbmcuY2FsbChkZXB0aDAsIFwibGluay10b1wiLCBcIlNlY3JldC5lZGl0XCIsIFwiaWRcIiwgb3B0aW9ucykpO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gKGhlbHBlciA9IGhlbHBlcnNbJ2xpbmstdG8nXSB8fCAoZGVwdGgwICYmIGRlcHRoMFsnbGluay10byddKSxvcHRpb25zPXtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDUsIHByb2dyYW01LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwLGRlcHRoMF0sdHlwZXM6W1wiU1RSSU5HXCIsXCJJRFwiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCJTZWNyZXQubW92ZVwiLCBcImlkXCIsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJsaW5rLXRvXCIsIFwiU2VjcmV0Lm1vdmVcIiwgXCJpZFwiLCBvcHRpb25zKSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5mdW5jdGlvbiBwcm9ncmFtMyhkZXB0aDAsZGF0YSkge1xuICBcbiAgXG4gIGRhdGEuYnVmZmVyLnB1c2goXCJFZGl0IHNlY3JldFwiKTtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtNShkZXB0aDAsZGF0YSkge1xuICBcbiAgXG4gIGRhdGEuYnVmZmVyLnB1c2goXCJNb3ZlIHNlY3JldCB0byBhbm90aGVyIGNhcmRcIik7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTcoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJztcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiamF2YXNjcmlwdDpcXFwiIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnMuYWN0aW9uLmNhbGwoZGVwdGgwLCBcImRlbGV0ZVNlY3JldFwiLCBcIlwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDAsZGVwdGgwXSx0eXBlczpbXCJJRFwiLFwiSURcIl0sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIj5EZWxldGUgc2VjcmV0PC9hPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxyXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cblxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPGRpdiBjbGFzcz1cXFwidmx0LWNvbnRyb2xzXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwidmx0LWF1dGhvciBjb2wtbWQtNlxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtZm9vdGVyLWl0ZW0gaGVscC1ibG9jayBwdWxsLWxlZnRcXFwiPlxcclxcbiAgICAgICAgICAgIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKChoZWxwZXIgPSBoZWxwZXJzLnByaW50VXNlciB8fCAoZGVwdGgwICYmIGRlcHRoMC5wcmludFVzZXIpLG9wdGlvbnM9e2hhc2g6e1xuICAgICdlbGxpcHNpcyc6ICgxMiksXG4gICAgJ3ByZWZpeCc6IChcIkNyZWF0ZWQgYnk6XCIpXG4gIH0saGFzaFR5cGVzOnsnZWxsaXBzaXMnOiBcIklOVEVHRVJcIiwncHJlZml4JzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnZWxsaXBzaXMnOiBkZXB0aDAsJ3ByZWZpeCc6IGRlcHRoMH0sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSxoZWxwZXIgPyBoZWxwZXIuY2FsbChkZXB0aDAsIFwiY3JlYXRlZF9ieVwiLCBvcHRpb25zKSA6IGhlbHBlck1pc3NpbmcuY2FsbChkZXB0aDAsIFwicHJpbnRVc2VyXCIsIFwiY3JlYXRlZF9ieVwiLCBvcHRpb25zKSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtZm9vdGVyLWl0ZW0gaGVscC1ibG9jayBwdWxsLXJpZ2h0XFxcIj5cXHJcXG4gICAgICAgICAgICBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbigoaGVscGVyID0gaGVscGVycy5wcmludEFnbyB8fCAoZGVwdGgwICYmIGRlcHRoMC5wcmludEFnbyksb3B0aW9ucz17aGFzaDp7XG4gICAgJ3ByZWZpeCc6IChcIkxhdGVzdCBtb2RpZmljYXRpb24gYXQ6XCIpXG4gIH0saGFzaFR5cGVzOnsncHJlZml4JzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsncHJlZml4JzogZGVwdGgwfSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCJ1cGRhdGVkX2F0XCIsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJwcmludEFnb1wiLCBcInVwZGF0ZWRfYXRcIiwgb3B0aW9ucykpKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2xlYXJmaXhcXFwiPjwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgXCIpO1xuICBzdGFjazEgPSAoaGVscGVyID0gaGVscGVycy5leHAgfHwgKGRlcHRoMCAmJiBkZXB0aDAuZXhwKSxvcHRpb25zPXtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDEsIHByb2dyYW0xLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJTVFJJTkdcIl0sZGF0YTpkYXRhfSxoZWxwZXIgPyBoZWxwZXIuY2FsbChkZXB0aDAsIFwiKHBlcm1zLnVwZGF0ZSB8fCBwZXJtcy5kZWxldGUpXCIsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJleHBcIiwgXCIocGVybXMudXBkYXRlIHx8IHBlcm1zLmRlbGV0ZSlcIiwgb3B0aW9ucykpO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuXFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNsZWFyZml4XFxcIj48L2Rpdj5cXHJcXG5cXHJcXG48L2Rpdj5cIik7XG4gIHJldHVybiBidWZmZXI7XG4gIFxufSk7IiwiRW1iZXIuVEVNUExBVEVTW1wiU2VjcmV0L1NlY3JldE1vdmVcIl0gPSBFbWJlci5IYW5kbGViYXJzLnRlbXBsYXRlKGZ1bmN0aW9uIGFub255bW91cyhIYW5kbGViYXJzLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbnRoaXMuY29tcGlsZXJJbmZvID0gWzQsJz49IDEuMC4wJ107XG5oZWxwZXJzID0gdGhpcy5tZXJnZShoZWxwZXJzLCBFbWJlci5IYW5kbGViYXJzLmhlbHBlcnMpOyBkYXRhID0gZGF0YSB8fCB7fTtcbiAgdmFyIGJ1ZmZlciA9ICcnLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcblxuXG4gIGRhdGEuYnVmZmVyLnB1c2goXCI8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTJcXFwiPlxcblxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LWRpYWxvZyB2bHQtZGlhbG9nLXdpbmRvd1xcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1kaWFsb2ctY29udGVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtZGlhbG9nLWhlYWRlclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyPk1vdmUgc2VjcmV0IHRvIGFub3RoZXIgY2FyZDwvaDI+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1kaWFsb2ctYm9keVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGg0PlBsZWFzZSBzZWxlY3QgdGFyZ2V0IGNhcmQ8L2g0PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC10cmVlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVycy52aWV3LmNhbGwoZGVwdGgwLCBcInZpZXcuVHJlZVwiLCB7aGFzaDp7XG4gICAgJ2NvbnRlbnQnOiAoXCJ0cmVlTm9kZXNcIilcbiAgfSxoYXNoVHlwZXM6eydjb250ZW50JzogXCJJRFwifSxoYXNoQ29udGV4dHM6eydjb250ZW50JzogZGVwdGgwfSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaGVscC1ibG9ja1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFsc28gYWxsIGdyYW50ZWQgcGVybWlzc2lvbnMgd2lsbCBiZSBtb3ZlZC5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjbGVhcmZpeFxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LWRpYWxvZy1mb290ZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XFxcImphdmFzY3JpcHQ6d2luZG93Lmhpc3RvcnkuZ28oLTEpXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCYWNrXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVycy5hY3Rpb24uY2FsbChkZXB0aDAsIFwic2F2ZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCIgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVyc1snYmluZC1hdHRyJ10uY2FsbChkZXB0aDAsIHtoYXNoOntcbiAgICAnZGlzYWJsZWQnOiAoXCJtb3ZlRGlzYWJsZWRcIilcbiAgfSxoYXNoVHlwZXM6eydkaXNhYmxlZCc6IFwiSURcIn0saGFzaENvbnRleHRzOnsnZGlzYWJsZWQnOiBkZXB0aDB9LGNvbnRleHRzOltdLHR5cGVzOltdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCIgY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLW9rXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vdmVcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cXG5cXG5cIik7XG4gIHJldHVybiBidWZmZXI7XG4gIFxufSk7IiwiRW1iZXIuVEVNUExBVEVTW1wiU2VjcmV0L1NlY3JldE1vdmVWYXVsdE5vZGVcIl0gPSBFbWJlci5IYW5kbGViYXJzLnRlbXBsYXRlKGZ1bmN0aW9uIGFub255bW91cyhIYW5kbGViYXJzLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbnRoaXMuY29tcGlsZXJJbmZvID0gWzQsJz49IDEuMC4wJ107XG5oZWxwZXJzID0gdGhpcy5tZXJnZShoZWxwZXJzLCBFbWJlci5IYW5kbGViYXJzLmhlbHBlcnMpOyBkYXRhID0gZGF0YSB8fCB7fTtcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazEsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xuXG5cbiAgZGF0YS5idWZmZXIucHVzaChcIjxkaXYgY2xhc3M9XFxcInZsdC1ub2RlIHZsdC12YXVsdFxcXCIgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVyc1snYmluZC1hdHRyJ10uY2FsbChkZXB0aDAsIHtoYXNoOntcbiAgICAnY2xhc3MnOiAoXCJ2aWV3LmxvYWRpbmc6dmx0LWxvYWRpbmdcIilcbiAgfSxoYXNoVHlwZXM6eydjbGFzcyc6IFwiU1RSSU5HXCJ9LGhhc2hDb250ZXh0czp7J2NsYXNzJzogZGVwdGgwfSxjb250ZXh0czpbXSx0eXBlczpbXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPlxcbiAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnMuX3RyaWFnZU11c3RhY2hlLmNhbGwoZGVwdGgwLCBcInZpZXcuY29udGVudC5uYW1lXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG48L2Rpdj5cIik7XG4gIHJldHVybiBidWZmZXI7XG4gIFxufSk7IiwiRW1iZXIuVEVNUExBVEVTW1wiU2VjcmV0L1NlY3JldE1vdmVDYXJkTm9kZVwiXSA9IEVtYmVyLkhhbmRsZWJhcnMudGVtcGxhdGUoZnVuY3Rpb24gYW5vbnltb3VzKEhhbmRsZWJhcnMsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xudGhpcy5jb21waWxlckluZm8gPSBbNCwnPj0gMS4wLjAnXTtcbmhlbHBlcnMgPSB0aGlzLm1lcmdlKGhlbHBlcnMsIEVtYmVyLkhhbmRsZWJhcnMuaGVscGVycyk7IGRhdGEgPSBkYXRhIHx8IHt9O1xuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMSwgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb247XG5cblxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPGRpdiBjbGFzcz1cXFwidmx0LW5vZGUgdmx0LWNhcmRcXFwiIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnNbJ2JpbmQtYXR0ciddLmNhbGwoZGVwdGgwLCB7aGFzaDp7XG4gICAgJ2NsYXNzJzogKFwidmlldy5sb2FkaW5nOnZsdC1sb2FkaW5nXCIpXG4gIH0saGFzaFR5cGVzOnsnY2xhc3MnOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eydjbGFzcyc6IGRlcHRoMH0sY29udGV4dHM6W10sdHlwZXM6W10sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIj5cXG5cXG4gICAgPGxhYmVsPlxcbiAgICAgICAgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVycy52aWV3LmNhbGwoZGVwdGgwLCBcInZpZXcuUmFkaW9cIiwge2hhc2g6e1xuICAgICduYW1lJzogKFwibW92ZS10YXJnZXRcIiksXG4gICAgJ3ZhbHVlJzogKFwidmlldy5jb250ZW50LmlkXCIpXG4gIH0saGFzaFR5cGVzOnsnbmFtZSc6IFwiU1RSSU5HXCIsJ3ZhbHVlJzogXCJJRFwifSxoYXNoQ29udGV4dHM6eyduYW1lJzogZGVwdGgwLCd2YWx1ZSc6IGRlcHRoMH0sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzLl90cmlhZ2VNdXN0YWNoZS5jYWxsKGRlcHRoMCwgXCJ2aWV3LmNvbnRlbnQubmFtZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgIDwvbGFiZWw+XFxuPC9kaXY+XCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICBcbn0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==