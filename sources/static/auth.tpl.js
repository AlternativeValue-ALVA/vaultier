Ember.TEMPLATES["Auth/AuthLogin"]=Ember.Handlebars.template(function(r,n,s,e,t){function a(r,n){var e="";return n.buffer.push('\r\n                                    <div class="input-group">\r\n                                        <input '),n.buffer.push(b(s["bind-attr"].call(r,{hash:{value:"email"},hashTypes:{value:"ID"},hashContexts:{value:r},contexts:[],types:[],data:n}))),n.buffer.push('\r\n                                                disabled type="email"\r\n                                                class="form-control"\r\n                                                id="login-form-email"\r\n                                                placeholder="Email">\r\n                                                  <span class="input-group-btn">\r\n                                                    <a '),n.buffer.push(b(s.action.call(r,"switchUser",{hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:n}))),n.buffer.push(' class="vlt-login-switch btn btn-default">Switch\r\n                                                        user</a>\r\n                                                  </span>\r\n                                    </div>\r\n                                '),e}function l(r,n){var e="";return n.buffer.push("\r\n                                    "),n.buffer.push(b(s.view.call(r,"Ember.TextField",{hash:{elementId:"login-form-email",valueBinding:"email","class":"form-control",placeholder:"Enter your email"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING",placeholder:"STRING"},hashContexts:{elementId:r,valueBinding:r,"class":r,placeholder:r},contexts:[r],types:["ID"],data:n}))),n.buffer.push("\r\n                                "),e}function o(r,n){n.buffer.push('\r\n                                    <input disabled\r\n                                           class="form-control"\r\n                                           value="Using remebered key"\r\n                                           id="login-form-key"\r\n                                           placeholder="Key">\r\n                                ')}function i(r,n){var e="";return n.buffer.push('\r\n                                    <div class="input-group">\r\n                                        <input '),n.buffer.push(b(s["bind-attr"].call(r,{hash:{value:"filename"},hashTypes:{value:"ID"},hashContexts:{value:r},contexts:[],types:[],data:n}))),n.buffer.push('\r\n                                                type="text"\r\n                                                class="form-control"\r\n                                                readonly=""\r\n                                                placeholder="Select your key">\r\n\r\n                                            <span class="vlt-login-key input-group-btn btn btn-default btn-file">\r\n                                                Browse <input type="file">\r\n                                            </span>\r\n                                    </div>\r\n                                '),e}function h(r,n){n.buffer.push("Click\r\n                                        here.")}function c(r,n){n.buffer.push("\r\n                            Create new account")}this.compilerInfo=[4,">= 1.0.0"],s=this.merge(s,Ember.Handlebars.helpers),t=t||{};var u,p,d,f="",b=this.escapeExpression,v=this,m=s.helperMissing;return t.buffer.push('<div class="container">\r\n    <div class="vlt-page vlt-page-plain">\r\n\r\n\r\n<div class="vlt-dialog  vlt-login col-md-8 col-md-offset-2 col-xs-12 top-50">\r\n    <div class="vlt-dialog-content">\r\n        <form class="form-horizontal" role="form">\r\n\r\n            <div class="vlt-dialog-header">\r\n                <h2>Login</h2>\r\n            </div>\r\n            <div class="vlt-dialog-body">\r\n                <div class="row">\r\n\r\n                    <div class="col-md-5 bottom-15 pull-right">\r\n\r\n                        <div class="callout callout-info">\r\n                            <h4>How our security works</h4>\r\n\r\n                            <p>\r\n                                Vaultier uses encryption algorithms to keep your data safe.\r\n                                Because of strong security you log into the Vaultier with you email\r\n                                and private key instead of password.\r\n                                <br/>\r\n\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class="col-md-7">\r\n\r\n                        <div class="form-group '),t.buffer.push(b(s["bind-attr"].call(n,{hash:{"class":"error:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":n},contexts:[],types:[],data:t}))),t.buffer.push(" "),t.buffer.push(b(s["bind-attr"].call(n,{hash:{"class":"emailSuccess:has-success"},hashTypes:{"class":"STRING"},hashContexts:{"class":n},contexts:[],types:[],data:t}))),t.buffer.push('">\r\n                            <label for="login-form-email" class="col-lg-4 control-label">Email</label>\r\n\r\n                            <div class="col-lg-8">\r\n                                '),u=s["if"].call(n,"latestUser",{hash:{},hashTypes:{},hashContexts:{},inverse:v.program(3,l,t),fn:v.program(1,a,t),contexts:[n],types:["ID"],data:t}),(u||0===u)&&t.buffer.push(u),t.buffer.push('\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class="form-group" '),t.buffer.push(b(s["bind-attr"].call(n,{hash:{"class":"error:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":n},contexts:[],types:[],data:t}))),t.buffer.push('>\r\n                            <label for="login-form-key" class="col-lg-4 control-label">Key</label>\r\n\r\n                            <div class="col-lg-8">\r\n                                '),u=s["if"].call(n,"latestUser",{hash:{},hashTypes:{},hashContexts:{},inverse:v.program(7,i,t),fn:v.program(5,o,t),contexts:[n],types:["ID"],data:t}),(u||0===u)&&t.buffer.push(u),t.buffer.push('\r\n                                <small>\r\n                                    <span class="text-muted">Did you lost your key?</span>\r\n                                    '),p=s["link-to"]||n&&n["link-to"],d={hash:{"class":"btn-link"},hashTypes:{"class":"STRING"},hashContexts:{"class":n},inverse:v.noop,fn:v.program(9,h,t),contexts:[n],types:["STRING"],data:t},u=p?p.call(n,"AuthLostKey",d):m.call(n,"link-to","AuthLostKey",d),(u||0===u)&&t.buffer.push(u),t.buffer.push('\r\n                                </small>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <br/>\r\n\r\n                        <div class="form-group">\r\n                            <label for="login-form-remember"\r\n                                   class="col-lg-4 control-label">Remember</label>\r\n\r\n                            <div class="col-lg-8">\r\n                                '),t.buffer.push(b(s.view.call(n,"Ember.Select",{hash:{"class":"form-control",elementId:"login-form-remember",contentBinding:"rememberOptions",optionValuePath:"content.ttl",optionLabelPath:"content.text",valueBinding:"ttl"},hashTypes:{"class":"STRING",elementId:"STRING",contentBinding:"STRING",optionValuePath:"STRING",optionLabelPath:"STRING",valueBinding:"STRING"},hashContexts:{"class":n,elementId:n,contentBinding:n,optionValuePath:n,optionLabelPath:n,valueBinding:n},contexts:[n],types:["ID"],data:t}))),t.buffer.push('\r\n\r\n                                <p>\r\n                                    <small class="text-muted">\r\n                                        Your credentials will be stored for selected period of time.\r\n                                        Remebering crednentials is not secure because key is being stored in your\r\n                                        browser.\r\n                                    </small>\r\n                                </p>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div class="vlt-dialog-footer">\r\n\r\n                <div class="pull-right vlt-right-buttons">\r\n                    <button type="submit" '),t.buffer.push(b(s.action.call(n,"loginUser",{hash:{},hashTypes:{},hashContexts:{},contexts:[n],types:["ID"],data:t}))),t.buffer.push(' class="btn btn-primary">\r\n                        Login\r\n                    </button>\r\n                </div>\r\n\r\n                <div class="vlt-right-buttons text-left">\r\n                    <div>\r\n                        Do not have account yet?\r\n                        '),p=s["link-to"]||n&&n["link-to"],d={hash:{"class":"btn btn-default btn-sm"},hashTypes:{"class":"STRING"},hashContexts:{"class":n},inverse:v.noop,fn:v.program(11,c,t),contexts:[n],types:["STRING"],data:t},u=p?p.call(n,"AuthRegister",d):m.call(n,"link-to","AuthRegister",d),(u||0===u)&&t.buffer.push(u),t.buffer.push('\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div class="clearfix"></div>\r\n\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n\r\n        <div class="clearfix"></div>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n'),f});
Ember.TEMPLATES["Auth/AuthRegister"]=Ember.Handlebars.template(function(n,s,r,e,t){function a(n,s){s.buffer.push('\r\n                    <a>\r\n                        Before you register\r\n                        <span class="glyphicon glyphicon glyphicon-chevron-right"></span>\r\n                    </a>\r\n                ')}function h(n,s){s.buffer.push('\r\n                    <a>\r\n                        Generate your keys\r\n                        <span class="glyphicon glyphicon glyphicon-chevron-right"></span>\r\n                    </a>\r\n                ')}function o(n,s){s.buffer.push('\r\n                    <a>\r\n                        Your credentials\r\n                        <span class="glyphicon glyphicon glyphicon-chevron-right"></span>\r\n                    </a>\r\n                ')}function i(n,s){s.buffer.push('\r\n                    <a>\r\n                        Finish registration\r\n                        <span class="glyphicon glyphicon glyphicon-chevron-right"></span>\r\n                    </a>\r\n                ')}function l(n,s){var e,t="";return s.buffer.push("\r\n                        "),e=r._triageMustache.call(n,"props.nextButtonTitle",{hash:{},hashTypes:{},hashContexts:{},contexts:[n],types:["ID"],data:s}),(e||0===e)&&s.buffer.push(e),s.buffer.push("\r\n                    "),t}function p(n,s){s.buffer.push("\r\n                        Next\r\n                    ")}function u(n,s){var e,t,a,h="";return s.buffer.push("\r\n                        Do you have account already?\r\n                        "),t=r["link-to"]||n&&n["link-to"],a={hash:{"class":"btn btn-default btn-sm"},hashTypes:{"class":"STRING"},hashContexts:{"class":n},inverse:g.noop,fn:g.program(14,c,s),contexts:[n],types:["STRING"],data:s},e=t?t.call(n,"AuthLogin",a):y.call(n,"link-to","AuthLogin",a),(e||0===e)&&s.buffer.push(e),s.buffer.push("\r\n                    "),h}function c(n,s){s.buffer.push("\r\n                            Login to your account here\r\n                        ")}this.compilerInfo=[4,">= 1.0.0"],r=this.merge(r,Ember.Handlebars.helpers),t=t||{};var f,b,d,v="",g=this,y=r.helperMissing,x=this.escapeExpression;return t.buffer.push('<div class="container">\r\n    <div class="vlt-page vlt-page-plain">\r\n\r\n\r\n<div class="vlt-dialog vlt-register col-xs-12 col-md-10 col-md-offset-1 top-50">\r\n    <div class="vlt-dialog-content">\r\n        <div class="vlt-dialog-header">\r\n            <h2>Register to Vaultier</h2>\r\n\r\n            <ul class="nav nav-pills nav-justified vlt-wizard-steps">\r\n                '),f=r.view.call(s,"view.TabView",{hash:{tab:"before"},hashTypes:{tab:"STRING"},hashContexts:{tab:s},inverse:g.noop,fn:g.program(1,a,t),contexts:[s],types:["ID"],data:t}),(f||0===f)&&t.buffer.push(f),t.buffer.push("\r\n\r\n                "),f=r.view.call(s,"view.TabView",{hash:{tab:"keys"},hashTypes:{tab:"STRING"},hashContexts:{tab:s},inverse:g.noop,fn:g.program(3,h,t),contexts:[s],types:["ID"],data:t}),(f||0===f)&&t.buffer.push(f),t.buffer.push("\r\n\r\n\r\n                "),f=r.view.call(s,"view.TabView",{hash:{tab:"creds"},hashTypes:{tab:"STRING"},hashContexts:{tab:s},inverse:g.noop,fn:g.program(5,o,t),contexts:[s],types:["ID"],data:t}),(f||0===f)&&t.buffer.push(f),t.buffer.push("\r\n\r\n                "),f=r.view.call(s,"view.TabView",{hash:{tab:"sum"},hashTypes:{tab:"STRING"},hashContexts:{tab:s},inverse:g.noop,fn:g.program(7,i,t),contexts:[s],types:["ID"],data:t}),(f||0===f)&&t.buffer.push(f),t.buffer.push('\r\n\r\n            </ul>\r\n        </div>\r\n\r\n        <div class="vlt-dialog-body">\r\n            '),t.buffer.push(x((b=r.outlet||s&&s.outlet,d={hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:t},b?b.call(s,"AuthRegister",d):y.call(s,"outlet","AuthRegister",d)))),t.buffer.push('\r\n        </div>\r\n\r\n        <div class="vlt-dialog-footer">\r\n\r\n            <div class="pull-right vlt-right-buttons">\r\n                <button '),t.buffer.push(x(r.action.call(s,"next",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:t}))),t.buffer.push(" "),t.buffer.push(x(r["bind-attr"].call(s,{hash:{disabled:"props.nextButtonDisabled"},hashTypes:{disabled:"ID"},hashContexts:{disabled:s},contexts:[],types:[],data:t}))),t.buffer.push(' class="btn btn-primary">\r\n                    <span class="glyphicon glyphicon glyphicon-chevron-right"></span>\r\n                    '),f=r["if"].call(s,"props.nextButtonTitle",{hash:{},hashTypes:{},hashContexts:{},inverse:g.program(11,p,t),fn:g.program(9,l,t),contexts:[s],types:["ID"],data:t}),(f||0===f)&&t.buffer.push(f),t.buffer.push('\r\n                </button>\r\n            </div>\r\n\r\n            <div class="vlt-left-buttons pull-left">\r\n                    '),f=r.unless.call(s,"props.loginButtonHidden",{hash:{},hashTypes:{},hashContexts:{},inverse:g.noop,fn:g.program(13,u,t),contexts:[s],types:["ID"],data:t}),(f||0===f)&&t.buffer.push(f),t.buffer.push('\r\n            </div>\r\n\r\n            <div class="clearfix"></div>\r\n\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n        <div class="clearfix"></div>\r\n    </div>\r\n</div>\r\n\r\n\r\n'),v});
Ember.TEMPLATES["Auth/AuthRegisterBefore"]=Ember.Handlebars.template(function(r,e,n,i,a){this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),a=a||{},a.buffer.push('<div>\r\n\r\n    <div class="col-md-5 col-md-offset-1">\r\n        <h4>How our security works</h4>\r\n\r\n        <p>\r\n            Vaultier uses encryption algorithms to keep your data safe.\r\n            <br/>\r\n            <br/>\r\n            All secrets submited to vaultier are encrypted by your private key\r\n            and can be red only by you and your team.\r\n            <br/>\r\n            <br/>\r\n            Because of strong security you log into the Vaultier with you email\r\n            and private key instead of password.\r\n            <br/>\r\n            <br/>\r\n            <a href="http://en.wikipedia.org/wiki/RSA_(algorithm)" target="_blank">\r\n                Read more on topic on wikipedia\r\n            </a>\r\n\r\n        </p>\r\n    </div>\r\n\r\n    <div class="col-md-5">\r\n        <h4>Steps of registration</h4>\r\n\r\n        <p>\r\n            Registration wizard will guide you throught follwoing step to became regular user of Vaultier\r\n\r\n        <ol>\r\n            <li>Generate keys - your private and public key will be generated</li>\r\n            <li>Submit credentials - You will be asked about your credentials - email, nickname ...</li>\r\n            <li>Summary of registration - final information before use</li>\r\n        </ol>\r\n\r\n        </p>\r\n    </div>\r\n\r\n    <div class="clearfix"></div>\r\n\r\n</div>\r\n')});
Ember.TEMPLATES["Auth/AuthRegisterKeys"]=Ember.Handlebars.template(function(r,e,n,t,a){function s(r,e){var t="";return e.buffer.push('\r\n\r\n        <div class="row bottom-15">\r\n            <div class="col-md-8 col-md-offset-2">\r\n                <h4>We have generated your private and public key pair. </h4>\r\n\r\n                <p>\r\n                    Public key will be uploaded to Vaultier.\r\n                    But private key is only for you and will be used to log into the Vaultier and to encrypt your\r\n                    secrets.\r\n                </p>\r\n            </div>\r\n        </div>\r\n\r\n        <div class="col-md-8 col-md-offset-2 alert alert-warning">\r\n\r\n            <div class="row top-15">\r\n                <div class="col-md-10 col-md-offset-1">\r\n                    <p\r\n                            class="text-danger text-center"\r\n                            data-toggle="tooltip"\r\n                            title="\r\n                            Private key is used instead of password to log into Vaultier.\r\n                            Please keep private key safe and do not give it to anybody.\r\n                            Without private key you will not be able to log into Vaultier\r\n                            and your data will be rendered unreadable.\r\n                            ">\r\n\r\n                        <b>\r\n                            <span class="glyphicon glyphicon-exclamation-sign btn-lg"></span>\r\n                            <br/>\r\n                            Save private key to local computer and keep it carefully. Do not loose the key\r\n                        </b>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            <div class="row top-15">\r\n                <div class="col-md-10 col-md-offset-1 text-center">\r\n                    <a class="btn btn-primary btn-lg" '),e.buffer.push(d(n.action.call(r,"downloadKey",{hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:e}))),e.buffer.push('>\r\n                         <span class="glyphicon glyphicon-save"></span>\r\n                        Save the key\r\n                    </a>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div class="clearfix"></div>\r\n\r\n    </div>\r\n\r\n\r\n'),t}function l(r,e){e.buffer.push('\r\n    <div class="generate">\r\n        <h3>Please wait while generating your keys</h3>\r\n\r\n        <div class="vlt-preloader vlt-preloader-small">\r\n        </div>\r\n    </div>\r\n')}this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),a=a||{};var o,i="",d=this.escapeExpression,p=this;return a.buffer.push('<div class="vlt-register-keys">\r\n'),o=n["if"].call(e,"props.keysReady",{hash:{},hashTypes:{},hashContexts:{},inverse:p.program(3,l,a),fn:p.program(1,s,a),contexts:[e],types:["ID"],data:a}),(o||0===o)&&a.buffer.push(o),a.buffer.push("\r\n</div>\r\n"),i});
Ember.TEMPLATES["Auth/AuthRegisterCreds"]=Ember.Handlebars.template(function(e,r,s,n,a){this.compilerInfo=[4,">= 1.0.0"],s=this.merge(s,Ember.Handlebars.helpers),a=a||{};var l,t="",i=this.escapeExpression;return a.buffer.push('<div class="vlt-register-creds">\r\n\r\n    <div class="col-md-8 col-md-offset-2">\r\n        <div>\r\n            <h4>Please submit yout credentials</h4>\r\n\r\n            <p>\r\n                Please provide us with your credentials. Email will be used for login and delivering notifications to you.\r\n                By nickname you will be recognized by other users of Vaultier\r\n            </p>\r\n        </div>\r\n\r\n        <div class="bottom-30">\r\n            <form class="form-horizontal" role="form">\r\n\r\n                <div '),a.buffer.push(i(s["bind-attr"].call(r,{hash:{"class":"content.errors.email:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":r},contexts:[],types:[],data:a}))),a.buffer.push('>\r\n                    <label for="register-form-email" class="control-label">Email *</label>\r\n\r\n                    <div>\r\n                        '),a.buffer.push(i(s.view.call(r,"Ember.TextField",{hash:{elementId:"register-form-email",valueBinding:"content.email","class":"form-control",placeholder:"Please enter valid email address"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING",placeholder:"STRING"},hashContexts:{elementId:r,valueBinding:r,"class":r,placeholder:r},contexts:[r],types:["ID"],data:a}))),a.buffer.push('\r\n                        <span class="error">\r\n                            '),l=s._triageMustache.call(r,"content.errors.email",{hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:a}),(l||0===l)&&a.buffer.push(l),a.buffer.push("\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div  "),a.buffer.push(i(s["bind-attr"].call(r,{hash:{"class":"content.errors.nickname:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":r},contexts:[],types:[],data:a}))),a.buffer.push('>\r\n                    <label for="register-form-nickname" class="control-label">Your nickname *</label>\r\n\r\n                    <div>\r\n                        '),a.buffer.push(i(s.view.call(r,"Ember.TextField",{hash:{elementId:"register-form-nickname",valueBinding:"content.nickname","class":"form-control",placeholder:"Please enter your nickname"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING",placeholder:"STRING"},hashContexts:{elementId:r,valueBinding:r,"class":r,placeholder:r},contexts:[r],types:["ID"],data:a}))),a.buffer.push('\r\n                        <span class="error">\r\n                            '),l=s._triageMustache.call(r,"content.errors.nickname",{hash:{},hashTypes:{},hashContexts:{},contexts:[r],types:["ID"],data:a}),(l||0===l)&&a.buffer.push(l),a.buffer.push('\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                <br/>\r\n\r\n            </form>\r\n        </div>\r\n    </div>\r\n\r\n    <div class="clearfix"></div>\r\n</div>\r\n'),t});
Ember.TEMPLATES["Auth/AuthLostKeyIndex"]=Ember.Handlebars.template(function(r,e,s,n,l){this.compilerInfo=[4,">= 1.0.0"],s=this.merge(s,Ember.Handlebars.helpers),l=l||{};var a,t,i,o="",c=this.escapeExpression,d=s.helperMissing;return l.buffer.push('<div class="container">\r\n    <div class="vlt-page vlt-page-plain">\r\n        <div class="vlt-dialog col-md-8 col-md-offset-2 col-xs-12 top-50">\r\n            <div class="vlt-dialog-content">\r\n                <form class="form-horizontal" role="form">\r\n\r\n                    <div class="vlt-dialog-header text-center">\r\n                        <h2>Retrieve your lost key</h2>\r\n                    </div>\r\n                    <div class="vlt-dialog-body">\r\n                        <div class="row">\r\n                            <div class="col-md-12 bottom-15">\r\n\r\n                                <div class="callout callout-info">\r\n                                    <p>\r\n                                        You have forgotten your key, we are ready to renew your access key. Please enter\r\n                                        your email below and we will send email to you with further instructions.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class="col-md-8">\r\n\r\n                                <div class="form-group" '),l.buffer.push(c(s["bind-attr"].call(e,{hash:{"class":"error:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:l}))),l.buffer.push('>\r\n                                    <label for="login-form-email" class="col-lg-4 control-label pull-left">Email</label>\r\n\r\n                                    <div class="col-lg-8">\r\n                                        '),l.buffer.push(c((t=s.input||e&&e.input,i={hash:{id:"email",valueBinding:"content.email","class":"form-control",placeholder:"Enter your email",require:"true"},hashTypes:{id:"STRING",valueBinding:"STRING","class":"STRING",placeholder:"STRING",require:"STRING"},hashContexts:{id:e,valueBinding:e,"class":e,placeholder:e,require:e},contexts:[],types:[],data:l},t?t.call(e,i):d.call(e,"input",i)))),l.buffer.push('\r\n                                        <span class="error">\r\n                                            '),a=s._triageMustache.call(e,"content.errors.email",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:l}),(a||0===a)&&l.buffer.push(a),l.buffer.push('\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div class="vlt-dialog-footer">\r\n\r\n                        <div class="pull-right vlt-right-buttons">\r\n                            <button type="submit" '),l.buffer.push(c(s.action.call(e,"sendRecoveryKeyRequest",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:l}))),l.buffer.push(' class="btn btn-primary">\r\n                                Send\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div class="clearfix"></div>\r\n\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n        <div class="clearfix"></div>\r\n    </div>\r\n</div>'),o});
Ember.TEMPLATES["Auth/AuthLostKeySuccess"]=Ember.Handlebars.template(function(n,s,e,t,l){function i(n,s){s.buffer.push("\n                            Return to login\n                        ")}this.compilerInfo=[4,">= 1.0.0"],e=this.merge(e,Ember.Handlebars.helpers),l=l||{};var o,a,r,c="",d=this,v=e.helperMissing;return l.buffer.push('<div class="container">\n    <div class="vlt-page vlt-page-plain">\n        <div class="vlt-dialog col-md-6 col-md-offset-3 col-xs-12 top-50">\n            <div class="vlt-dialog-content">\n                <form class="form-horizontal" role="form">\n\n                    <div class="vlt-dialog-header">\n                        <h2>Your request was successfully accepted.</h2>\n                    </div>\n                    <div class="vlt-dialog-body">\n                        <div class="row">\n                            <div class="col-md-12 text-center bottom-15">\n                                <p>\n                                    We have sent you an email with the instructions to recover your\n                                    private key.\n                                </p>\n                            </div>\n                        </div>\n\n                    </div>\n                    <div class="vlt-dialog-footer">\n\n                        '),a=e["link-to"]||s&&s["link-to"],r={hash:{"class":"btn btn-primary"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},inverse:d.noop,fn:d.program(1,i,l),contexts:[s],types:["STRING"],data:l},o=a?a.call(s,"AuthLogin",r):v.call(s,"link-to","AuthLogin",r),(o||0===o)&&l.buffer.push(o),l.buffer.push('\n                    </div>\n                </form>\n            </div>\n        </div>\n        <div class="clearfix"></div>\n    </div>\n</div>'),c});
Ember.TEMPLATES["Auth/AuthRegisterSum"]=Ember.Handlebars.template(function(r,n,e,s,a){this.compilerInfo=[4,">= 1.0.0"],e=this.merge(e,Ember.Handlebars.helpers),a=a||{};var t,o="",l=this.escapeExpression;return a.buffer.push('<div class="vlt-register-sum">\r\n\r\n\r\n    <div class="row bottom-15">\r\n        <div class="col-md-8 col-md-offset-2">\r\n            <h4>Your account has been successfully created</h4>\r\n\r\n            <p>\r\n                Before start using Vaultier please review your account credentials and\r\n                <b>do not forget to save your private key.</b>\r\n            </p>\r\n        </div>\r\n    </div>\r\n\r\n    <div class="col-md-8 col-md-offset-2 alert alert-warning">\r\n\r\n        <div class="row bottom-5">\r\n            <div class="col-md-5 col-md-offset-1">\r\n                <b>\r\n                    Your email and username:\r\n                </b>\r\n            </div>\r\n            <div class="col-md-4">\r\n                '),t=e._triageMustache.call(n,"auth.user.email",{hash:{},hashTypes:{},hashContexts:{},contexts:[n],types:["ID"],data:a}),(t||0===t)&&a.buffer.push(t),a.buffer.push('\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n        <div class="row bottom-15">\r\n            <div class="col-md-5 col-md-offset-1">\r\n                <b>\r\n                    Your nickname:\r\n                </b>\r\n            </div>\r\n            <div class="col-md-4">\r\n                '),t=e._triageMustache.call(n,"auth.user.nickname",{hash:{},hashTypes:{},hashContexts:{},contexts:[n],types:["ID"],data:a}),(t||0===t)&&a.buffer.push(t),a.buffer.push('\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div class="row top-15">\r\n            <div class="col-md-5 col-md-offset-1">\r\n                <b>\r\n                    Your private key\r\n                </b>\r\n                <br/>\r\n                    <span class="help-block">\r\n                        Used instead of password. Please save if you did not yet.\r\n                    </span>\r\n            </div>\r\n            <div class="col-md-4">\r\n                <a\r\n                    '),a.buffer.push(l(e.action.call(n,"downloadKey",{hash:{},hashTypes:{},hashContexts:{},contexts:[n],types:["ID"],data:a}))),a.buffer.push('\r\n                        data-toggle="tooltip"\r\n                        title="\r\n                            Private key is used instead of password to log into Vaultier.\r\n                            Please keep private key safe and do not give it to anybody.\r\n                            Without private key you will not be able to log into Vaultier\r\n                            and your data will be rendered unreadable.\r\n                            "\r\n                        class="btn btn-default btn-sm"\r\n                        >\r\n                    <span class="glyphicon glyphicon-save"></span>\r\n                    Save your file\r\n\r\n                </a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class="clearfix"></div>\r\n\r\n</div>\r\n'),o});
Ember.TEMPLATES["Auth/AuthLostKeyRecoveryReset"]=Ember.Handlebars.template(function(e,s,n,t,a){function o(e,s){var t,a="";return s.buffer.push("\n                                        <tr>\n                                            <td>\n                                                "),t=n._triageMustache.call(e,"workspace_name",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("\n                                            </td>\n                                            <td>\n                                                "),t=n["if"].call(e,"is_recoverable",{hash:{},hashTypes:{},hashContexts:{},inverse:h.program(4,l,s),fn:h.program(2,r,s),contexts:[e],types:["ID"],data:s}),(t||0===t)&&s.buffer.push(t),s.buffer.push("\n                                            </td>\n                                        </tr>\n                                    "),a}function r(e,s){s.buffer.push('\n                                                    <strong class="text-success">Yes</strong>\n                                                ')}function l(e,s){s.buffer.push('\n                                                    <strong class="text-danger">No</strong>\n                                                ')}this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),a=a||{};var c,i="",h=this,d=this.escapeExpression;return a.buffer.push('<div class="container">\n    <div class="vlt-page vlt-page-plain">\n        <div class="vlt-dialog col-md-8 col-md-offset-2 col-xs-12 top-50">\n            <div class="vlt-dialog-content">\n                <form class="form-horizontal" role="form">\n\n                    <div class="vlt-dialog-header">\n                        <h2>Rebuild your lost key</h2>\n                    </div>\n                    <div class="vlt-dialog-body">\n                        <div class="row bottom-15">\n\n                            <div class="col-md-10 col-md-offset-1">\n                                <h3>Workspace encrypted data recovery</h3>\n\n                                <p>\n                                    After you rebuild your private key access to encrypted workspace data has to be\n                                    recovered.\n                                    Recovery is possible only to workspaces where more than one member exists.\n                                    Your access will be recovered once at least one of your workspace collaborators goes\n                                    online.\n                                </p>\n                            </div>\n                        </div>\n                        <div class="row table-responsive">\n                            <div class="col-md-10 col-md-offset-1">\n                                <table class="table table-condensed">\n                                    <thead>\n                                    <tr>\n                                        <th>Workspace</th>\n                                        <th>Possible recovery</th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    '),c=n.each.call(s,"content.memberships",{hash:{},hashTypes:{},hashContexts:{},inverse:h.noop,fn:h.program(1,o,a),contexts:[s],types:["ID"],data:a}),(c||0===c)&&a.buffer.push(c),a.buffer.push('\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="vlt-dialog-footer">\n\n                        <div class="pull-right vlt-right-buttons">\n                            <button type="submit" class="btn btn-primary" '),a.buffer.push(d(n.action.call(s,"disableKey",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:a}))),a.buffer.push('>\n                                Disable current lost key\n                            </button>\n                            <button type="submit" class="btn btn-primary" '),a.buffer.push(d(n.action.call(s,"rebuildKey",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:a}))),a.buffer.push('>\n                                Rebuild your lost key\n                            </button>\n                        </div>\n\n                        <div class="clearfix"></div>\n\n                    </div>\n                </form>\n            </div>\n        </div>\n        <div class="clearfix"></div>\n    </div>\n</div>'),i});
Ember.TEMPLATES["Auth/AuthLostKeyRecoveryRebuild"]=Ember.Handlebars.template(function(e,s,a,i,n){this.compilerInfo=[4,">= 1.0.0"],a=this.merge(a,Ember.Handlebars.helpers),n=n||{};var l,d,t="",c=a.helperMissing,v=this.escapeExpression;return n.buffer.push('<div class="container">\n    <div class="vlt-page vlt-page-plain">\n        <div class="vlt-dialog col-md-8 col-md-offset-2 col-xs-12 top-50">\n            <div class="vlt-dialog-content">\n                <div class="vlt-dialog-header">\n                    <h2>Private key</h2>\n                </div>\n                <div class="vlt-dialog-body">\n\n                    <div class="col-md-8 col-md-offset-2">\n                        '),n.buffer.push(v((l=a["change-key"]||s&&s["change-key"],d={hash:{action:"save"},hashTypes:{action:"STRING"},hashContexts:{action:s},contexts:[],types:[],data:n},l?l.call(s,d):c.call(s,"change-key",d)))),n.buffer.push('\n                    </div>\n                    <div class="clearfix"></div>\n                </div>\n            </div>\n        </div>\n        <div class="clearfix"></div>\n    </div>\n</div>'),t});
Ember.TEMPLATES["Auth/AuthLostKeyRecoveryDisable"]=Ember.Handlebars.template(function(s,n,l,i,e){function a(s,n){n.buffer.push("\n                                Register\n                            ")}this.compilerInfo=[4,">= 1.0.0"],l=this.merge(l,Ember.Handlebars.helpers),e=e||{};var t,d,o,r="",v=this,c=l.helperMissing;return e.buffer.push('<div class="container">\n    <div class="vlt-page vlt-page-plain">\n        <div class="vlt-dialog col-md-8 col-md-offset-2 col-xs-12 top-50">\n            <div class="vlt-dialog-content">\n                <form class="form-horizontal" role="form">\n\n                    <div class="vlt-dialog-header">\n                        <h2>Disable your workspaces</h2>\n                    </div>\n                    <div class="vlt-dialog-body">\n                        <div class="col-md-8 col-md-offset-2">\n                            <div class="vlt-dialog-body">\n                                <div class="text-center">\n                                    Your key was disabled.\n                                </div>\n                            </div>\n\n                        </div>\n                        <div class="clearfix"></div>\n                    </div>\n                    <div class="vlt-dialog-footer">\n\n                        <div class="pull-right vlt-right-buttons">\n                            '),d=l["link-to"]||n&&n["link-to"],o={hash:{"class":"btn btn-primary"},hashTypes:{"class":"STRING"},hashContexts:{"class":n},inverse:v.noop,fn:v.program(1,a,e),contexts:[n],types:["STRING"],data:e},t=d?d.call(n,"AuthRegister",o):c.call(n,"link-to","AuthRegister",o),(t||0===t)&&e.buffer.push(t),e.buffer.push('\n                        </div>\n\n                        <div class="clearfix"></div>\n\n                    </div>\n                </form>\n            </div>\n        </div>\n        <div class="clearfix"></div>\n    </div>\n</div>'),r});
Ember.TEMPLATES["Auth/AuthLostKeyRecoverySuccess"]=Ember.Handlebars.template(function(s,n,e,o,a){function l(s,n){n.buffer.push("\n                            Go to your workspaces dashboard\n                        ")}this.compilerInfo=[4,">= 1.0.0"],e=this.merge(e,Ember.Handlebars.helpers),a=a||{};var t,i,r,d="",c=this,v=e.helperMissing;return a.buffer.push('<div class="container">\n    <div class="vlt-page vlt-page-plain">\n        <div class="vlt-dialog col-md-6 col-md-offset-3 col-xs-12 top-50">\n            <div class="vlt-dialog-content">\n                <form class="form-horizontal" role="form">\n\n                    <div class="vlt-dialog-header">\n                        <h2>Your private key was successfully reset.</h2>\n                    </div>\n                    <div class="vlt-dialog-body">\n                        <div class="row">\n                            <div class="col-md-12 text-center bottom-15">\n                                <p>\n                                    We rebuild your private key and set your environment to use it.\n                                </p>\n                            </div>\n                        </div>\n\n                    </div>\n                    <div class="vlt-dialog-footer">\n\n                        '),i=e["link-to"]||n&&n["link-to"],r={hash:{"class":"btn btn-primary"},hashTypes:{"class":"STRING"},hashContexts:{"class":n},inverse:c.noop,fn:c.program(1,l,a),contexts:[n],types:["STRING"],data:a},t=i?i.call(n,"Workspaces",r):v.call(n,"link-to","Workspaces",r),(t||0===t)&&a.buffer.push(t),a.buffer.push('\n                    </div>\n                </form>\n            </div>\n        </div>\n        <div class="clearfix"></div>\n    </div>\n</div>'),d});
//# sourceMappingURL=data:application/json;base64,