Vaultier.CardsIndexRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},model:function(){var e=this.modelFor("Vault"),t=this.modelFor("Workspace"),r=this.get("store"),a=r.find("Card",{vault:e.get("id")}),o=Ember.RSVP.hash({to_workspace:r.find("Role",{to_workspace:t.get("id")}),to_vault:r.find("Role",{to_vault:e.get("id")})}).then(function(e){return[].concat(e.to_workspace.toArray(),e.to_vault.toArray())});return Ember.RSVP.hash({cards:a,memberships:o})},setupController:function(e,t){this.get("environment");e.set("content",t.cards),e.set("memberships",t.memberships);var r=this.modelFor("Workspace");this.set("workspace",r),e.set("workspace",r);var a=this.modelFor("Vault");this.set("vault",a),e.set("vault",a),e.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addWorkspace().addVault())}}),Vaultier.CardsIndexController=Ember.ArrayController.extend({workspace:null,vault:null,sortProperties:["name"],sortAscending:!0,actions:{createCard:function(){this.set("sortAscending",!this.get("sortAscending"))}}}),Vaultier.CardsIndexView=Ember.View.extend({templateName:"Card/CardsIndex",layoutName:"Layout/LayoutStandard"}),Vaultier.CardsIndexItemView=Ember.View.extend({templateName:"Card/CardsIndexItem"});
Vaultier.CardsCreateRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},model:function(e,t){var r=this.get("store"),a=this.modelFor("Workspace"),o=this.modelFor("Vault");if(this.get("auth").checkPermissions(t,function(){return o.get("perms.create")}.bind(this),!0)){var s=r.createRecord("Card"),n=Ember.RSVP.hash({to_workspace:r.find("Role",{to_workspace:a.get("id")}),to_vault:r.find("Role",{to_vault:o.get("id")})}).then(function(e){return[].concat(e.to_workspace.toArray(),e.to_vault.toArray())});return Ember.RSVP.hash({card:s,memberships:n})}},actions:{save:function(){var e=(this.get("workspace"),this.get("vault")),t=this.get("controller.content");t.set("vault",e.get("id"));var r=t.saveRecord().then(function(){$.notify("Your card has been successfully created.","success"),this.transitionTo("Card.index",t)}.bind(this),function(){$.notify("Oooups! Something went wrong.","error")});ApplicationLoader.promise(r)}},setupController:function(e,t){e.set("content",t.card),e.set("memberships",t.memberships);var r=this.modelFor("Workspace");this.set("workspace",r),e.set("workspace",r);var a=this.modelFor("Vault");this.set("vault",a),e.set("vault",a),e.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addWorkspace().addVault().addText("Create new card"))}}),Vaultier.CardsCreateController=Ember.ObjectController.extend({breadcrumbs:null,workspace:null,vault:null}),Vaultier.CardsCreateView=Ember.View.extend({templateName:"Card/CardsCreate",layoutName:"Layout/LayoutStandard"});
Vaultier.CardEditRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},model:function(e,t){var r=this.modelFor("Card");if(this.get("auth").checkPermissions(t,function(){return r.get("perms.update")}.bind(this),!0))return r},setupController:function(e,t){this._super(e,t);var r=this.get("environment");e.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:r}).addHome().addWorkspace().addVault().addCard().addText("Edit card"))},actions:{save:function(){var e=this.get("controller.content"),t=e.saveRecord().then(function(){$.notify("Your changes has been successfully saved.","success"),history.go(-1)}.bind(this),function(){$.notify("Oooups! Something went wrong.","error")});ApplicationLoader.promise(t)}}}),Vaultier.CardEditController=Ember.ObjectController.extend({breadcrumbs:null}),Vaultier.CardEditView=Ember.View.extend({templateName:"Card/CardEdit",layoutName:"Layout/LayoutStandard"});
Vaultier.CardRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},model:function(e){var t=this.modelFor("Vault"),r=this.get("store").find("Card",e.card).then(function(e){if(e.get("vault")!=t.get("id")){var r=new Error;throw r.status=404,r}return e});return r},actions:{deleteCard:function(e){var t=this.modelFor("Vault");Vaultier.confirmModal(this,"Are you sure?",function(){var r=e.deleteRecord().then(function(){$.notify("Your card has been successfully deleted.","success"),this.transitionTo("Cards.index",t)}.bind(this),function(){e.rollback(),$.notify("Oooups! Something went wrong.","error")}.bind(this));ApplicationLoader.promise(r)}.bind(this))}},afterModel:function(e){this.get("environment").set("card",e)},serialize:function(e){return"string"==typeof e||"number"==typeof e?e:{card:e.get("slug")}}}),Vaultier.CardIndexRoute=Ember.Route.extend({beforeModel:function(){this.transitionTo("Secret.index")}});
Vaultier.CardMemberIndexRoute=Vaultier.MemberIndexRoute.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},setupInviteData:function(){var e=this.modelFor("Card");return{inviteObject:e}},setupBlocks:function(){return{workspace:!0,vault:!0,card:!0}},setupBreadcrumbs:function(){return Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addWorkspace().addVault().addCard().addCollaboratorsIndex("Card.memberIndex")},setupInviteRoute:function(){return{inviteRouteName:"Card.memberInvite"}},setupRoleLevels:function(){var e=Vaultier.Role.proto().roles.toArray().filter(function(e){return"CREATE"==e.id?!1:e});return e}}),Vaultier.CardMemberIndexController=Vaultier.MemberIndexController.extend({}),Vaultier.CardMemberInviteRoute=Vaultier.MemberInviteRoute.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},setupInviteData:function(){var e=this.modelFor("Card"),r=this.modelFor("Workspace");return{inviteObject:e,inviteParams:{to_card:e},inviteWorkspace:r}},setupBreadcrumbs:function(){return Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addWorkspace().addVault().addCard().addCollaboratorsIndex("Card.memberIndex").addCollaboratorsInvite("Card.memberInvite")},setupRoleLevels:function(){var e=Vaultier.Role.proto().roles.toArray().filter(function(e){return"CREATE"==e.id?!1:e});return e}}),Vaultier.CardMemberInviteController=Vaultier.MemberInviteController.extend({});
Vaultier.CardVaultNodeView=Ember.Tree.TreeNodeView.extend({templateName:"Card/CardMoveVaultNode",Radio:Ember.View.extend({tagName:"input",type:"radio",attributeBindings:["type","name","value"],click:function(){this.get("controller").send("selected",this.$().val())}}),loadData:function(){return[]}}),Vaultier.CardMoveRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},model:function(){var e=this.get("store"),t=this.modelFor("Workspace"),r=e.find("Vault",{workspace:t.get("id")}).then(function(e){return e.forEach(function(e){e.set("branch",!0)}),e});return r},setupController:function(e,t){var r=this.modelFor("Card");e.set("content",r),e.set("treeNodes",t),e.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router")}).addHome().addWorkspace().addVault().addCard().addText("Move card"))},actions:{save:function(){var e=this.get("controller.content");e.set("vault",this.get("controller.selected"));var t=e.saveRecord().then(function(){return this.get("store").find("Vault",e.get("vault"))}.bind(this)).then(function(e){$.notify("Your card has been successfully moved.","success"),this.transitionTo("Secret.index",this.modelFor("Workspace").get("slug"),e.get("slug"),this.modelFor("Card").get("slug"))}.bind(this),function(){$.notify("Oooups! Something went wrong.","error")});ApplicationLoader.promise(t)}}}),Vaultier.CardMoveController=Ember.ObjectController.extend({moveDisabled:function(){return!this.get("selected")}.property("selected"),selected:!1,breadcrumbs:null,actions:{selected:function(e){this.set("selected",e)}}}),Vaultier.CardMoveView=Ember.View.extend({templateName:"Card/CardMove",layoutName:"Layout/LayoutStandard",Tree:Ember.Tree.TreeView.extend({itemViewClass:Vaultier.CardVaultNodeView})});
//# sourceMappingURL=data:application/json;base64,