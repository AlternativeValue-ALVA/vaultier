Vaultier.VaultsIndexRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},model:function(){var e=this.modelFor("Workspace"),t=this.get("store"),r=t.find("Vault",{workspace:e.get("id")}),a=t.find("Role",{to_workspace:e.get("id")}).then(function(e){return e.toArray()});return Ember.RSVP.hash({vaults:r,memberships:a})},setupController:function(e,t){e.set("content",t.vaults),e.set("memberships",t.memberships);var r=this.modelFor("Workspace");this.set("workspace",r),e.set("workspace",r),e.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addWorkspace())}}),Vaultier.VaultsIndexController=Ember.ArrayController.extend({breadcrumbs:null}),Vaultier.VaultsIndexView=Ember.View.extend({templateName:"Vault/VaultsIndex",layoutName:"Layout/LayoutStandard"}),Vaultier.VaultIndexItemView=Ember.View.extend({templateName:"Vault/VaultsIndexItem"});
Vaultier.VaultsCreateRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},model:function(e,t){var r=this.get("store"),o=this.modelFor("Workspace");if(this.get("auth").checkPermissions(t,function(){return o.get("perms.create")}.bind(this),!0)){var s=r.createRecord("Vault"),a=r.find("Role",{to_workspace:o.get("id")}).then(function(e){return e.toArray()});return Ember.RSVP.hash({vault:s,memberships:a})}},actions:{save:function(){var e=(this.get("workspace"),this.get("controller.content"));e.set("workspace",this.get("workspace.id"));var t=e.saveRecord().then(function(){$.notify("Your vault has been successfully created.","success"),this.transitionTo("Vault.index",e)}.bind(this)).catch(function(e){$.notify("Oooups! Something went wrong.","error"),this.get("errors").logError(e)}.bind(this));ApplicationLoader.promise(t)}},setupController:function(e,t){e.set("content",t.vault),e.set("memberships",t.memberships);var r=this.modelFor("Workspace");this.set("workspace",r),this.get("controller").set("workspace",r),e.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addWorkspace().addText("Create new vault"))}}),Vaultier.VaultsCreateController=Ember.ObjectController.extend({workspace:null,breadcrumbs:null,env:null}),Vaultier.VaultsCreateView=Ember.View.extend({templateName:"Vault/VaultsCreate",layoutName:"Layout/LayoutStandard"});
Vaultier.VaultRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{model:function(e){return workspace=this.modelFor("Workspace"),model=this.get("store").find("Vault",e.vault).then(function(e){if(e.get("workspace")!=workspace.get("id")){var t=new Error;throw t.status=404,t}return e})},afterModel:function(e){var t=this.get("environment");t.set("vault",e),this.checkWorkspaceKeys()},serialize:function(e){return"string"==typeof e||"number"==typeof e?e:{vault:e.get("slug")}},actions:{deleteVault:function(e){Vaultier.confirmModal(this,"Are you sure?",function(){var t=e.deleteRecord().then(function(){$.notify("Your vault has been successfully deleted.","success"),this.transitionTo("Workspace.index")}.bind(this),function(){$.notify("Oooups! Something went wrong.","error")}.bind(this));ApplicationLoader.promise(t)}.bind(this))}}}),Vaultier.VaultIndexRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()&&this.transitionTo("Cards.index")}});
Vaultier.VaultEditRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},model:function(e,t){var r=this.modelFor("Vault");if(this.get("auth").checkPermissions(t,function(){return r.get("perms.update")}.bind(this),!0))return r},setupController:function(e,t){this._super(e,t);var r=this.get("environment");r.set("vault",t),e.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:r}).addHome().addWorkspace().addVault().addText("Edit vault"))},actions:{save:function(){var e=this.get("controller.content"),t=e.saveRecord().then(function(){$.notify("Your changes has been successfully saved.","success"),history.go(-1)}.bind(this)).catch(function(e){$.notify("Oooups! Something went wrong.","error"),this.get("errors").logError(e)}.bind(this));ApplicationLoader.promise(t)}}}),Vaultier.VaultEditController=Ember.ObjectController.extend({breadcrumbs:null}),Vaultier.VaultEditView=Ember.View.extend({templateName:"Vault/VaultEdit",layoutName:"Layout/LayoutStandard"});
Vaultier.VaultMemberIndexRoute=Vaultier.MemberIndexRoute.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},setupInviteData:function(){var e=this.modelFor("Vault");return{inviteObject:e}},setupBlocks:function(){return{workspace:!0,vault:!0}},setupBreadcrumbs:function(){return Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addWorkspace().addVault().addCollaboratorsIndex("Vault.memberIndex")},setupInviteRoute:function(){return{inviteRouteName:"Vault.memberInvite"}}}),Vaultier.VaultMemberIndexController=Vaultier.MemberIndexController.extend({}),Vaultier.VaultMemberInviteRoute=Vaultier.MemberInviteRoute.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},setupInviteData:function(){var e=this.modelFor("Vault"),t=this.modelFor("Workspace");return{inviteObject:e,inviteParams:{to_vault:e},inviteWorkspace:t}},setupBreadcrumbs:function(){return Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addWorkspace().addVault().addCollaboratorsIndex("Vault.memberIndex").addCollaboratorsInvite("Vault.memberInvite")}}),Vaultier.VaultMemberInviteController=Vaultier.MemberInviteController.extend({});
//# sourceMappingURL=data:application/json;base64,