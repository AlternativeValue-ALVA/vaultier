Ember.TEMPLATES["Settings/ChangeKey"]=Ember.Handlebars.template(function(e,s,n,a,t){function l(e,s){var a="";return s.buffer.push('\n\n    <p>\n        Your public and private keypair has been generated.\n        Please follow steps to finish procedure\n    </p>\n\n\n    <div class="bottom-15 top-30">\n        <h4>\n            <div class="label label-header">1</div>\n            Save private key key to your computer\n        </h4>\n    </div>\n\n    <div class="top-15 padding-15 panel panel-default">\n\n        <div class="col-md-5 col-md-offset-1">\n            <b>\n                Your private key\n            </b>\n            <br/>\n                <span class="help-block">\n                    Used instead of password. Please save the key.\n                </span>\n        </div>\n        <div class="col-md-4">\n            <button\n                '),s.buffer.push(d(n.action.call(e,"savePrivateKey",{hash:{target:"view"},hashTypes:{target:"ID"},hashContexts:{target:e},contexts:[e],types:["ID"],data:s}))),s.buffer.push("\n                "),s.buffer.push(d(n["bind-attr"].call(e,{hash:{"class":":btn view.privateKeySaved:btn-default:btn-primary"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:s}))),s.buffer.push('\n                    >\n                Save private key\n            </button>\n        </div>\n        <div class="clearfix"></div>\n    </div>\n\n    <div class="bottom-15  top-30">\n        <h4>\n            <div class="label label-header">2</div>\n            Send your public key to server\n        </h4>\n    </div>\n\n    <div class="top-15 padding-15 panel panel-default">\n\n        <div class="col-md-5 col-md-offset-1">\n            <b>\n                Your public key\n            </b>\n            <br/>\n                <span class="help-block">\n                    Will be sent to server and cyphers is going to be rebuilt\n                </span>\n        </div>\n        <div class="col-md-4">\n            <button\n                '),s.buffer.push(d(n["bind-attr"].call(e,{hash:{disabled:"view.publicButtonDisabled"},hashTypes:{disabled:"ID"},hashContexts:{disabled:e},contexts:[],types:[],data:s}))),s.buffer.push("\n                "),s.buffer.push(d(n["bind-attr"].call(e,{hash:{"class":":btn view.privateKeySaved:btn-primary:btn-default"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:s}))),s.buffer.push("\n                "),s.buffer.push(d(n.action.call(e,"savePublicKey",{hash:{target:"view"},hashTypes:{target:"ID"},hashContexts:{target:e},contexts:[e],types:["ID"],data:s}))),s.buffer.push('\n                    class="btn btn-default">\n                Submit public key\n            </button>\n        </div>\n        <div class="clearfix"></div>\n    </div>\n\n\n\n'),a}function i(e,s){s.buffer.push('\n    <div class=" text-center top-30">\n        <h4>Please wait while generating your keys...</h4>\n\n        <div class="vlt-preloader vlt-preloader-small">\n        </div>\n    </div>\n')}this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),t=t||{};var r,d=this.escapeExpression,p=this;r=n["if"].call(s,"view.keys",{hash:{},hashTypes:{},hashContexts:{},inverse:p.program(3,i,t),fn:p.program(1,l,t),contexts:[s],types:["ID"],data:t}),t.buffer.push(r||0===r?r:"")});
Ember.TEMPLATES["Settings/SettingsIndex"]=Ember.Handlebars.template(function(s,e,n,t,a){function i(s,e){var t,a,i,l="";return e.buffer.push("\n                            "),a=n["link-to"]||s&&s["link-to"],i={hash:{},hashTypes:{},hashContexts:{},inverse:c.noop,fn:c.program(2,r,e),contexts:[s],types:["STRING"],data:e},t=a?a.call(s,"Settings.personal",i):v.call(s,"link-to","Settings.personal",i),(t||0===t)&&e.buffer.push(t),e.buffer.push("\n                        "),l}function r(s,e){e.buffer.push("\n                                My profile\n                            ")}function l(s,e){var t,a,i,r="";return e.buffer.push("\n                            "),a=n["link-to"]||s&&s["link-to"],i={hash:{},hashTypes:{},hashContexts:{},inverse:c.noop,fn:c.program(5,h,e),contexts:[s],types:["STRING"],data:e},t=a?a.call(s,"Settings.keys",i):v.call(s,"link-to","Settings.keys",i),(t||0===t)&&e.buffer.push(t),e.buffer.push("\n                        "),r}function h(s,e){e.buffer.push("\n                                Private key\n                            ")}this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),a=a||{};var o,p,u,f="",c=this,v=n.helperMissing,b=this.escapeExpression;return a.buffer.push('<div class="container">\n    <div class="vlt-page vlt-page-plain">\n        <div class="row">\n            <div class="top-50">\n                <div class="col-md-3">\n                    <ul class="nav nav-pills nav-stacked">\n                        '),o=n.view.call(e,"view.TabView",{hash:{tab:"personal"},hashTypes:{tab:"STRING"},hashContexts:{tab:e},inverse:c.noop,fn:c.program(1,i,a),contexts:[e],types:["ID"],data:a}),(o||0===o)&&a.buffer.push(o),a.buffer.push("\n\n                        "),o=n.view.call(e,"view.TabView",{hash:{tab:"keys"},hashTypes:{tab:"STRING"},hashContexts:{tab:e},inverse:c.noop,fn:c.program(4,l,a),contexts:[e],types:["ID"],data:a}),(o||0===o)&&a.buffer.push(o),a.buffer.push('\n                    </ul>\n                </div>\n\n                <div class="col-md-9">\n                    '),a.buffer.push(b((p=n.outlet||e&&e.outlet,u={hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:a},p?p.call(e,"Settings",u):v.call(e,"outlet","Settings",u)))),a.buffer.push('\n                </div>\n            </div>\n        </div>\n        <div class="clearfix"></div>\n    </div>\n</div>\n\n\n'),f});
Ember.TEMPLATES["Settings/SettingsPersonal"]=Ember.Handlebars.template(function(e,s,a,n,l){this.compilerInfo=[4,">= 1.0.0"],a=this.merge(a,Ember.Handlebars.helpers),l=l||{};var t,r="",o=this.escapeExpression;return l.buffer.push('<div class="vlt-dialog">\n    <form>\n        <div class="vlt-dialog-content">\n            <div class="vlt-dialog-header">\n                <h2>Personal settings</h2>\n            </div>\n            <div class="vlt-dialog-body">\n\n                <div class="col-md-8 col-md-offset-2">\n\n                    <div class="form-group" '),l.buffer.push(o(a["bind-attr"].call(s,{hash:{"class":"content.errors.email:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[],types:[],data:l}))),l.buffer.push('>\n                        <label for="register-form-email" class="control-label">Email *</label>\n\n                        '),l.buffer.push(o(a.view.call(s,"Ember.TextField",{hash:{elementId:"register-form-email",valueBinding:"content.email","class":"form-control",placeholder:"Please enter valid email address"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING",placeholder:"STRING"},hashContexts:{elementId:s,valueBinding:s,"class":s,placeholder:s},contexts:[s],types:["ID"],data:l}))),l.buffer.push('\n                        <span class="error">\n                            '),t=a._triageMustache.call(s,"content.errors.email",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:l}),(t||0===t)&&l.buffer.push(t),l.buffer.push('\n                        </span>\n                    </div>\n\n                    <div class="form-group" '),l.buffer.push(o(a["bind-attr"].call(s,{hash:{"class":"content.errors.nickname:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},contexts:[],types:[],data:l}))),l.buffer.push('>\n                        <label for="register-form-nickname" class="control-label">Your nickname *</label>\n\n                        '),l.buffer.push(o(a.view.call(s,"Ember.TextField",{hash:{elementId:"register-form-nickname",valueBinding:"content.nickname","class":"form-control",placeholder:"Please enter your nickname"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING",placeholder:"STRING"},hashContexts:{elementId:s,valueBinding:s,"class":s,placeholder:s},contexts:[s],types:["ID"],data:l}))),l.buffer.push('\n                        <span class="error">\n                            '),t=a._triageMustache.call(s,"content.errors.nickname",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:l}),(t||0===t)&&l.buffer.push(t),l.buffer.push('\n                        </span>\n                    </div>\n\n                </div>\n\n                <div class="clearfix"></div>\n\n            </div>\n            <div class="vlt-dialog-footer">\n                <a '),l.buffer.push(o(a.action.call(s,"save",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:l}))),l.buffer.push(' class="btn btn-primary">Save changes</a>\n            </div>\n\n        </div>\n    </form>\n</div>\n\n'),r});
Ember.TEMPLATES["Settings/SettingsKeys"]=Ember.Handlebars.template(function(e,s,n,a,t){function r(e,s){var a="";return s.buffer.push('\n                    <div class="vlt-dialog-body">\n                        <div class="text-center">\n                            If you want to generate new private key.\n                            Click the generate button and\n                            you will go throught generate process\n                            <br/>\n                            <br/>\n                            <a '),s.buffer.push(c(n.action.call(e,"generate",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:s}))),s.buffer.push(' class="btn btn-primary">Generate new private key</a>\n                        </div>\n                    </div>\n                '),a}function h(e,s){var a,t,r="";return s.buffer.push("\n                    "),s.buffer.push(c((a=n["change-key"]||e&&e["change-key"],t={hash:{action:"save"},hashTypes:{action:"STRING"},hashContexts:{action:e},contexts:[],types:[],data:s},a?a.call(e,t):p.call(e,"change-key",t)))),s.buffer.push("\n                "),r}function i(e,s){var a="";return s.buffer.push('\n                    <div class="top-30 bottom-30">\n\n                        <div class=" alert alert-success">\n                            <b>\n                                Your private key has been successfully changed.\n                            </b>\n                        </div>\n\n                        <div class=" bottom-30 text-center top-30">\n                            <span class="help-block">\n                                From now use new private key generated. Please be sure you have saved your private key.\n                            </span>\n\n                            <a class="btn btn-default" '),s.buffer.push(c(n.action.call(e,"savePrivateKey",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:s}))),s.buffer.push('>Save your new private key</a>\n                        </div>\n\n                        <div class="clearfix"></div>\n                    </div>\n\n                '),a}this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),t=t||{};var o,l="",c=this.escapeExpression,p=n.helperMissing,u=this;return t.buffer.push('<div class="vlt-dialog">\n    <div class="vlt-dialog-content">\n        <div class="vlt-dialog-header">\n            <h2>Private key</h2>\n        </div>\n        <div class="vlt-dialog-body">\n\n            <div class="col-md-8 col-md-offset-2">\n                '),o=n["if"].call(s,"stepInfo",{hash:{},hashTypes:{},hashContexts:{},inverse:u.noop,fn:u.program(1,r,t),contexts:[s],types:["ID"],data:t}),(o||0===o)&&t.buffer.push(o),t.buffer.push("\n\n                "),o=n["if"].call(s,"stepKeys",{hash:{},hashTypes:{},hashContexts:{},inverse:u.noop,fn:u.program(3,h,t),contexts:[s],types:["ID"],data:t}),(o||0===o)&&t.buffer.push(o),t.buffer.push("\n\n                "),o=n["if"].call(s,"stepSuccess",{hash:{},hashTypes:{},hashContexts:{},inverse:u.noop,fn:u.program(5,i,t),contexts:[s],types:["ID"],data:t}),(o||0===o)&&t.buffer.push(o),t.buffer.push('\n\n\n            </div>\n            <div class="clearfix"></div>\n        </div>\n    </div>\n</div>\n'),l});
//# sourceMappingURL=data:application/json;base64,