Vaultier.AuthLoginController=Ember.Controller.extend({latestUser:null,rememberOptions:[{ttl:0,text:"Do not remember"},{ttl:864e5,text:"Remember for one day"},{ttl:6048e5,text:"Remember for one week"},{ttl:26784e5,text:"Remember for one month"},{ttl:31536e6,text:"Remember for one year"}]}),Vaultier.AuthLoginView=Ember.View.extend({templateName:"Auth/AuthLogin",layoutName:"Layout/LayoutStandard",didInsertElement:function(){var e=$(this.get("element")),t=e.find(".vlt-login-key"),r=this.controller;t.on("change",function(e){var t=FileAPI.getFiles(e);FileAPI.readAsText(t[0],function(e){"load"==e.type&&(r.set("privateKey",e.result),r.set("filename",t[0].name))})})}}),Vaultier.AuthLoginRoute=Ember.Route.extend({setupController:function(e){if(this.get("config.FT_FEATURES.dev_shared_key")){var t=this.get("auth"),r=t.generateKeys(),i=r.privateKey;e.set("email",this.get("config.FT_FEATURES.dev_email")),e.set("privateKey",i)}this.loadRemebered()},loadRemebered:function(){var e=this.get("auth"),t=e.getRememberedUser(),r=this.get("controller");t?(r.set("latestUser",!0),r.set("email",t.email),r.set("privateKey",t.privateKey),r.set("ttl",t.ttl)):r.set("latestUser",!1)},actions:{switchUser:function(){var e=this.get("auth");e.rememberUser(null),this.loadRemebered()},loginUser:function(){ApplicationLoader.showLoader();{var e=this.get("controller"),t=e.get("email"),r=e.get("ttl"),i=e.get("privateKey"),o=this.get("auth");o.login(t,i,!0).then(function(){o.rememberUser(t,i,r),$.notify("You have been successfully logged in.","success")}.bind(this)).catch(function(){o.rememberUser(null),this.loadRemebered(),ApplicationLoader.hideLoader(),$.notify("We are sorry, but your login failed","error")}.bind(this))}}}});
"use strict";Vaultier.LostKey=RL.Model.extend(Vaultier.CreatedUpdatedMixin,{email:RL.attr("string"),recover_type:RL.attr("integer"),hash:RL.attr("string"),public_key:RL.attr("key"),memberships:RL.hasMany("Vaultier.LostKeyMemberships"),recoverType:new Utils.ConstantList({REBUILD:{value:1,text:"REBUILD"},DISABLE:{value:2,text:"DISABLE"}})}),Vaultier.LostKeyMemberships=RL.Model.extend({workspace_name:RL.attr("string"),is_recoverable:RL.attr("boolean")});
"use strict";Vaultier.AuthLostKeyIndexRoute=Ember.Route.extend({model:function(){return this.get("store").createRecord("LostKey")},setupController:function(e,t){e.set("content",t),e.set("error",!1)},actions:{sendRecoveryKeyRequest:function(){var e=this.get("controller"),t=e.get("content"),o=t.saveRecord().then(function(){this.transitionTo("AuthLostKey.success")}.bind(this)).catch(function(){e.set("error",!0),$.notify("An error just happened please try again","error")}.bind(this));ApplicationLoader.promise(o)}}}),Vaultier.AuthLostKeyIndexController=Ember.Controller.extend({email:null,error:!1}),Vaultier.AuthLostKeyIndexView=Ember.View.extend({templateName:"Auth/AuthLostKeyIndex",layoutName:"Layout/LayoutStandard"}),Vaultier.AuthLostKeySuccessView=Ember.View.extend({templateName:"Auth/AuthLostKeySuccess",layoutName:"Layout/LayoutStandard"});
var RegisterProps=Ember.Object.extend({nextButtonTitle:!1,nextButtonDisable:!1,keysReady:!1,keys:null,loginButtonHidden:!1,transitionAfterRegister:!1,defaultWorkspace:!1,defaultVault:!1});RegisterProps.reopenClass(Utils.Singleton);var BaseRegisterController=Ember.Controller.extend({props:RegisterProps.current()});Vaultier.AuthRegisterView=Ember.View.extend({templateName:"Auth/AuthRegister",layoutName:"Layout/LayoutStandard",TabView:Ember.View.extend({classNameBindings:"isActive:active".w(),tagName:"li",isActive:function(){var e=this.get("tab"),t=this.get("parentView.controller.controllers.application.currentPath"),r=t.split(".")[t.split(".").length-1];return e==r}.property("parentView.controller.controllers.application.currentPath")})}),Vaultier.AuthRegisterController=BaseRegisterController.extend({needs:["application"]}),Vaultier.AuthRegisterRoute=Ember.Route.extend({beforeModel:function(e){e.router.replaceWith(this.get("auth").get("isAuthenticated")?"AuthRegister.sum":"AuthRegister.before")},model:function(){var e=this.get("auth");return e.get("isAuthenticated")?e.get("user"):this.get("store").createRecord("User")},deactivate:function(){var e=this.modelFor(e);e&&this.get("store").unloadRecord(e)}}),Vaultier.AuthRegisterIndexRoute=Ember.Route.extend({beforeModel:function(e){e.router.replaceWith(this.get("auth").get("isAuthenticated")?"AuthRegister.sum":"AuthRegister.before")}}),Vaultier.AuthRegisterBeforeRoute=Ember.Route.extend({step:"AuthRegisterBefore",beforeModel:function(e){this.get("auth").get("isAuthenticated")&&e.router.replaceWith("AuthRegister.sum")},setupController:function(e){e.set("props.loginButtonHidden",!1),e.set("props.nextButtonDisabled",!1),e.set("props.nextButtonTitle",null)},renderTemplate:function(){this.render(this.step,{outlet:"AuthRegister"})},actions:{next:function(){this.transitionTo("AuthRegister.keys")}}}),Vaultier.AuthRegisterBeforeView=Ember.View.extend({templateName:"Auth/AuthRegisterBefore"}),Vaultier.AuthRegisterBeforeController=BaseRegisterController.extend(),Vaultier.AuthRegisterKeysController=BaseRegisterController.extend(),Vaultier.AuthRegisterKeysRoute=Ember.Route.extend({step:"AuthRegisterKeys",beforeModel:function(e){this.get("auth").get("isAuthenticated")&&e.router.replaceWith("AuthRegister.sum")},renderTemplate:function(){this.render(this.step,{outlet:"AuthRegister"})},actions:{next:function(){this.transitionTo("AuthRegister.creds")},downloadKey:function(){var e=this.get("controller"),t=new Blob([e.get("props.keys.privateKey")],{type:"text/plain;charset=utf-8"});saveAs(t,"vaultier.key"),e.set("props.nextButtonDisabled",!1)}},setupController:function(e){if(e.set("props.loginButtonHidden",!0),e.set("props.nextButtonTitle",null),!e.get("props.keysReady")){e.set("props.nextButtonDisabled",!0);var t=this.get("auth");t.generateKeys(function(t){e.set("props.keys",t),e.set("props.keysReady",!0)}.bind(this))}}}),Vaultier.AuthRegisterKeysView=Ember.View.extend({templateName:"Auth/AuthRegisterKeys"}),Vaultier.AuthRegisterCredsRoute=Ember.Route.extend({step:"AuthRegisterCreds",newuserinit:null,beforeModel:function(e){this.get("auth").get("isAuthenticated")&&e.router.replaceWith("AuthRegister.sum")},renderTemplate:function(){this.render(this.step,{outlet:"AuthRegister"})},setupController:function(e){this._super.apply(this,arguments),e.set("props.loginButtonHidden",!0),e.set("props.nextButtonDisabled",!1),e.set("props.nextButtonTitle","Submit your credentials");var t=this.modelFor("AuthRegister");e.set("content",t),e.get("props.keysReady")||this.transitionTo("AuthRegister")},actions:{next:function(){var e=this.get("auth"),t=this.get("controller"),r=t.get("content"),i=t.get("props.keys");r.set("public_key",i.publicKey),t.set("props.nextButtonDisabled",!0);var s=r.saveRecord().then(function(t){return console.log(t),e.login(r.get("email"),i.privateKey,!1).then(function(){e.rememberUser(null),this.transitionTo("AuthRegister.sum")}.bind(this))}.bind(this)).catch(function(e){return console.log(e),t.set("errors",Ember.Object.create(e.errors)),t.set("props.nextButtonDisabled",!1),$.notify("We are sorry, but your account cannot be created","error"),Ember.RSVP.reject(e)}.bind(this)).then(function(){return this.get("newuserinit").initializeUser()}.bind(this)).then(function(e){t.get("props").setProperties(e)}.bind(this));ApplicationLoader.promise(s)}}}),Vaultier.AuthRegisterCredsController=BaseRegisterController.extend({init:function(){this._super(arguments),this.set("props.nextButtonTitle","Create your account")}}),Vaultier.AuthRegisterCredsView=Ember.View.extend({templateName:"Auth/AuthRegisterCreds"}),Vaultier.AuthRegisterSumRoute=Ember.Route.extend({step:"AuthRegisterSum",renderTemplate:function(){this.render(this.step,{outlet:"AuthRegister"})},setupController:function(e){var t=this.modelFor("AuthRegister");e.set("content",t),e.set("props.loginButtonHidden",!0),e.set("props.nextButtonDisabled",!1),e.set("props.nextButtonTitle","Start using vaultier")},actions:{downloadKey:function(){var e=new Blob([this.get("auth.privateKey")],{type:"text/plain;charset=utf-8"});saveAs(e,"vaultier.key")},next:function(){var e=this.get("controller.props.transitionAfterRegister");e?e():this.transitionTo("index")}}}),Vaultier.AuthRegisterSumController=BaseRegisterController.extend({auth:null}),Vaultier.AuthRegisterSumView=Ember.View.extend({templateName:"Auth/AuthRegisterSum"});
"use strict";Vaultier.AuthLostKeyRecoveryRoute=Ember.Route.extend({model:function(t){var e=this.get("store").find("LostKey",{id:t.id,hash:t.hash}).then(function(e){return e.set("hash",t.hash),e});return e},afterModel:function(){this.transitionTo("AuthLostKeyRecovery.reset")}});
"use strict";Vaultier.AuthLostKeyRecoveryResetRoute=Ember.Route.extend({actions:{rebuildKey:function(){Vaultier.confirmModal(this,"This action can not be undone. Are you sure?",function(){this.transitionTo("AuthLostKeyRecovery.rebuild")}.bind(this))},disableKey:function(){var e=this.modelFor("AuthLostKeyRecoveryReset");Vaultier.confirmModal(this,"This action can not be undone. Are you sure that you want to continue?",function(){e.set("public_key","-"),e.set("recover_type",Vaultier.LostKey.proto().recoverType.DISABLE.value);var t=e.saveRecord().then(function(){this.transitionTo("AuthLostKeyRecovery.disable")}.bind(this)).catch(function(e){$.notify("How embarrassing! There was an error, please try again later","error"),this.get("errors").consoleError(e)}.bind(this));ApplicationLoader.promise(t)}.bind(this))}}}),Vaultier.AuthLostKeyRecoveryResetController=Ember.Controller.extend({needs:["application"],memberships:[],created_by:null,public_key:null}),Vaultier.AuthLostKeyRecoveryResetView=Ember.View.extend({templateName:"Auth/AuthLostKeyRecoveryReset",layoutName:"Layout/LayoutStandard"});
"use strict";Vaultier.AuthLostKeyRecoveryRebuildRoute=Ember.Route.extend({actions:{save:function(e,t){this.set("controller.keys",e);var o=this.modelFor("AuthLostKeyRecoveryRebuild");o.set("public_key",e.publicKey),o.set("recover_type",Vaultier.LostKey.proto().recoverType.REBUILD.value);var r=o.saveRecord().then(function(t){this.get("auth").login(t.created_by.email,e.privateKey,!1),$.notify("You have successfully rebuild your new private key","success"),this.transitionTo("AuthLostKeyRecovery.success")}.bind(this)).catch(function(e){$.notify("There was an error during update of your key, please try again later","error"),this.get("errors").consoleError(e)}.bind(this));ApplicationLoader.promise(r),t.promise=r}}}),Vaultier.AuthLostKeyRecoveryRebuildController=Ember.Controller.extend({needs:["AuthLostKeyRecovery"],keys:null}),Vaultier.AuthLostKeyRecoveryRebuildView=Ember.View.extend({templateName:"Auth/AuthLostKeyRecoveryRebuild",layoutName:"Layout/LayoutStandard"}),Vaultier.AuthLostKeyRecoverySuccessView=Ember.View.extend({templateName:"Auth/AuthLostKeyRecoverySuccess",layoutName:"Layout/LayoutStandard"});
"use strict";Vaultier.AuthLostKeyRecoveryDisableRoute=Ember.Route.extend({actions:{disable:function(){var e=this.modelFor("AuthLostKeyRecoveryDisable");e.set("public_key","-"),e.set("recover_type",Vaultier.LostKey.proto().recoverType.DISABLE.value);var t=e.saveRecord().then(function(){this.transitionTo("AuthRegister")}.bind(this)).catch(function(e){$.notify("How embarrassing! There was an error during update of your key, please try again later","error"),this.get("errors").consoleError(e)}.bind(this));ApplicationLoader.promise(t)}}}),Vaultier.AuthLostKeyRecoveryDisableController=Ember.Controller.extend({needs:["AuthLostKeyRecovery"]}),Vaultier.AuthLostKeyRecoveryDisableView=Ember.View.extend({templateName:"Auth/AuthLostKeyRecoveryDisable",layoutName:"Layout/LayoutStandard"});
//# sourceMappingURL=data:application/json;base64,