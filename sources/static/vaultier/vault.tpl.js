Ember.TEMPLATES["Vault/VaultsIndex"]=Ember.Handlebars.template(function(e,s,n,a,t){function r(e,s){var a,t="";return s.buffer.push('\n                            <div class="btn-group">\n                                <button type="button" class="btn btn-default dropdown-toggle"\n                                        data-toggle="dropdown">\n                                    <span class="glyphicon glyphicon-cog"></span>\n                                    Manage\n                                </button>\n                                <ul class="dropdown-menu caret-left">\n                                    '),a=n["if"].call(e,"workspace.perms.update",{hash:{},hashTypes:{},hashContexts:{},inverse:W.noop,fn:W.program(2,o,s),contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n\n                                    "),a=n["if"].call(e,"workspace.perms.invite",{hash:{},hashTypes:{},hashContexts:{},inverse:W.noop,fn:W.program(5,l,s),contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n\n                                    "),a=n["if"].call(e,"workspace.perms.create",{hash:{},hashTypes:{},hashContexts:{},inverse:W.noop,fn:W.program(8,c,s),contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n\n                                </ul>\n                            </div>\n                        "),t}function o(e,s){var a,t,r,o="";return s.buffer.push("\n\n                                        <li>\n                                            "),t=n["link-to"]||e&&e["link-to"],r={hash:{},hashTypes:{},hashContexts:{},inverse:W.noop,fn:W.program(3,p,s),contexts:[e,e],types:["STRING","ID"],data:s},a=t?t.call(e,"Workspace.edit","workspace",r):E.call(e,"link-to","Workspace.edit","workspace",r),(a||0===a)&&s.buffer.push(a),s.buffer.push('\n                                        </li>\n\n                                        <li>\n                                            <a href="#" '),s.buffer.push(M(n.action.call(e,"deleteWorkspace","workspace",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e],types:["ID","ID"],data:s}))),s.buffer.push(" >Delete workspace</a>\n                                        </li>\n                                    "),o}function p(e,s){s.buffer.push("\n                                                Edit workspace\n                                            ")}function l(e,s){var a,t,r,o="";return s.buffer.push("\n                                        <li>\n                                            "),t=n["link-to"]||e&&e["link-to"],r={hash:{},hashTypes:{},hashContexts:{},inverse:W.noop,fn:W.program(6,h,s),contexts:[e,e],types:["STRING","ID"],data:s},a=t?t.call(e,"Workspace.memberIndex","workspace",r):E.call(e,"link-to","Workspace.memberIndex","workspace",r),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                                        </li>\n                                    "),o}function h(e,s){s.buffer.push("\n                                                Share\n                                            ")}function c(e,s){var a,t,r,o="";return s.buffer.push("\n                                        <li>\n                                            "),t=n["link-to"]||e&&e["link-to"],r={hash:{},hashTypes:{},hashContexts:{},inverse:W.noop,fn:W.program(9,u,s),contexts:[e],types:["STRING"],data:s},a=t?t.call(e,"Vaults.create",r):E.call(e,"link-to","Vaults.create",r),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                                        </li>\n                                    "),o}function u(e,s){s.buffer.push("\n                                                Add vault\n                                            ")}function i(e,s){var a,t="";return s.buffer.push("\n            "),a=n.each.call(e,{hash:{},hashTypes:{},hashContexts:{},inverse:W.noop,fn:W.program(12,f,s),contexts:[],types:[],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n        "),t}function f(e,s){var a="";return s.buffer.push("\n                "),s.buffer.push(M(n.view.call(e,"Vaultier.VaultIndexItemView",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:s}))),s.buffer.push("\n            "),a}function d(e,s){var a,t="";return s.buffer.push('\n            <div class="top-50">\n                <div class="jumbotron vlt-bigbox vlt-vault">\n                    <div class="vlt-header">\n                        <div class="vlt-icon">\n\n                        </div>\n                        <div class="vlt-title">\n                            <h1>You do not have any vault yet</h1>\n                        </div>\n                    </div>\n\n\n                    '),a=n["if"].call(e,"workspace.perms.create",{hash:{},hashTypes:{},hashContexts:{},inverse:W.noop,fn:W.program(15,v,s),contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n\n                </div>\n            </div>\n        "),t}function v(e,s){var a,t,r,o="";return s.buffer.push('\n\n                        <p>\n                            Vaults are used to organize your secrets into cards in vault.\n                            You can also collaborate with other team members at the vault\n                        </p>\n\n                        <p class="top-30">\n                            '),t=n["link-to"]||e&&e["link-to"],r={hash:{"class":"btn btn-lg btn-primary"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},inverse:W.noop,fn:W.program(16,b,s),contexts:[e,e],types:["STRING","ID"],data:s},a=t?t.call(e,"Vaults.create","workspace",r):E.call(e,"link-to","Vaults.create","workspace",r),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                        </p>\n                    "),o}function b(e,s){s.buffer.push('\n                                <span class="glyphicon glyphicon-plus"></span>\n                                Add vault\n                            ')}function m(e,s){var a,t="";return s.buffer.push("\n                    "),a=n._triageMustache.call(e,"workspace.description",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                "),t}function g(e,s){s.buffer.push("\n                    No description given\n                ")}function k(e,s){var a,t,r,o="";return s.buffer.push('\n                        <div\n                                class="vlt-button-wrapper"\n                                data-toggle="tooltip"\n                                title=\n                                        "\n                                    Vaults are used to organize your secrets into cards in vault.\n                                    You can also collaborate with other team members at the vault\n                                    "\n                                data-placement="bottom"\n                                >\n                            '),t=n["link-to"]||e&&e["link-to"],r={hash:{"class":"btn btn-primary"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},inverse:W.noop,fn:W.program(16,b,s),contexts:[e,e],types:["STRING","ID"],data:s},a=t?t.call(e,"Vaults.create","workspace.slug",r):E.call(e,"link-to","Vaults.create","workspace.slug",r),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                        </div>\n                    "),o}function y(e,s){var a,t="";return s.buffer.push('\n                        <div class="btn-group">\n                            <button type="button" class="btn btn-default dropdown-toggle"\n                                    data-toggle="dropdown">\n                                <span class="glyphicon glyphicon-cog"></span>\n                                Properties\n                            </button>\n                            <ul class="dropdown-menu caret-left">\n\n                                '),a=n["if"].call(e,"workspace.perms.update",{hash:{},hashTypes:{},hashContexts:{},inverse:W.noop,fn:W.program(25,x,s),contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n\n                                "),a=n["if"].call(e,"workspace.perms.delete",{hash:{},hashTypes:{},hashContexts:{},inverse:W.noop,fn:W.program(28,I,s),contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n\n                            </ul>\n                        </div>\n                    "),t}function x(e,s){var a,t,r,o="";return s.buffer.push("\n                                    <li>\n                                        "),t=n["link-to"]||e&&e["link-to"],r={hash:{},hashTypes:{},hashContexts:{},inverse:W.noop,fn:W.program(26,w,s),contexts:[e,e],types:["STRING","ID"],data:s},a=t?t.call(e,"Workspace.edit","workspace.slug",r):E.call(e,"link-to","Workspace.edit","workspace.slug",r),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                                    </li>\n                                "),o}function w(e,s){s.buffer.push("\n                                            Edit workspace\n                                        ")}function I(e,s){var a="";return s.buffer.push('\n                                    <li>\n                                        <a href="#" '),s.buffer.push(M(n.action.call(e,"deleteWorkspace","workspace",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e],types:["ID","ID"],data:s}))),s.buffer.push(">Delete workspace</a>\n                                    </li>\n                                "),a}function T(e,s){var a,t,r,o="";return s.buffer.push('\n                        <div\n                                class="vlt-button-wrapper"\n                                data-toggle="tooltip"\n                                title=\n                                        "\n                             Invite new team members to collaborate over this workspace\n                             or  grant access permission to current team members\n                             "\n                                data-placement="bottom"\n                                >\n                            '),t=n["link-to"]||e&&e["link-to"],r={hash:{"class":"btn btn-default"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},inverse:W.noop,fn:W.program(31,D,s),contexts:[e,e],types:["STRING","ID"],data:s},a=t?t.call(e,"Workspace.memberInvite","workspace.slug",r):E.call(e,"link-to","Workspace.memberInvite","workspace.slug",r),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                        </div>\n                    "),o}function D(e,s){s.buffer.push('\n                                <span class="glyphicon glyphicon-plus"></span>\n                                Invite\n                            ')}function C(e,s){var a,t,r,o="";return s.buffer.push('\n                        <div\n                                class="vlt-button-wrapper"\n                                data-toggle="tooltip"\n                                title=\n                                        "\n                             Invite new team members to collaborate over this workspace\n                             or  grant access permission to current team members\n                             "\n                                data-placement="bottom"\n                                >\n                            '),t=n["link-to"]||e&&e["link-to"],r={hash:{"class":"btn btn-default"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},inverse:W.noop,fn:W.program(34,S,s),contexts:[e,e],types:["STRING","ID"],data:s},a=t?t.call(e,"Workspace.memberIndex","workspace.slug",r):E.call(e,"link-to","Workspace.memberIndex","workspace.slug",r),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                        </div>\n                    "),o}function S(e,s){s.buffer.push('\n                                <span class="glyphicon glyphicon-user"></span>\n                                Team\n                            ')}this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),t=t||{};var N,G,R,V="",W=this,E=n.helperMissing,M=this.escapeExpression;return t.buffer.push('<div class="container-full">\n<div class="vlt-page vlt-page-with-sidebar">\n<div class="vlt-page-content">\n    <div class="col-md-12">\n\n            <div class="vlt-page-content-responsive-header">\n                <div class="row-fluid">\n                    <div class="col-xs-3">\n                        '),G=n.exp||s&&s.exp,R={hash:{},hashTypes:{},hashContexts:{},inverse:W.noop,fn:W.program(1,r,t),contexts:[s],types:["STRING"],data:t},N=G?G.call(s,"( workspace.perms.update || workspace.perms.delete || workspace.perms.create || workspace.perms.invite )",R):E.call(s,"exp","( workspace.perms.update || workspace.perms.delete || workspace.perms.create || workspace.perms.invite )",R),(N||0===N)&&t.buffer.push(N),t.buffer.push('\n                    </div>\n\n                    <div class="col-xs-9">\n                        <h2>Workspace: '),N=n._triageMustache.call(s,"workspace.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:t}),(N||0===N)&&t.buffer.push(N),t.buffer.push(' </h2>\n                    </div>\n\n                    <div class="clearfix"></div>\n                </div>\n            </div>\n\n\n        '),N=n["if"].call(s,"length",{hash:{},hashTypes:{},hashContexts:{},inverse:W.program(14,d,t),fn:W.program(11,i,t),contexts:[s],types:["ID"],data:t}),(N||0===N)&&t.buffer.push(N),t.buffer.push('\n\n    </div>\n</div>\n\n<div class="vlt-page-sidebar">\n    <div class="vlt-sidebar-block">\n        <div class="vlt-sidebar-block-heading">\n            <div class="vlt-header">\n                <img src="/static/vaultier/images/icon-workspace-grey.png" class="vlt-icon">\n\n                <h3 class="vlt-title">\n                    '),N=n._triageMustache.call(s,"workspace.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:t}),(N||0===N)&&t.buffer.push(N),t.buffer.push('\n                </h3>\n            </div>\n            <div class="vlt-body">\n                '),N=n["if"].call(s,"workspace.description",{hash:{},hashTypes:{},hashContexts:{},inverse:W.program(20,g,t),fn:W.program(18,m,t),contexts:[s],types:["ID"],data:t}),(N||0===N)&&t.buffer.push(N),t.buffer.push('\n            </div>\n            <div class="vlt-controls">\n                <div>\n\n                    '),N=n["if"].call(s,"workspace.perms.create",{hash:{},hashTypes:{},hashContexts:{},inverse:W.noop,fn:W.program(22,k,t),contexts:[s],types:["ID"],data:t}),(N||0===N)&&t.buffer.push(N),t.buffer.push("\n\n                    "),G=n.exp||s&&s.exp,R={hash:{},hashTypes:{},hashContexts:{},inverse:W.noop,fn:W.program(24,y,t),contexts:[s],types:["STRING"],data:t},N=G?G.call(s,"( workspace.perms.update || workspace.perms.delete)",R):E.call(s,"exp","( workspace.perms.update || workspace.perms.delete)",R),(N||0===N)&&t.buffer.push(N),t.buffer.push('\n\n\n                </div>\n\n                <div class="clearfix"></div>\n            </div>\n        </div>\n\n        <div class="vlt-sidebar-block-sharing">\n            <div class="vlt-header">\n                <img src="/static/vaultier/images/icon-team-grey.png" class="vlt-icon">\n\n                <h3 class="vlt-title">\n                    Sharing with\n                </h3>\n            </div>\n            <div class="vlt-body">\n                '),t.buffer.push(M((G=n["member-box"]||s&&s["member-box"],R={hash:{roles:"memberships",user:"auth.user"},hashTypes:{roles:"ID",user:"ID"},hashContexts:{roles:s,user:s},contexts:[],types:[],data:t},G?G.call(s,R):E.call(s,"member-box",R)))),t.buffer.push('\n            </div>\n            <div class="vlt-controls">\n                <div>\n\n                    '),N=n["if"].call(s,"workspace.perms.invite",{hash:{},hashTypes:{},hashContexts:{},inverse:W.noop,fn:W.program(30,T,t),contexts:[s],types:["ID"],data:t}),(N||0===N)&&t.buffer.push(N),t.buffer.push("\n\n                    "),N=n["if"].call(s,"workspace.perms.invite",{hash:{},hashTypes:{},hashContexts:{},inverse:W.noop,fn:W.program(33,C,t),contexts:[s],types:["ID"],data:t}),(N||0===N)&&t.buffer.push(N),t.buffer.push("\n\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n</div>\n\n</div>\n\n"),V});
Ember.TEMPLATES["Vault/VaultsIndexItem"]=Ember.Handlebars.template(function(t,e,s,a,n){function i(t,e){var a,n,i,l="";return e.buffer.push('\n        <div class="vlt-visual">\n        </div>\n        <div class="vlt-content">\n            <div class="vlt-header">\n                <h4>'),e.buffer.push(f((n=s["dot-dot-dot"]||t&&t["dot-dot-dot"],i={hash:{value:"name",height:60},hashTypes:{value:"ID",height:"INTEGER"},hashContexts:{value:t,height:t},contexts:[],types:[],data:e},n?n.call(t,i):u.call(t,"dot-dot-dot",i)))),e.buffer.push('</h4>\n\n                <!--\n                <div class="vlt-icon">\n                    <img src="/static/icons/vault/ACROBITS.png">\n                </div>\n                -->\n            </div>\n            <div class="vlt-description">\n                '),a=s["if"].call(t,"description",{hash:{},hashTypes:{},hashContexts:{},inverse:c.program(4,r,e),fn:c.program(2,h,e),contexts:[t],types:["ID"],data:e}),(a||0===a)&&e.buffer.push(a),e.buffer.push('\n            </div>\n            <div class="vlt-footer">\n                '),e.buffer.push(f((n=s.printUser||t&&t.printUser,i={hash:{ellipsis:12,prefix:"Created by:"},hashTypes:{ellipsis:"INTEGER",prefix:"STRING"},hashContexts:{ellipsis:t,prefix:t},contexts:[t],types:["ID"],data:e},n?n.call(t,"created_by",i):u.call(t,"printUser","created_by",i)))),e.buffer.push("\n                "),e.buffer.push(f((n=s.printAgo||t&&t.printAgo,i={hash:{prefix:"Latest modification at:"},hashTypes:{prefix:"STRING"},hashContexts:{prefix:t},contexts:[t],types:["ID"],data:e},n?n.call(t,"updated_at",i):u.call(t,"printAgo","updated_at",i)))),e.buffer.push("\n            </div>\n        </div>\n    "),l}function h(t,e){var a,n,i="";return e.buffer.push("\n                    "),e.buffer.push(f((a=s["dot-dot-dot"]||t&&t["dot-dot-dot"],n={hash:{value:"description",height:80},hashTypes:{value:"ID",height:"INTEGER"},hashContexts:{value:t,height:t},contexts:[],types:[],data:e},a?a.call(t,n):u.call(t,"dot-dot-dot",n)))),e.buffer.push("\n                "),i}function r(t,e){e.buffer.push("\n                    No description given\n                ")}this.compilerInfo=[4,">= 1.0.0"],s=this.merge(s,Ember.Handlebars.helpers),n=n||{};var l,p,o,d="",u=s.helperMissing,f=this.escapeExpression,c=this;return n.buffer.push('<div class="vlt-vault-item pull-left">\n    '),p=s["link-to"]||e&&e["link-to"],o={hash:{},hashTypes:{},hashContexts:{},inverse:c.noop,fn:c.program(1,i,n),contexts:[e,e],types:["STRING","ID"],data:n},l=p?p.call(e,"Vault.index","",o):u.call(e,"link-to","Vault.index","",o),(l||0===l)&&n.buffer.push(l),n.buffer.push("\n</div>\n\n"),d});
Ember.TEMPLATES["Vault/VaultsCreate"]=Ember.Handlebars.template(function(s,e,a,n,t){this.compilerInfo=[4,">= 1.0.0"],a=this.merge(a,Ember.Handlebars.helpers),t=t||{};var l,r,o,h="",i=this.escapeExpression,c=a.helperMissing;return t.buffer.push('<div class="container">\n    <div class="vlt-page vlt-page-plain">\n        <div class="vlt-dialog col-md-8 col-md-offset-2 top-50">\n            <form>\n                <div class="vlt-dialog-content">\n                    <div class="vlt-dialog-header">\n                        <h2>Create new vault</h2>\n                    </div>\n                    <div class="vlt-dialog-body">\n\n                        <div class="col-md-7">\n\n                            <div class="form-group" '),t.buffer.push(i(a["bind-attr"].call(e,{hash:{"class":"content.errors.name:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:t}))),t.buffer.push('>\n                                <label for="workspace-name">Name</label>\n                                '),t.buffer.push(i(a.view.call(e,"Em.TextField",{hash:{elementId:"workspace-name",valueBinding:"content.name","class":"form-control"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING"},hashContexts:{elementId:e,valueBinding:e,"class":e},contexts:[e],types:["ID"],data:t}))),t.buffer.push('\n                                <span class="error">\n                                    '),l=a._triageMustache.call(e,"content.errors.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push('\n                                </span>\n                            </div>\n\n                            <div class="form-group" '),t.buffer.push(i(a["bind-attr"].call(e,{hash:{"class":"content.errors.description:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:t}))),t.buffer.push('>\n                                <label for="workspace-description">Description</label>\n\n                                '),t.buffer.push(i(a.view.call(e,"Em.TextArea",{hash:{elementId:"workspace-description",valueBinding:"content.description","class":"form-control",rows:5},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING",rows:"INTEGER"},hashContexts:{elementId:e,valueBinding:e,"class":e,rows:e},contexts:[e],types:["ID"],data:t}))),t.buffer.push('\n                                <span class="error">\n                                    '),l=a._triageMustache.call(e,"content.errors.description",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push('\n                                </span>\n                            </div>\n                        </div>\n\n                        <div class="col-md-5 bottom-15">\n\n                            <div class="callout callout-info">\n                                <h4>Vault will be shared with:</h4>\n\n                                '),t.buffer.push(i((r=a["member-box"]||e&&e["member-box"],o={hash:{roles:"memberships",user:"auth.user"},hashTypes:{roles:"ID",user:"ID"},hashContexts:{roles:e,user:e},contexts:[],types:[],data:t},r?r.call(e,o):c.call(e,"member-box",o)))),t.buffer.push('\n                            </div>\n                        </div>\n\n\n                        <div class="clearfix"></div>\n\n\n                    </div>\n                    <div class="vlt-dialog-footer">\n                        <a href="javascript:window.history.go(-1)" class="btn btn-default btn-sm">\n                            <span class="glyphicon glyphicon-chevron-left"></span>\n                            Back\n                        </a>\n                        <button '),t.buffer.push(i(a.action.call(e,"save",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}))),t.buffer.push(" "),t.buffer.push(i(a["bind-attr"].call(e,{hash:{disabled:"saveDisabled"},hashTypes:{disabled:"ID"},hashContexts:{disabled:e},contexts:[],types:[],data:t}))),t.buffer.push(' class="btn btn-primary">\n                            <span class="glyphicon glyphicon-ok"></span>\n                            Create new vault\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n        <div class="clearfix"></div>\n    </div>\n</div>\n\n\n\n\n\n\n'),h});
Ember.TEMPLATES["Vault/VaultEdit"]=Ember.Handlebars.template(function(s,a,e,n,r){this.compilerInfo=[4,">= 1.0.0"],e=this.merge(e,Ember.Handlebars.helpers),r=r||{};var t,l="",i=this.escapeExpression;return r.buffer.push('<div class="container">\r\n    <div class="vlt-page vlt-page-plain">\r\n        <div class="vlt-dialog col-md-8 col-md-offset-2 top-50">\r\n            <form>\r\n                <div class="vlt-dialog-content">\r\n                    <div class="vlt-dialog-header">\r\n                        <h2>Edit vault</h2>\r\n                    </div>\r\n\r\n                    <div class="vlt-dialog-body">\r\n                        <div class="col-md-8 col-md-offset-2">\r\n\r\n                            <div class="form-group"  '),r.buffer.push(i(e["bind-attr"].call(a,{hash:{"class":"content.errors.name:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":a},contexts:[],types:[],data:r}))),r.buffer.push('>\r\n                                <label for="vault-name">Name</label>\r\n                                '),r.buffer.push(i(e.view.call(a,"Em.TextField",{hash:{elementId:"vault-name",valueBinding:"content.name","class":"form-control"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING"},hashContexts:{elementId:a,valueBinding:a,"class":a},contexts:[a],types:["ID"],data:r}))),r.buffer.push('\r\n                                <span class="error">\r\n                                    '),t=e._triageMustache.call(a,"content.errors.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["ID"],data:r}),(t||0===t)&&r.buffer.push(t),r.buffer.push('\r\n                                </span>\r\n                            </div>\r\n\r\n                            <div class="form-group" '),r.buffer.push(i(e["bind-attr"].call(a,{hash:{"class":"content.errors.description:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":a},contexts:[],types:[],data:r}))),r.buffer.push('>\r\n                                <label for="vault-description">Description</label>\r\n                                '),r.buffer.push(i(e.view.call(a,"Em.TextArea",{hash:{elementId:"vault-description",valueBinding:"content.description","class":"form-control",rows:5},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING",rows:"INTEGER"},hashContexts:{elementId:a,valueBinding:a,"class":a,rows:a},contexts:[a],types:["ID"],data:r}))),r.buffer.push('\r\n                                <span class="error">\r\n                                    '),t=e._triageMustache.call(a,"content.errors.description",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["ID"],data:r}),(t||0===t)&&r.buffer.push(t),r.buffer.push('\r\n                                </span>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div class="clearfix"></div>\r\n                    </div>\r\n\r\n                    <div class="vlt-dialog-footer">\r\n                        <a href="javascript:window.history.go(-1)" class="btn btn-default btn-sm">\r\n                            <span class="glyphicon glyphicon-chevron-left"></span>\r\n                            Back\r\n                        </a>\r\n                        <button '),r.buffer.push(i(e.action.call(a,"save",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["ID"],data:r}))),r.buffer.push(" "),r.buffer.push(i(e["bind-attr"].call(a,{hash:{disabled:"saveDisabled"},hashTypes:{disabled:"ID"},hashContexts:{disabled:a},contexts:[],types:[],data:r}))),r.buffer.push(' class="btn btn-primary">\r\n                            <span class="glyphicon glyphicon-ok"></span>\r\n                            Save changes\r\n                        </button>\r\n                    </div>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n        <div class="clearfix"></div>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n'),l});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlZhdWx0c0luZGV4LmpzIiwiVmF1bHRzSW5kZXhJdGVtLmpzIiwiVmF1bHRzQ3JlYXRlLmpzIiwiVmF1bHRFZGl0LmpzIl0sIm5hbWVzIjpbIkVtYmVyIiwiVEVNUExBVEVTIiwiSGFuZGxlYmFycyIsInRlbXBsYXRlIiwiZGVwdGgwIiwiaGVscGVycyIsInBhcnRpYWxzIiwiZGF0YSIsInByb2dyYW0xIiwic3RhY2sxIiwiYnVmZmVyIiwicHVzaCIsImNhbGwiLCJoYXNoIiwiaGFzaFR5cGVzIiwiaGFzaENvbnRleHRzIiwiaW52ZXJzZSIsInNlbGYiLCJub29wIiwiZm4iLCJwcm9ncmFtIiwicHJvZ3JhbTIiLCJjb250ZXh0cyIsInR5cGVzIiwicHJvZ3JhbTUiLCJwcm9ncmFtOCIsImhlbHBlciIsIm9wdGlvbnMiLCJwcm9ncmFtMyIsImhlbHBlck1pc3NpbmciLCJlc2NhcGVFeHByZXNzaW9uIiwiYWN0aW9uIiwicHJvZ3JhbTYiLCJwcm9ncmFtOSIsInByb2dyYW0xMSIsImVhY2giLCJwcm9ncmFtMTIiLCJ2aWV3IiwicHJvZ3JhbTE0IiwicHJvZ3JhbTE1IiwiY2xhc3MiLCJwcm9ncmFtMTYiLCJwcm9ncmFtMTgiLCJfdHJpYWdlTXVzdGFjaGUiLCJwcm9ncmFtMjAiLCJwcm9ncmFtMjIiLCJwcm9ncmFtMjQiLCJwcm9ncmFtMjUiLCJwcm9ncmFtMjgiLCJwcm9ncmFtMjYiLCJwcm9ncmFtMzAiLCJwcm9ncmFtMzEiLCJwcm9ncmFtMzMiLCJwcm9ncmFtMzQiLCJ0aGlzIiwiY29tcGlsZXJJbmZvIiwibWVyZ2UiLCJleHAiLCJyb2xlcyIsInVzZXIiLCJ2YWx1ZSIsImhlaWdodCIsInByb2dyYW00IiwicHJpbnRVc2VyIiwiZWxsaXBzaXMiLCJwcmVmaXgiLCJwcmludEFnbyIsImVsZW1lbnRJZCIsInZhbHVlQmluZGluZyIsInJvd3MiLCJkaXNhYmxlZCJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU1DLFVBQVUscUJBQXVCRCxNQUFNRSxXQUFXQyxT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QUFLbUIsRUFBaUJ6QixFQUFRLGFBQWFPLEtBQUtSLEdBQVNTLE1BQ25FeUQsU0FBWSxnQkFDWnhELFdBQVd3RCxTQUFZLE1BQU12RCxjQUFjdUQsU0FBWWxFLEdBQVFrQixZQUFZQyxTQUFTaEIsS0FBS0EsTUFDM0ZBLEVBQUtHLE9BQU9DLEtBQUssK1dBQ1ZEIiwiZmlsZSI6InZhdWx0LnRwbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIkVtYmVyLlRFTVBMQVRFU1tcIlZhdWx0L1ZhdWx0c0luZGV4XCJdID0gRW1iZXIuSGFuZGxlYmFycy50ZW1wbGF0ZShmdW5jdGlvbiBhbm9ueW1vdXMoSGFuZGxlYmFycyxkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG50aGlzLmNvbXBpbGVySW5mbyA9IFs0LCc+PSAxLjAuMCddO1xuaGVscGVycyA9IHRoaXMubWVyZ2UoaGVscGVycywgRW1iZXIuSGFuZGxlYmFycy5oZWxwZXJzKTsgZGF0YSA9IGRhdGEgfHwge307XG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxLCBoZWxwZXIsIG9wdGlvbnMsIHNlbGY9dGhpcywgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xuXG5mdW5jdGlvbiBwcm9ncmFtMShkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazE7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYnRuLWdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9XFxcImRyb3Bkb3duXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jb2dcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYW5hZ2VcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVxcXCJkcm9wZG93bi1tZW51IGNhcmV0LWxlZnRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVyc1snaWYnXS5jYWxsKGRlcHRoMCwgXCJ3b3Jrc3BhY2UucGVybXMudXBkYXRlXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDIsIHByb2dyYW0yLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcblxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVyc1snaWYnXS5jYWxsKGRlcHRoMCwgXCJ3b3Jrc3BhY2UucGVybXMuaW52aXRlXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDUsIHByb2dyYW01LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcblxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVyc1snaWYnXS5jYWxsKGRlcHRoMCwgXCJ3b3Jrc3BhY2UucGVybXMuY3JlYXRlXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDgsIHByb2dyYW04LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcblxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5mdW5jdGlvbiBwcm9ncmFtMihkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazEsIGhlbHBlciwgb3B0aW9ucztcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcblxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IChoZWxwZXIgPSBoZWxwZXJzWydsaW5rLXRvJ10gfHwgKGRlcHRoMCAmJiBkZXB0aDBbJ2xpbmstdG8nXSksb3B0aW9ucz17aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgzLCBwcm9ncmFtMywgZGF0YSksY29udGV4dHM6W2RlcHRoMCxkZXB0aDBdLHR5cGVzOltcIlNUUklOR1wiLFwiSURcIl0sZGF0YTpkYXRhfSxoZWxwZXIgPyBoZWxwZXIuY2FsbChkZXB0aDAsIFwiV29ya3NwYWNlLmVkaXRcIiwgXCJ3b3Jrc3BhY2VcIiwgb3B0aW9ucykgOiBoZWxwZXJNaXNzaW5nLmNhbGwoZGVwdGgwLCBcImxpbmstdG9cIiwgXCJXb3Jrc3BhY2UuZWRpdFwiLCBcIndvcmtzcGFjZVwiLCBvcHRpb25zKSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cXFwiI1xcXCIgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVycy5hY3Rpb24uY2FsbChkZXB0aDAsIFwiZGVsZXRlV29ya3NwYWNlXCIsIFwid29ya3NwYWNlXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMCxkZXB0aDBdLHR5cGVzOltcIklEXCIsXCJJRFwiXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiID5EZWxldGUgd29ya3NwYWNlPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuZnVuY3Rpb24gcHJvZ3JhbTMoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIFxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRWRpdCB3b3Jrc3BhY2VcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtNShkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazEsIGhlbHBlciwgb3B0aW9ucztcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IChoZWxwZXIgPSBoZWxwZXJzWydsaW5rLXRvJ10gfHwgKGRlcHRoMCAmJiBkZXB0aDBbJ2xpbmstdG8nXSksb3B0aW9ucz17aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSg2LCBwcm9ncmFtNiwgZGF0YSksY29udGV4dHM6W2RlcHRoMCxkZXB0aDBdLHR5cGVzOltcIlNUUklOR1wiLFwiSURcIl0sZGF0YTpkYXRhfSxoZWxwZXIgPyBoZWxwZXIuY2FsbChkZXB0aDAsIFwiV29ya3NwYWNlLm1lbWJlckluZGV4XCIsIFwid29ya3NwYWNlXCIsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJsaW5rLXRvXCIsIFwiV29ya3NwYWNlLm1lbWJlckluZGV4XCIsIFwid29ya3NwYWNlXCIsIG9wdGlvbnMpKTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuZnVuY3Rpb24gcHJvZ3JhbTYoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIFxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2hhcmVcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtOChkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazEsIGhlbHBlciwgb3B0aW9ucztcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IChoZWxwZXIgPSBoZWxwZXJzWydsaW5rLXRvJ10gfHwgKGRlcHRoMCAmJiBkZXB0aDBbJ2xpbmstdG8nXSksb3B0aW9ucz17aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSg5LCBwcm9ncmFtOSwgZGF0YSksY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiU1RSSU5HXCJdLGRhdGE6ZGF0YX0saGVscGVyID8gaGVscGVyLmNhbGwoZGVwdGgwLCBcIlZhdWx0cy5jcmVhdGVcIiwgb3B0aW9ucykgOiBoZWxwZXJNaXNzaW5nLmNhbGwoZGVwdGgwLCBcImxpbmstdG9cIiwgXCJWYXVsdHMuY3JlYXRlXCIsIG9wdGlvbnMpKTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuZnVuY3Rpb24gcHJvZ3JhbTkoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIFxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWRkIHZhdWx0XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTExKGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgxMiwgcHJvZ3JhbTEyLCBkYXRhKSxjb250ZXh0czpbXSx0eXBlczpbXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5mdW5jdGlvbiBwcm9ncmFtMTIoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJztcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgICAgICBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzLnZpZXcuY2FsbChkZXB0aDAsIFwiVmF1bHRpZXIuVmF1bHRJbmRleEl0ZW1WaWV3XCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtMTQoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidG9wLTUwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwianVtYm90cm9uIHZsdC1iaWdib3ggdmx0LXZhdWx0XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1oZWFkZXJcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1pY29uXFxcIj5cXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtdGl0bGVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+WW91IGRvIG5vdCBoYXZlIGFueSB2YXVsdCB5ZXQ8L2gxPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuXFxuXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwid29ya3NwYWNlLnBlcm1zLmNyZWF0ZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgxNSwgcHJvZ3JhbTE1LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcblxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuZnVuY3Rpb24gcHJvZ3JhbTE1KGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMSwgaGVscGVyLCBvcHRpb25zO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZhdWx0cyBhcmUgdXNlZCB0byBvcmdhbml6ZSB5b3VyIHNlY3JldHMgaW50byBjYXJkcyBpbiB2YXVsdC5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgWW91IGNhbiBhbHNvIGNvbGxhYm9yYXRlIHdpdGggb3RoZXIgdGVhbSBtZW1iZXJzIGF0IHRoZSB2YXVsdFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFwidG9wLTMwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSAoaGVscGVyID0gaGVscGVyc1snbGluay10byddIHx8IChkZXB0aDAgJiYgZGVwdGgwWydsaW5rLXRvJ10pLG9wdGlvbnM9e2hhc2g6e1xuICAgICdjbGFzcyc6IChcImJ0biBidG4tbGcgYnRuLXByaW1hcnlcIilcbiAgfSxoYXNoVHlwZXM6eydjbGFzcyc6IFwiU1RSSU5HXCJ9LGhhc2hDb250ZXh0czp7J2NsYXNzJzogZGVwdGgwfSxpbnZlcnNlOnNlbGYubm9vcCxmbjpzZWxmLnByb2dyYW0oMTYsIHByb2dyYW0xNiwgZGF0YSksY29udGV4dHM6W2RlcHRoMCxkZXB0aDBdLHR5cGVzOltcIlNUUklOR1wiLFwiSURcIl0sZGF0YTpkYXRhfSxoZWxwZXIgPyBoZWxwZXIuY2FsbChkZXB0aDAsIFwiVmF1bHRzLmNyZWF0ZVwiLCBcIndvcmtzcGFjZVwiLCBvcHRpb25zKSA6IGhlbHBlck1pc3NpbmcuY2FsbChkZXB0aDAsIFwibGluay10b1wiLCBcIlZhdWx0cy5jcmVhdGVcIiwgXCJ3b3Jrc3BhY2VcIiwgb3B0aW9ucykpO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxcbiAgICAgICAgICAgICAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5mdW5jdGlvbiBwcm9ncmFtMTYoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIFxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1wbHVzXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZGQgdmF1bHRcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICB9XG5cbmZ1bmN0aW9uIHByb2dyYW0xOChkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazE7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG4gICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5fdHJpYWdlTXVzdGFjaGUuY2FsbChkZXB0aDAsIFwid29ya3NwYWNlLmRlc2NyaXB0aW9uXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG4gICAgICAgICAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbmZ1bmN0aW9uIHByb2dyYW0yMChkZXB0aDAsZGF0YSkge1xuICBcbiAgXG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG4gICAgICAgICAgICAgICAgICAgIE5vIGRlc2NyaXB0aW9uIGdpdmVuXFxuICAgICAgICAgICAgICAgIFwiKTtcbiAgfVxuXG5mdW5jdGlvbiBwcm9ncmFtMjIoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxLCBoZWxwZXIsIG9wdGlvbnM7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwidmx0LWJ1dHRvbi13cmFwcGVyXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9XFxcInRvb2x0aXBcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZhdWx0cyBhcmUgdXNlZCB0byBvcmdhbml6ZSB5b3VyIHNlY3JldHMgaW50byBjYXJkcyBpbiB2YXVsdC5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3UgY2FuIGFsc28gY29sbGFib3JhdGUgd2l0aCBvdGhlciB0ZWFtIG1lbWJlcnMgYXQgdGhlIHZhdWx0XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wbGFjZW1lbnQ9XFxcImJvdHRvbVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSAoaGVscGVyID0gaGVscGVyc1snbGluay10byddIHx8IChkZXB0aDAgJiYgZGVwdGgwWydsaW5rLXRvJ10pLG9wdGlvbnM9e2hhc2g6e1xuICAgICdjbGFzcyc6IChcImJ0biBidG4tcHJpbWFyeVwiKVxuICB9LGhhc2hUeXBlczp7J2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnY2xhc3MnOiBkZXB0aDB9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgxNiwgcHJvZ3JhbTE2LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwLGRlcHRoMF0sdHlwZXM6W1wiU1RSSU5HXCIsXCJJRFwiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCJWYXVsdHMuY3JlYXRlXCIsIFwid29ya3NwYWNlLnNsdWdcIiwgb3B0aW9ucykgOiBoZWxwZXJNaXNzaW5nLmNhbGwoZGVwdGgwLCBcImxpbmstdG9cIiwgXCJWYXVsdHMuY3JlYXRlXCIsIFwid29ya3NwYWNlLnNsdWdcIiwgb3B0aW9ucykpO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTI0KGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGRyb3Bkb3duLXRvZ2dsZVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT1cXFwiZHJvcGRvd25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY29nXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9wZXJ0aWVzXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XFxcImRyb3Bkb3duLW1lbnUgY2FyZXQtbGVmdFxcXCI+XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwid29ya3NwYWNlLnBlcm1zLnVwZGF0ZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgyNSwgcHJvZ3JhbTI1LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcblxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzWydpZiddLmNhbGwoZGVwdGgwLCBcIndvcmtzcGFjZS5wZXJtcy5kZWxldGVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxpbnZlcnNlOnNlbGYubm9vcCxmbjpzZWxmLnByb2dyYW0oMjgsIHByb2dyYW0yOCwgZGF0YSksY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuZnVuY3Rpb24gcHJvZ3JhbTI1KGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMSwgaGVscGVyLCBvcHRpb25zO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IChoZWxwZXIgPSBoZWxwZXJzWydsaW5rLXRvJ10gfHwgKGRlcHRoMCAmJiBkZXB0aDBbJ2xpbmstdG8nXSksb3B0aW9ucz17aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgyNiwgcHJvZ3JhbTI2LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwLGRlcHRoMF0sdHlwZXM6W1wiU1RSSU5HXCIsXCJJRFwiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCJXb3Jrc3BhY2UuZWRpdFwiLCBcIndvcmtzcGFjZS5zbHVnXCIsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJsaW5rLXRvXCIsIFwiV29ya3NwYWNlLmVkaXRcIiwgXCJ3b3Jrc3BhY2Uuc2x1Z1wiLCBvcHRpb25zKSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5mdW5jdGlvbiBwcm9ncmFtMjYoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIFxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFZGl0IHdvcmtzcGFjZVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTI4KGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJyc7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XFxcIiNcXFwiIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnMuYWN0aW9uLmNhbGwoZGVwdGgwLCBcImRlbGV0ZVdvcmtzcGFjZVwiLCBcIndvcmtzcGFjZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDAsZGVwdGgwXSx0eXBlczpbXCJJRFwiLFwiSURcIl0sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIj5EZWxldGUgd29ya3NwYWNlPC9hPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTMwKGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMSwgaGVscGVyLCBvcHRpb25zO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcInZsdC1idXR0b24td3JhcHBlclxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPVxcXCJ0b29sdGlwXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludml0ZSBuZXcgdGVhbSBtZW1iZXJzIHRvIGNvbGxhYm9yYXRlIG92ZXIgdGhpcyB3b3Jrc3BhY2VcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yICBncmFudCBhY2Nlc3MgcGVybWlzc2lvbiB0byBjdXJyZW50IHRlYW0gbWVtYmVyc1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wbGFjZW1lbnQ9XFxcImJvdHRvbVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSAoaGVscGVyID0gaGVscGVyc1snbGluay10byddIHx8IChkZXB0aDAgJiYgZGVwdGgwWydsaW5rLXRvJ10pLG9wdGlvbnM9e2hhc2g6e1xuICAgICdjbGFzcyc6IChcImJ0biBidG4tZGVmYXVsdFwiKVxuICB9LGhhc2hUeXBlczp7J2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnY2xhc3MnOiBkZXB0aDB9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgzMSwgcHJvZ3JhbTMxLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwLGRlcHRoMF0sdHlwZXM6W1wiU1RSSU5HXCIsXCJJRFwiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCJXb3Jrc3BhY2UubWVtYmVySW52aXRlXCIsIFwid29ya3NwYWNlLnNsdWdcIiwgb3B0aW9ucykgOiBoZWxwZXJNaXNzaW5nLmNhbGwoZGVwdGgwLCBcImxpbmstdG9cIiwgXCJXb3Jrc3BhY2UubWVtYmVySW52aXRlXCIsIFwid29ya3NwYWNlLnNsdWdcIiwgb3B0aW9ucykpO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHJldHVybiBidWZmZXI7XG4gIH1cbmZ1bmN0aW9uIHByb2dyYW0zMShkZXB0aDAsZGF0YSkge1xuICBcbiAgXG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLXBsdXNcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludml0ZVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIH1cblxuZnVuY3Rpb24gcHJvZ3JhbTMzKGRlcHRoMCxkYXRhKSB7XG4gIFxuICB2YXIgYnVmZmVyID0gJycsIHN0YWNrMSwgaGVscGVyLCBvcHRpb25zO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcInZsdC1idXR0b24td3JhcHBlclxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPVxcXCJ0b29sdGlwXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludml0ZSBuZXcgdGVhbSBtZW1iZXJzIHRvIGNvbGxhYm9yYXRlIG92ZXIgdGhpcyB3b3Jrc3BhY2VcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yICBncmFudCBhY2Nlc3MgcGVybWlzc2lvbiB0byBjdXJyZW50IHRlYW0gbWVtYmVyc1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wbGFjZW1lbnQ9XFxcImJvdHRvbVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSAoaGVscGVyID0gaGVscGVyc1snbGluay10byddIHx8IChkZXB0aDAgJiYgZGVwdGgwWydsaW5rLXRvJ10pLG9wdGlvbnM9e2hhc2g6e1xuICAgICdjbGFzcyc6IChcImJ0biBidG4tZGVmYXVsdFwiKVxuICB9LGhhc2hUeXBlczp7J2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnY2xhc3MnOiBkZXB0aDB9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgzNCwgcHJvZ3JhbTM0LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwLGRlcHRoMF0sdHlwZXM6W1wiU1RSSU5HXCIsXCJJRFwiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCJXb3Jrc3BhY2UubWVtYmVySW5kZXhcIiwgXCJ3b3Jrc3BhY2Uuc2x1Z1wiLCBvcHRpb25zKSA6IGhlbHBlck1pc3NpbmcuY2FsbChkZXB0aDAsIFwibGluay10b1wiLCBcIldvcmtzcGFjZS5tZW1iZXJJbmRleFwiLCBcIndvcmtzcGFjZS5zbHVnXCIsIG9wdGlvbnMpKTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5mdW5jdGlvbiBwcm9ncmFtMzQoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIFxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi11c2VyXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZWFtXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgfVxuXG4gIGRhdGEuYnVmZmVyLnB1c2goXCI8ZGl2IGNsYXNzPVxcXCJjb250YWluZXItZnVsbFxcXCI+XFxuPGRpdiBjbGFzcz1cXFwidmx0LXBhZ2Ugdmx0LXBhZ2Utd2l0aC1zaWRlYmFyXFxcIj5cXG48ZGl2IGNsYXNzPVxcXCJ2bHQtcGFnZS1jb250ZW50XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj5cXG5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtcGFnZS1jb250ZW50LXJlc3BvbnNpdmUtaGVhZGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicm93LWZsdWlkXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC14cy0zXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IChoZWxwZXIgPSBoZWxwZXJzLmV4cCB8fCAoZGVwdGgwICYmIGRlcHRoMC5leHApLG9wdGlvbnM9e2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxpbnZlcnNlOnNlbGYubm9vcCxmbjpzZWxmLnByb2dyYW0oMSwgcHJvZ3JhbTEsIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIlNUUklOR1wiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCIoIHdvcmtzcGFjZS5wZXJtcy51cGRhdGUgfHwgd29ya3NwYWNlLnBlcm1zLmRlbGV0ZSB8fCB3b3Jrc3BhY2UucGVybXMuY3JlYXRlIHx8IHdvcmtzcGFjZS5wZXJtcy5pbnZpdGUgKVwiLCBvcHRpb25zKSA6IGhlbHBlck1pc3NpbmcuY2FsbChkZXB0aDAsIFwiZXhwXCIsIFwiKCB3b3Jrc3BhY2UucGVybXMudXBkYXRlIHx8IHdvcmtzcGFjZS5wZXJtcy5kZWxldGUgfHwgd29ya3NwYWNlLnBlcm1zLmNyZWF0ZSB8fCB3b3Jrc3BhY2UucGVybXMuaW52aXRlIClcIiwgb3B0aW9ucykpO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC14cy05XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDI+V29ya3NwYWNlOiBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnMuX3RyaWFnZU11c3RhY2hlLmNhbGwoZGVwdGgwLCBcIndvcmtzcGFjZS5uYW1lXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCIgPC9oMj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2xlYXJmaXhcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG5cXG5cXG4gICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVyc1snaWYnXS5jYWxsKGRlcHRoMCwgXCJsZW5ndGhcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxpbnZlcnNlOnNlbGYucHJvZ3JhbSgxNCwgcHJvZ3JhbTE0LCBkYXRhKSxmbjpzZWxmLnByb2dyYW0oMTEsIHByb2dyYW0xMSwgZGF0YSksY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuXFxuPGRpdiBjbGFzcz1cXFwidmx0LXBhZ2Utc2lkZWJhclxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcInZsdC1zaWRlYmFyLWJsb2NrXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1zaWRlYmFyLWJsb2NrLWhlYWRpbmdcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1oZWFkZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cXFwiL3N0YXRpYy92YXVsdGllci9pbWFnZXMvaWNvbi13b3Jrc3BhY2UtZ3JleS5wbmdcXFwiIGNsYXNzPVxcXCJ2bHQtaWNvblxcXCI+XFxuXFxuICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cXFwidmx0LXRpdGxlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVycy5fdHJpYWdlTXVzdGFjaGUuY2FsbChkZXB0aDAsIFwid29ya3NwYWNlLm5hbWVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgICAgICA8L2gzPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1ib2R5XFxcIj5cXG4gICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzWydpZiddLmNhbGwoZGVwdGgwLCBcIndvcmtzcGFjZS5kZXNjcmlwdGlvblwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5wcm9ncmFtKDIwLCBwcm9ncmFtMjAsIGRhdGEpLGZuOnNlbGYucHJvZ3JhbSgxOCwgcHJvZ3JhbTE4LCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1jb250cm9sc1xcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXY+XFxuXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwid29ya3NwYWNlLnBlcm1zLmNyZWF0ZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgyMiwgcHJvZ3JhbTIyLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcblxcbiAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSAoaGVscGVyID0gaGVscGVycy5leHAgfHwgKGRlcHRoMCAmJiBkZXB0aDAuZXhwKSxvcHRpb25zPXtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDI0LCBwcm9ncmFtMjQsIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIlNUUklOR1wiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCIoIHdvcmtzcGFjZS5wZXJtcy51cGRhdGUgfHwgd29ya3NwYWNlLnBlcm1zLmRlbGV0ZSlcIiwgb3B0aW9ucykgOiBoZWxwZXJNaXNzaW5nLmNhbGwoZGVwdGgwLCBcImV4cFwiLCBcIiggd29ya3NwYWNlLnBlcm1zLnVwZGF0ZSB8fCB3b3Jrc3BhY2UucGVybXMuZGVsZXRlKVwiLCBvcHRpb25zKSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG5cXG5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNsZWFyZml4XFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LXNpZGViYXItYmxvY2stc2hhcmluZ1xcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LWhlYWRlclxcXCI+XFxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVxcXCIvc3RhdGljL3ZhdWx0aWVyL2ltYWdlcy9pY29uLXRlYW0tZ3JleS5wbmdcXFwiIGNsYXNzPVxcXCJ2bHQtaWNvblxcXCI+XFxuXFxuICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cXFwidmx0LXRpdGxlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIFNoYXJpbmcgd2l0aFxcbiAgICAgICAgICAgICAgICA8L2gzPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1ib2R5XFxcIj5cXG4gICAgICAgICAgICAgICAgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oKGhlbHBlciA9IGhlbHBlcnNbJ21lbWJlci1ib3gnXSB8fCAoZGVwdGgwICYmIGRlcHRoMFsnbWVtYmVyLWJveCddKSxvcHRpb25zPXtoYXNoOntcbiAgICAncm9sZXMnOiAoXCJtZW1iZXJzaGlwc1wiKSxcbiAgICAndXNlcic6IChcImF1dGgudXNlclwiKVxuICB9LGhhc2hUeXBlczp7J3JvbGVzJzogXCJJRFwiLCd1c2VyJzogXCJJRFwifSxoYXNoQ29udGV4dHM6eydyb2xlcyc6IGRlcHRoMCwndXNlcic6IGRlcHRoMH0sY29udGV4dHM6W10sdHlwZXM6W10sZGF0YTpkYXRhfSxoZWxwZXIgPyBoZWxwZXIuY2FsbChkZXB0aDAsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJtZW1iZXItYm94XCIsIG9wdGlvbnMpKSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LWNvbnRyb2xzXFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdj5cXG5cXG4gICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgc3RhY2sxID0gaGVscGVyc1snaWYnXS5jYWxsKGRlcHRoMCwgXCJ3b3Jrc3BhY2UucGVybXMuaW52aXRlXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDMwLCBwcm9ncmFtMzAsIGRhdGEpLGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnNbJ2lmJ10uY2FsbChkZXB0aDAsIFwid29ya3NwYWNlLnBlcm1zLmludml0ZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGludmVyc2U6c2VsZi5ub29wLGZuOnNlbGYucHJvZ3JhbSgzMywgcHJvZ3JhbTMzLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcblxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG5cXG48L2Rpdj5cXG5cXG48L2Rpdj5cXG5cXG48L2Rpdj5cXG5cXG5cIik7XG4gIHJldHVybiBidWZmZXI7XG4gIFxufSk7IiwiRW1iZXIuVEVNUExBVEVTW1wiVmF1bHQvVmF1bHRzSW5kZXhJdGVtXCJdID0gRW1iZXIuSGFuZGxlYmFycy50ZW1wbGF0ZShmdW5jdGlvbiBhbm9ueW1vdXMoSGFuZGxlYmFycyxkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG50aGlzLmNvbXBpbGVySW5mbyA9IFs0LCc+PSAxLjAuMCddO1xuaGVscGVycyA9IHRoaXMubWVyZ2UoaGVscGVycywgRW1iZXIuSGFuZGxlYmFycy5oZWxwZXJzKTsgZGF0YSA9IGRhdGEgfHwge307XG4gIHZhciBidWZmZXIgPSAnJywgc3RhY2sxLCBoZWxwZXIsIG9wdGlvbnMsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgc2VsZj10aGlzO1xuXG5mdW5jdGlvbiBwcm9ncmFtMShkZXB0aDAsZGF0YSkge1xuICBcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazEsIGhlbHBlciwgb3B0aW9ucztcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LXZpc3VhbFxcXCI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1jb250ZW50XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtaGVhZGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgPGg0PlwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKChoZWxwZXIgPSBoZWxwZXJzWydkb3QtZG90LWRvdCddIHx8IChkZXB0aDAgJiYgZGVwdGgwWydkb3QtZG90LWRvdCddKSxvcHRpb25zPXtoYXNoOntcbiAgICAndmFsdWUnOiAoXCJuYW1lXCIpLFxuICAgICdoZWlnaHQnOiAoNjApXG4gIH0saGFzaFR5cGVzOnsndmFsdWUnOiBcIklEXCIsJ2hlaWdodCc6IFwiSU5URUdFUlwifSxoYXNoQ29udGV4dHM6eyd2YWx1ZSc6IGRlcHRoMCwnaGVpZ2h0JzogZGVwdGgwfSxjb250ZXh0czpbXSx0eXBlczpbXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgb3B0aW9ucykgOiBoZWxwZXJNaXNzaW5nLmNhbGwoZGVwdGgwLCBcImRvdC1kb3QtZG90XCIsIG9wdGlvbnMpKSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPC9oND5cXG5cXG4gICAgICAgICAgICAgICAgPCEtLVxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtaWNvblxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cXFwiL3N0YXRpYy9pY29ucy92YXVsdC9BQ1JPQklUUy5wbmdcXFwiPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgLS0+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LWRlc2NyaXB0aW9uXFxcIj5cXG4gICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzWydpZiddLmNhbGwoZGVwdGgwLCBcImRlc2NyaXB0aW9uXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLnByb2dyYW0oNCwgcHJvZ3JhbTQsIGRhdGEpLGZuOnNlbGYucHJvZ3JhbSgyLCBwcm9ncmFtMiwgZGF0YSksY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtZm9vdGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oKGhlbHBlciA9IGhlbHBlcnMucHJpbnRVc2VyIHx8IChkZXB0aDAgJiYgZGVwdGgwLnByaW50VXNlciksb3B0aW9ucz17aGFzaDp7XG4gICAgJ2VsbGlwc2lzJzogKDEyKSxcbiAgICAncHJlZml4JzogKFwiQ3JlYXRlZCBieTpcIilcbiAgfSxoYXNoVHlwZXM6eydlbGxpcHNpcyc6IFwiSU5URUdFUlwiLCdwcmVmaXgnOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eydlbGxpcHNpcyc6IGRlcHRoMCwncHJlZml4JzogZGVwdGgwfSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCJjcmVhdGVkX2J5XCIsIG9wdGlvbnMpIDogaGVscGVyTWlzc2luZy5jYWxsKGRlcHRoMCwgXCJwcmludFVzZXJcIiwgXCJjcmVhdGVkX2J5XCIsIG9wdGlvbnMpKSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgICAgIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKChoZWxwZXIgPSBoZWxwZXJzLnByaW50QWdvIHx8IChkZXB0aDAgJiYgZGVwdGgwLnByaW50QWdvKSxvcHRpb25zPXtoYXNoOntcbiAgICAncHJlZml4JzogKFwiTGF0ZXN0IG1vZGlmaWNhdGlvbiBhdDpcIilcbiAgfSxoYXNoVHlwZXM6eydwcmVmaXgnOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eydwcmVmaXgnOiBkZXB0aDB9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0saGVscGVyID8gaGVscGVyLmNhbGwoZGVwdGgwLCBcInVwZGF0ZWRfYXRcIiwgb3B0aW9ucykgOiBoZWxwZXJNaXNzaW5nLmNhbGwoZGVwdGgwLCBcInByaW50QWdvXCIsIFwidXBkYXRlZF9hdFwiLCBvcHRpb25zKSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIFwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuZnVuY3Rpb24gcHJvZ3JhbTIoZGVwdGgwLGRhdGEpIHtcbiAgXG4gIHZhciBidWZmZXIgPSAnJywgaGVscGVyLCBvcHRpb25zO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxuICAgICAgICAgICAgICAgICAgICBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbigoaGVscGVyID0gaGVscGVyc1snZG90LWRvdC1kb3QnXSB8fCAoZGVwdGgwICYmIGRlcHRoMFsnZG90LWRvdC1kb3QnXSksb3B0aW9ucz17aGFzaDp7XG4gICAgJ3ZhbHVlJzogKFwiZGVzY3JpcHRpb25cIiksXG4gICAgJ2hlaWdodCc6ICg4MClcbiAgfSxoYXNoVHlwZXM6eyd2YWx1ZSc6IFwiSURcIiwnaGVpZ2h0JzogXCJJTlRFR0VSXCJ9LGhhc2hDb250ZXh0czp7J3ZhbHVlJzogZGVwdGgwLCdoZWlnaHQnOiBkZXB0aDB9LGNvbnRleHRzOltdLHR5cGVzOltdLGRhdGE6ZGF0YX0saGVscGVyID8gaGVscGVyLmNhbGwoZGVwdGgwLCBvcHRpb25zKSA6IGhlbHBlck1pc3NpbmcuY2FsbChkZXB0aDAsIFwiZG90LWRvdC1kb3RcIiwgb3B0aW9ucykpKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG4gICAgICAgICAgICAgICAgXCIpO1xuICByZXR1cm4gYnVmZmVyO1xuICB9XG5cbmZ1bmN0aW9uIHByb2dyYW00KGRlcHRoMCxkYXRhKSB7XG4gIFxuICBcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgICAgICAgICAgTm8gZGVzY3JpcHRpb24gZ2l2ZW5cXG4gICAgICAgICAgICAgICAgXCIpO1xuICB9XG5cbiAgZGF0YS5idWZmZXIucHVzaChcIjxkaXYgY2xhc3M9XFxcInZsdC12YXVsdC1pdGVtIHB1bGwtbGVmdFxcXCI+XFxuICAgIFwiKTtcbiAgc3RhY2sxID0gKGhlbHBlciA9IGhlbHBlcnNbJ2xpbmstdG8nXSB8fCAoZGVwdGgwICYmIGRlcHRoMFsnbGluay10byddKSxvcHRpb25zPXtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30saW52ZXJzZTpzZWxmLm5vb3AsZm46c2VsZi5wcm9ncmFtKDEsIHByb2dyYW0xLCBkYXRhKSxjb250ZXh0czpbZGVwdGgwLGRlcHRoMF0sdHlwZXM6W1wiU1RSSU5HXCIsXCJJRFwiXSxkYXRhOmRhdGF9LGhlbHBlciA/IGhlbHBlci5jYWxsKGRlcHRoMCwgXCJWYXVsdC5pbmRleFwiLCBcIlwiLCBvcHRpb25zKSA6IGhlbHBlck1pc3NpbmcuY2FsbChkZXB0aDAsIFwibGluay10b1wiLCBcIlZhdWx0LmluZGV4XCIsIFwiXCIsIG9wdGlvbnMpKTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbjwvZGl2PlxcblxcblwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgXG59KTsiLCJFbWJlci5URU1QTEFURVNbXCJWYXVsdC9WYXVsdHNDcmVhdGVcIl0gPSBFbWJlci5IYW5kbGViYXJzLnRlbXBsYXRlKGZ1bmN0aW9uIGFub255bW91cyhIYW5kbGViYXJzLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbnRoaXMuY29tcGlsZXJJbmZvID0gWzQsJz49IDEuMC4wJ107XG5oZWxwZXJzID0gdGhpcy5tZXJnZShoZWxwZXJzLCBFbWJlci5IYW5kbGViYXJzLmhlbHBlcnMpOyBkYXRhID0gZGF0YSB8fCB7fTtcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazEsIGhlbHBlciwgb3B0aW9ucywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nO1xuXG5cbiAgZGF0YS5idWZmZXIucHVzaChcIjxkaXYgY2xhc3M9XFxcImNvbnRhaW5lclxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcInZsdC1wYWdlIHZsdC1wYWdlLXBsYWluXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1kaWFsb2cgY29sLW1kLTggY29sLW1kLW9mZnNldC0yIHRvcC01MFxcXCI+XFxuICAgICAgICAgICAgPGZvcm0+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1kaWFsb2ctY29udGVudFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtZGlhbG9nLWhlYWRlclxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyPkNyZWF0ZSBuZXcgdmF1bHQ8L2gyPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtZGlhbG9nLWJvZHlcXFwiPlxcblxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC03XFxcIj5cXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCIgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVyc1snYmluZC1hdHRyJ10uY2FsbChkZXB0aDAsIHtoYXNoOntcbiAgICAnY2xhc3MnOiAoXCJjb250ZW50LmVycm9ycy5uYW1lOmhhcy1lcnJvclwiKVxuICB9LGhhc2hUeXBlczp7J2NsYXNzJzogXCJTVFJJTkdcIn0saGFzaENvbnRleHRzOnsnY2xhc3MnOiBkZXB0aDB9LGNvbnRleHRzOltdLHR5cGVzOltdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJ3b3Jrc3BhY2UtbmFtZVxcXCI+TmFtZTwvbGFiZWw+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzLnZpZXcuY2FsbChkZXB0aDAsIFwiRW0uVGV4dEZpZWxkXCIsIHtoYXNoOntcbiAgICAnZWxlbWVudElkJzogKFwid29ya3NwYWNlLW5hbWVcIiksXG4gICAgJ3ZhbHVlQmluZGluZyc6IChcImNvbnRlbnQubmFtZVwiKSxcbiAgICAnY2xhc3MnOiAoXCJmb3JtLWNvbnRyb2xcIilcbiAgfSxoYXNoVHlwZXM6eydlbGVtZW50SWQnOiBcIlNUUklOR1wiLCd2YWx1ZUJpbmRpbmcnOiBcIlNUUklOR1wiLCdjbGFzcyc6IFwiU1RSSU5HXCJ9LGhhc2hDb250ZXh0czp7J2VsZW1lbnRJZCc6IGRlcHRoMCwndmFsdWVCaW5kaW5nJzogZGVwdGgwLCdjbGFzcyc6IGRlcHRoMH0sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImVycm9yXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnMuX3RyaWFnZU11c3RhY2hlLmNhbGwoZGVwdGgwLCBcImNvbnRlbnQuZXJyb3JzLm5hbWVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCIgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVyc1snYmluZC1hdHRyJ10uY2FsbChkZXB0aDAsIHtoYXNoOntcbiAgICAnY2xhc3MnOiAoXCJjb250ZW50LmVycm9ycy5kZXNjcmlwdGlvbjpoYXMtZXJyb3JcIilcbiAgfSxoYXNoVHlwZXM6eydjbGFzcyc6IFwiU1RSSU5HXCJ9LGhhc2hDb250ZXh0czp7J2NsYXNzJzogZGVwdGgwfSxjb250ZXh0czpbXSx0eXBlczpbXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwid29ya3NwYWNlLWRlc2NyaXB0aW9uXFxcIj5EZXNjcmlwdGlvbjwvbGFiZWw+XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzLnZpZXcuY2FsbChkZXB0aDAsIFwiRW0uVGV4dEFyZWFcIiwge2hhc2g6e1xuICAgICdlbGVtZW50SWQnOiAoXCJ3b3Jrc3BhY2UtZGVzY3JpcHRpb25cIiksXG4gICAgJ3ZhbHVlQmluZGluZyc6IChcImNvbnRlbnQuZGVzY3JpcHRpb25cIiksXG4gICAgJ2NsYXNzJzogKFwiZm9ybS1jb250cm9sXCIpLFxuICAgICdyb3dzJzogKDUpXG4gIH0saGFzaFR5cGVzOnsnZWxlbWVudElkJzogXCJTVFJJTkdcIiwndmFsdWVCaW5kaW5nJzogXCJTVFJJTkdcIiwnY2xhc3MnOiBcIlNUUklOR1wiLCdyb3dzJzogXCJJTlRFR0VSXCJ9LGhhc2hDb250ZXh0czp7J2VsZW1lbnRJZCc6IGRlcHRoMCwndmFsdWVCaW5kaW5nJzogZGVwdGgwLCdjbGFzcyc6IGRlcHRoMCwncm93cyc6IGRlcHRoMH0sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImVycm9yXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnMuX3RyaWFnZU11c3RhY2hlLmNhbGwoZGVwdGgwLCBcImNvbnRlbnQuZXJyb3JzLmRlc2NyaXB0aW9uXCIsIHtoYXNoOnt9LGhhc2hUeXBlczp7fSxoYXNoQ29udGV4dHM6e30sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSk7XG4gIGlmKHN0YWNrMSB8fCBzdGFjazEgPT09IDApIHsgZGF0YS5idWZmZXIucHVzaChzdGFjazEpOyB9XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTUgYm90dG9tLTE1XFxcIj5cXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2FsbG91dCBjYWxsb3V0LWluZm9cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0PlZhdWx0IHdpbGwgYmUgc2hhcmVkIHdpdGg6PC9oND5cXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKChoZWxwZXIgPSBoZWxwZXJzWydtZW1iZXItYm94J10gfHwgKGRlcHRoMCAmJiBkZXB0aDBbJ21lbWJlci1ib3gnXSksb3B0aW9ucz17aGFzaDp7XG4gICAgJ3JvbGVzJzogKFwibWVtYmVyc2hpcHNcIiksXG4gICAgJ3VzZXInOiAoXCJhdXRoLnVzZXJcIilcbiAgfSxoYXNoVHlwZXM6eydyb2xlcyc6IFwiSURcIiwndXNlcic6IFwiSURcIn0saGFzaENvbnRleHRzOnsncm9sZXMnOiBkZXB0aDAsJ3VzZXInOiBkZXB0aDB9LGNvbnRleHRzOltdLHR5cGVzOltdLGRhdGE6ZGF0YX0saGVscGVyID8gaGVscGVyLmNhbGwoZGVwdGgwLCBvcHRpb25zKSA6IGhlbHBlck1pc3NpbmcuY2FsbChkZXB0aDAsIFwibWVtYmVyLWJveFwiLCBvcHRpb25zKSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjbGVhcmZpeFxcXCI+PC9kaXY+XFxuXFxuXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1kaWFsb2ctZm9vdGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVxcXCJqYXZhc2NyaXB0OndpbmRvdy5oaXN0b3J5LmdvKC0xKVxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc21cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnRcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQmFja1xcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnMuYWN0aW9uLmNhbGwoZGVwdGgwLCBcInNhdmVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnNbJ2JpbmQtYXR0ciddLmNhbGwoZGVwdGgwLCB7aGFzaDp7XG4gICAgJ2Rpc2FibGVkJzogKFwic2F2ZURpc2FibGVkXCIpXG4gIH0saGFzaFR5cGVzOnsnZGlzYWJsZWQnOiBcIklEXCJ9LGhhc2hDb250ZXh0czp7J2Rpc2FibGVkJzogZGVwdGgwfSxjb250ZXh0czpbXSx0eXBlczpbXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1va1xcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDcmVhdGUgbmV3IHZhdWx0XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9mb3JtPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJjbGVhcmZpeFxcXCI+PC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcblxcblxcblxcblxcblxcblxcblwiKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbiAgXG59KTsiLCJFbWJlci5URU1QTEFURVNbXCJWYXVsdC9WYXVsdEVkaXRcIl0gPSBFbWJlci5IYW5kbGViYXJzLnRlbXBsYXRlKGZ1bmN0aW9uIGFub255bW91cyhIYW5kbGViYXJzLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbnRoaXMuY29tcGlsZXJJbmZvID0gWzQsJz49IDEuMC4wJ107XG5oZWxwZXJzID0gdGhpcy5tZXJnZShoZWxwZXJzLCBFbWJlci5IYW5kbGViYXJzLmhlbHBlcnMpOyBkYXRhID0gZGF0YSB8fCB7fTtcbiAgdmFyIGJ1ZmZlciA9ICcnLCBzdGFjazEsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xuXG5cbiAgZGF0YS5idWZmZXIucHVzaChcIjxkaXYgY2xhc3M9XFxcImNvbnRhaW5lclxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcInZsdC1wYWdlIHZsdC1wYWdlLXBsYWluXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1kaWFsb2cgY29sLW1kLTggY29sLW1kLW9mZnNldC0yIHRvcC01MFxcXCI+XFxyXFxuICAgICAgICAgICAgPGZvcm0+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInZsdC1kaWFsb2ctY29udGVudFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtZGlhbG9nLWhlYWRlclxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyPkVkaXQgdmF1bHQ8L2gyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ2bHQtZGlhbG9nLWJvZHlcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC04IGNvbC1tZC1vZmZzZXQtMlxcXCI+XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiICBcIik7XG4gIGRhdGEuYnVmZmVyLnB1c2goZXNjYXBlRXhwcmVzc2lvbihoZWxwZXJzWydiaW5kLWF0dHInXS5jYWxsKGRlcHRoMCwge2hhc2g6e1xuICAgICdjbGFzcyc6IChcImNvbnRlbnQuZXJyb3JzLm5hbWU6aGFzLWVycm9yXCIpXG4gIH0saGFzaFR5cGVzOnsnY2xhc3MnOiBcIlNUUklOR1wifSxoYXNoQ29udGV4dHM6eydjbGFzcyc6IGRlcHRoMH0sY29udGV4dHM6W10sdHlwZXM6W10sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcInZhdWx0LW5hbWVcXFwiPk5hbWU8L2xhYmVsPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVycy52aWV3LmNhbGwoZGVwdGgwLCBcIkVtLlRleHRGaWVsZFwiLCB7aGFzaDp7XG4gICAgJ2VsZW1lbnRJZCc6IChcInZhdWx0LW5hbWVcIiksXG4gICAgJ3ZhbHVlQmluZGluZyc6IChcImNvbnRlbnQubmFtZVwiKSxcbiAgICAnY2xhc3MnOiAoXCJmb3JtLWNvbnRyb2xcIilcbiAgfSxoYXNoVHlwZXM6eydlbGVtZW50SWQnOiBcIlNUUklOR1wiLCd2YWx1ZUJpbmRpbmcnOiBcIlNUUklOR1wiLCdjbGFzcyc6IFwiU1RSSU5HXCJ9LGhhc2hDb250ZXh0czp7J2VsZW1lbnRJZCc6IGRlcHRoMCwndmFsdWVCaW5kaW5nJzogZGVwdGgwLCdjbGFzcyc6IGRlcHRoMH0sY29udGV4dHM6W2RlcHRoMF0sdHlwZXM6W1wiSURcIl0sZGF0YTpkYXRhfSkpKTtcbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImVycm9yXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIik7XG4gIHN0YWNrMSA9IGhlbHBlcnMuX3RyaWFnZU11c3RhY2hlLmNhbGwoZGVwdGgwLCBcImNvbnRlbnQuZXJyb3JzLm5hbWVcIiwge2hhc2g6e30saGFzaFR5cGVzOnt9LGhhc2hDb250ZXh0czp7fSxjb250ZXh0czpbZGVwdGgwXSx0eXBlczpbXCJJRFwiXSxkYXRhOmRhdGF9KTtcbiAgaWYoc3RhY2sxIHx8IHN0YWNrMSA9PT0gMCkgeyBkYXRhLmJ1ZmZlci5wdXNoKHN0YWNrMSk7IH1cbiAgZGF0YS5idWZmZXIucHVzaChcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCIgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVyc1snYmluZC1hdHRyJ10uY2FsbChkZXB0aDAsIHtoYXNoOntcbiAgICAnY2xhc3MnOiAoXCJjb250ZW50LmVycm9ycy5kZXNjcmlwdGlvbjpoYXMtZXJyb3JcIilcbiAgfSxoYXNoVHlwZXM6eydjbGFzcyc6IFwiU1RSSU5HXCJ9LGhhc2hDb250ZXh0czp7J2NsYXNzJzogZGVwdGgwfSxjb250ZXh0czpbXSx0eXBlczpbXSxkYXRhOmRhdGF9KSkpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwidmF1bHQtZGVzY3JpcHRpb25cXFwiPkRlc2NyaXB0aW9uPC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKTtcbiAgZGF0YS5idWZmZXIucHVzaChlc2NhcGVFeHByZXNzaW9uKGhlbHBlcnMudmlldy5jYWxsKGRlcHRoMCwgXCJFbS5UZXh0QXJlYVwiLCB7aGFzaDp7XG4gICAgJ2VsZW1lbnRJZCc6IChcInZhdWx0LWRlc2NyaXB0aW9uXCIpLFxuICAgICd2YWx1ZUJpbmRpbmcnOiAoXCJjb250ZW50LmRlc2NyaXB0aW9uXCIpLFxuICAgICdjbGFzcyc6IChcImZvcm0tY29udHJvbFwiKSxcbiAgICAncm93cyc6ICg1KVxuICB9LGhhc2hUeXBlczp7J2VsZW1lbnRJZCc6IFwiU1RSSU5HXCIsJ3ZhbHVlQmluZGluZyc6IFwiU1RSSU5HXCIsJ2NsYXNzJzogXCJTVFJJTkdcIiwncm93cyc6IFwiSU5URUdFUlwifSxoYXNoQ29udGV4dHM6eydlbGVtZW50SWQnOiBkZXB0aDAsJ3ZhbHVlQmluZGluZyc6IGRlcHRoMCwnY2xhc3MnOiBkZXB0aDAsJ3Jvd3MnOiBkZXB0aDB9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJlcnJvclxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpO1xuICBzdGFjazEgPSBoZWxwZXJzLl90cmlhZ2VNdXN0YWNoZS5jYWxsKGRlcHRoMCwgXCJjb250ZW50LmVycm9ycy5kZXNjcmlwdGlvblwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pO1xuICBpZihzdGFjazEgfHwgc3RhY2sxID09PSAwKSB7IGRhdGEuYnVmZmVyLnB1c2goc3RhY2sxKTsgfVxuICBkYXRhLmJ1ZmZlci5wdXNoKFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNsZWFyZml4XFxcIj48L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwidmx0LWRpYWxvZy1mb290ZXJcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XFxcImphdmFzY3JpcHQ6d2luZG93Lmhpc3RvcnkuZ28oLTEpXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdFxcXCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCYWNrXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVycy5hY3Rpb24uY2FsbChkZXB0aDAsIFwic2F2ZVwiLCB7aGFzaDp7fSxoYXNoVHlwZXM6e30saGFzaENvbnRleHRzOnt9LGNvbnRleHRzOltkZXB0aDBdLHR5cGVzOltcIklEXCJdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCIgXCIpO1xuICBkYXRhLmJ1ZmZlci5wdXNoKGVzY2FwZUV4cHJlc3Npb24oaGVscGVyc1snYmluZC1hdHRyJ10uY2FsbChkZXB0aDAsIHtoYXNoOntcbiAgICAnZGlzYWJsZWQnOiAoXCJzYXZlRGlzYWJsZWRcIilcbiAgfSxoYXNoVHlwZXM6eydkaXNhYmxlZCc6IFwiSURcIn0saGFzaENvbnRleHRzOnsnZGlzYWJsZWQnOiBkZXB0aDB9LGNvbnRleHRzOltdLHR5cGVzOltdLGRhdGE6ZGF0YX0pKSk7XG4gIGRhdGEuYnVmZmVyLnB1c2goXCIgY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLW9rXFxcIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNhdmUgY2hhbmdlc1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDwvZm9ybT5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY2xlYXJmaXhcXFwiPjwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L2Rpdj5cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5cIik7XG4gIHJldHVybiBidWZmZXI7XG4gIFxufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9