Ember.TEMPLATES["Workspace/WorkspacesIndex"]=Ember.Handlebars.template(function(s,n,e,a,t){function r(s,n){var a,t,r,l="";return n.buffer.push('\n                <div class="vlt-page-toolbar pull-right">\n\n                    <div\n                            title="\n                            Workspaces are used to organize your secrets. All your vaults, cards and secrets are\n                            stored inside workspace. You can also collaborate with your team at the workspace\n                            "\n                            data-toggle="tooltip"\n                            data-placement="bottom"\n                            >\n                        '),t=e["link-to"]||s&&s["link-to"],r={hash:{"class":"btn btn-primary"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},inverse:d.noop,fn:d.program(2,o,n),contexts:[s],types:["STRING"],data:n},a=t?t.call(s,"Workspaces.create",r):f.call(s,"link-to","Workspaces.create",r),(a||0===a)&&n.buffer.push(a),n.buffer.push("\n                    </div>\n                </div>\n            "),l}function o(s,n){n.buffer.push('\n                            <span class="glyphicon glyphicon-plus"></span>\n                        Create new workspace\n                        ')}function l(s,n){var a,t="";return n.buffer.push('\n                    <div class="col-md-8 col-md-offset-2">\n                        <h4>Please select workspace you want to work with</h4>\n\n                        <div class="list-group">\n                            '),a=e.each.call(s,{hash:{},hashTypes:{},hashContexts:{},inverse:d.noop,fn:d.program(5,p,n),contexts:[],types:[],data:n}),(a||0===a)&&n.buffer.push(a),n.buffer.push("\n                        </div>\n                    </div>\n                "),t}function p(s,n){var a="";return n.buffer.push("\n                                "),n.buffer.push(v(e.view.call(s,"Vaultier.WorkspacesIndexItemView",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:n}))),n.buffer.push("\n                            "),a}function c(s,n){var a,t,r,o="";return n.buffer.push('\n                    <div class="top-50">\n                        <div class="jumbotron vlt-bigbox vlt-workspace">\n                            <div class="vlt-header">\n                                <div class="vlt-icon">\n\n                                </div>\n                                <div class="vlt-title">\n                                    <h1>You do not have any workspace yet</h1>\n                                </div>\n                            </div>\n\n                            <p>\n                                Workspaces are used to organize your secrets. All your vaults, cards and secrets are\n                                stored inside workspace. You can also collaborate with your team at the workspace\n                            </p>\n\n                            <p class="top-30">\n                                '),t=e["link-to"]||s&&s["link-to"],r={hash:{"class":"btn btn-lg btn-primary"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},inverse:d.noop,fn:d.program(8,i,n),contexts:[s],types:["STRING"],data:n},a=t?t.call(s,"Workspaces.create",r):f.call(s,"link-to","Workspaces.create",r),(a||0===a)&&n.buffer.push(a),n.buffer.push("\n                            </p>\n                        </div>\n                    </div>\n                "),o}function i(s,n){n.buffer.push('\n                                    <span class="glyphicon glyphicon-plus"></span>\n                                    Create new workspace\n                                ')}this.compilerInfo=[4,">= 1.0.0"],e=this.merge(e,Ember.Handlebars.helpers),t=t||{};var h,u="",d=this,f=e.helperMissing,v=this.escapeExpression;return t.buffer.push('<div class="container">\n    <div class="vlt-page vlt-page-plain">\n\n        <div class="vlt-page-nav">\n\n            '),h=e["if"].call(n,"length",{hash:{},hashTypes:{},hashContexts:{},inverse:d.noop,fn:d.program(1,r,t),contexts:[n],types:["ID"],data:t}),(h||0===h)&&t.buffer.push(h),t.buffer.push('\n\n            <div class="clearfix"></div>\n\n        </div>\n\n        <div class="row">\n            <div class="col-md-12">\n\n                '),h=e["if"].call(n,"length",{hash:{},hashTypes:{},hashContexts:{},inverse:d.program(7,c,t),fn:d.program(4,l,t),contexts:[n],types:["ID"],data:t}),(h||0===h)&&t.buffer.push(h),t.buffer.push("\n\n            </div>\n</div>\n</div>\n</div>"),u});
Ember.TEMPLATES["Workspace/WorkspacesIndexItem"]=Ember.Handlebars.template(function(s,e,t,a,i){function n(s,e){var a,i,n,r="";return e.buffer.push('\n    <div class="vlt-icon">\n        <img src="/static/vaultier/images/icon-workspace-grey.png"/>\n    </div>\n    <div class="vlt-text">\n        <h4 class="list-group-item-heading">'),a=t._triageMustache.call(s,"name",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:e}),(a||0===a)&&e.buffer.push(a),e.buffer.push('</h4>\n\n        <p class="list-group-item-text">\n            '),a=t._triageMustache.call(s,"description",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:e}),(a||0===a)&&e.buffer.push(a),e.buffer.push("\n        </p>\n\n        "),e.buffer.push(c(t.view.call(s,"Vaultier.WorkspacesIndexWithoutKeysView",{hash:{workspace:""},hashTypes:{workspace:"ID"},hashContexts:{workspace:s},contexts:[s],types:["ID"],data:e}))),e.buffer.push('\n\n        <div class="top-15">\n            <div class="vlt-footer-item help-block pull-left">\n                '),e.buffer.push(c((i=t.printUser||s&&s.printUser,n={hash:{ellipsis:20,prefix:"Created by:"},hashTypes:{ellipsis:"INTEGER",prefix:"STRING"},hashContexts:{ellipsis:s,prefix:s},contexts:[s],types:["ID"],data:e},i?i.call(s,"created_by",n):o.call(s,"printUser","created_by",n)))),e.buffer.push('\n            </div>\n            <div class="vlt-footer-item help-block pull-right">\n                '),e.buffer.push(c((i=t.printAgo||s&&s.printAgo,n={hash:{prefix:"Latest modification at:"},hashTypes:{prefix:"STRING"},hashContexts:{prefix:s},contexts:[s],types:["ID"],data:e},i?i.call(s,"updated_at",n):o.call(s,"printAgo","updated_at",n)))),e.buffer.push('\n            </div>\n            <div class="clearfix"></div>\n        </div>\n\n        <div class="clearfix"></div>\n    </div>\n\n'),r}this.compilerInfo=[4,">= 1.0.0"],t=this.merge(t,Ember.Handlebars.helpers),i=i||{};var r,p,l,h="",c=this.escapeExpression,o=t.helperMissing,u=this;return p=t["link-to"]||e&&e["link-to"],l={hash:{"class":"list-group-item vlt-workspace-item"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},inverse:u.noop,fn:u.program(1,n,i),contexts:[e,e],types:["STRING","ID"],data:i},r=p?p.call(e,"Workspace.index","slug",l):o.call(e,"link-to","Workspace.index","slug",l),(r||0===r)&&i.buffer.push(r),i.buffer.push("\n\n\n\n"),h});
Ember.TEMPLATES["Workspace/WorkspacesIndexWithoutKeys"]=Ember.Handlebars.template(function(e,s,r,a,n){function o(e,s){s.buffer.push('\n    <div class="alert alert-warning top-15">\n        <b> Your access to workspace is limited.<br/></b>\n        Workspace key has not been transfered to you yet. Key will be transfered to you automatically once\n        some workspace team member will go online.\n    </div>\n')}function t(e,s){s.buffer.push('\n    <div class="alert alert-danger top-15">\n        <b>Workspace key error. <br/></b>\n        Your workspace key cannot be decoded. It means you have no access to workspace secret data\n    </div>\n')}this.compilerInfo=[4,">= 1.0.0"],r=this.merge(r,Ember.Handlebars.helpers),n=n||{};var c,p="",h=this;return c=r.unless.call(s,"view.workspace.hasValidKey",{hash:{},hashTypes:{},hashContexts:{},inverse:h.noop,fn:h.program(1,o,n),contexts:[s],types:["ID"],data:n}),(c||0===c)&&n.buffer.push(c),n.buffer.push("\n\n"),c=r["if"].call(s,"view.workspace.keyError",{hash:{},hashTypes:{},hashContexts:{},inverse:h.noop,fn:h.program(3,t,n),contexts:[s],types:["ID"],data:n}),(c||0===c)&&n.buffer.push(c),n.buffer.push("\n"),p});
Ember.TEMPLATES["Workspace/WorkspacesCreate"]=Ember.Handlebars.template(function(s,e,a,n,t){this.compilerInfo=[4,">= 1.0.0"],a=this.merge(a,Ember.Handlebars.helpers),t=t||{};var l,r="",o=this.escapeExpression;return t.buffer.push('<div class="container">\n    <div class="vlt-page vlt-page-plain">\n        <div class="vlt-dialog col-md-8 col-md-offset-2 top-50">\n            <form>\n                <div class="vlt-dialog-content">\n                    <div class="modal-header">\n                        <h2>Create new workspace</h2>\n                    </div>\n                    <div class="vlt-dialog-body">\n\n                        <div class="col-md-10 col-md-offset-1">\n\n                            <div class="form-group" '),t.buffer.push(o(a["bind-attr"].call(e,{hash:{"class":"content.errors.name:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:t}))),t.buffer.push('>\n                                <label for="workspace-name">Name</label>\n                                '),t.buffer.push(o(a.view.call(e,"Em.TextField",{hash:{elementId:"workspace-name",valueBinding:"content.name","class":"form-control"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING"},hashContexts:{elementId:e,valueBinding:e,"class":e},contexts:[e],types:["ID"],data:t}))),t.buffer.push('\n                                <span class="error">\n                                    '),l=a._triageMustache.call(e,"content.errors.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push('\n                                </span>\n                            </div>\n\n                            <div class="form-group" '),t.buffer.push(o(a["bind-attr"].call(e,{hash:{"class":"content.errors.description:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:t}))),t.buffer.push('>\n                                <label for="workspace-description">Description</label>\n                                '),t.buffer.push(o(a.view.call(e,"Em.TextArea",{hash:{elementId:"workspace-description",valueBinding:"content.description","class":"form-control",rows:5},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING",rows:"INTEGER"},hashContexts:{elementId:e,valueBinding:e,"class":e,rows:e},contexts:[e],types:["ID"],data:t}))),t.buffer.push('\n                                <span class="error">\n                                    '),l=a._triageMustache.call(e,"content.errors.description",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(l||0===l)&&t.buffer.push(l),t.buffer.push('\n                                </span>\n                            </div>\n                        </div>\n\n                        <div class="clearfix"></div>\n\n                    </div>\n                    <div class="vlt-dialog-footer">\n                        <a href="javascript:window.history.go(-1)" class="btn btn-default btn-sm">\n                            <span class="glyphicon glyphicon-chevron-left"></span>\n                            Back\n                        </a>\n                        <button '),t.buffer.push(o(a.action.call(e,"save",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}))),t.buffer.push(" "),t.buffer.push(o(a["bind-attr"].call(e,{hash:{disabled:"saveDisabled"},hashTypes:{disabled:"ID"},hashContexts:{disabled:e},contexts:[],types:[],data:t}))),t.buffer.push(' class="btn btn-primary">\n                            <span class="glyphicon glyphicon-ok"></span>\n                            Create new workspace\n                        </button>\n                    </div>\n\n                </div>\n            </form>\n        </div>\n        <div class="clearfix"></div>\n    </div>\n</div>\n\n\n'),r});
Ember.TEMPLATES["Workspace/WorkspaceEdit"]=Ember.Handlebars.template(function(s,e,a,r,n){this.compilerInfo=[4,">= 1.0.0"],a=this.merge(a,Ember.Handlebars.helpers),n=n||{};var t,l="",o=this.escapeExpression;return n.buffer.push('<div class="container">\r\n    <div class="vlt-page vlt-page-plain">\r\n        <div class="vlt-dialog col-md-8 col-md-offset-2 top-50">\r\n            <form>\r\n                <div class="vlt-dialog-content">\r\n                    <div class="vlt-dialog-header">\r\n                        <h2>Edit workspace</h2>\r\n                    </div>\r\n                    <div class="vlt-dialog-body">\r\n\r\n                        <div class="col-md-10 col-md-offset-1">\r\n\r\n                            <div class="form-group" '),n.buffer.push(o(a["bind-attr"].call(e,{hash:{"class":"errors.name:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:n}))),n.buffer.push('>\r\n                                <label for="workspace-name">Name</label>\r\n\r\n                                '),n.buffer.push(o(a.view.call(e,"Em.TextField",{hash:{elementId:"workspace-name",valueBinding:"content.name","class":"form-control"},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING"},hashContexts:{elementId:e,valueBinding:e,"class":e},contexts:[e],types:["ID"],data:n}))),n.buffer.push('\r\n                                <span class="error">\r\n                                    '),t=a._triageMustache.call(e,"content.errors.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:n}),(t||0===t)&&n.buffer.push(t),n.buffer.push('\r\n                                </span></div>\r\n\r\n                            <div class="form-group" '),n.buffer.push(o(a["bind-attr"].call(e,{hash:{"class":"errors.description:has-error"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},contexts:[],types:[],data:n}))),n.buffer.push('>\r\n                                <label for="workspace-description">Description</label>\r\n                                '),n.buffer.push(o(a.view.call(e,"Em.TextArea",{hash:{elementId:"workspace-description",valueBinding:"content.description","class":"form-control",rows:5},hashTypes:{elementId:"STRING",valueBinding:"STRING","class":"STRING",rows:"INTEGER"},hashContexts:{elementId:e,valueBinding:e,"class":e,rows:e},contexts:[e],types:["ID"],data:n}))),n.buffer.push('\r\n                                <span class="error">\r\n                                    '),t=a._triageMustache.call(e,"content.errors.description",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:n}),(t||0===t)&&n.buffer.push(t),n.buffer.push('\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class="clearfix"></div>\r\n\r\n                    </div>\r\n                    <div class="vlt-dialog-footer">\r\n                        <a href="javascript:window.history.go(-1)" class="btn btn-default btn-sm">\r\n                            <span class="glyphicon glyphicon-chevron-left"></span>\r\n                            Back\r\n                        </a>\r\n                        <button '),n.buffer.push(o(a.action.call(e,"save",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:n}))),n.buffer.push(" "),n.buffer.push(o(a["bind-attr"].call(e,{hash:{disabled:"saveDisabled"},hashTypes:{disabled:"ID"},hashContexts:{disabled:e},contexts:[],types:[],data:n}))),n.buffer.push(' class="btn btn-primary">\r\n                            <span class="glyphicon glyphicon-ok"></span>\r\n                            Save changes\r\n                        </button>\r\n                    </div>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n        <div class="clearfix"></div>\r\n    </div>\r\n</div>\r\n\r\n\r\n'),l});
Ember.TEMPLATES["Workspace/WorkspaceNoKeys"]=Ember.Handlebars.template(function(s,e,n,a,t){function i(s,e){var a,t="";return e.buffer.push("\n                            "),a=n._triageMustache.call(s,"workspace.description",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:e}),(a||0===a)&&e.buffer.push(a),e.buffer.push("\n                        "),t}function l(s,e){e.buffer.push("\n                            No description given\n                        ")}this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),t=t||{};var r,c,o,d="",h=this,v=n.helperMissing,p=this.escapeExpression;return t.buffer.push('<div class="container-full">\n    <div class="vlt-page vlt-page-with-sidebar">\n        <div class="vlt-page-content">\n            <div class="col-md-12">\n\n                <div class="vlt-page-content-responsive-header">\n                    <div class="row-fluid">\n                        <div class="col-xs-12 text-center">\n                            <h2>Workspace: '),r=n._triageMustache.call(e,"workspace.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(r||0===r)&&t.buffer.push(r),t.buffer.push(' </h2>\n                        </div>\n                        <div class="clearfix"></div>\n                    </div>\n                </div>\n\n                <div class="top-50">\n                    <div class="jumbotron vlt-bigbox vlt-no-keys">\n                        <div class="vlt-header">\n                            <div class="vlt-icon">\n\n                            </div>\n                            <div class="vlt-title">\n                                <h1>You do not have keys to workspace yet </h1>\n                            </div>\n                        </div>\n                        <p>\n                            Please wait till keys will be automatically transfered to you\n                            when somebody of team goes online. You will get email once keys received.\n                            <br/>\n                            <br/>\n                            Keys are used to encrypt and decrypt workspace data\n\n                        </p>\n                    </div>\n\n                </div>\n\n            </div>\n        </div>\n\n        <div class="vlt-page-sidebar">\n            <div class="vlt-sidebar-block">\n                <div class="vlt-sidebar-block-heading">\n                    <div class="vlt-header">\n                        <img src="/static/vaultier/images/icon-workspace-grey.png" class="vlt-icon">\n\n                        <h3 class="vlt-title">\n                            '),r=n._triageMustache.call(e,"workspace.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:t}),(r||0===r)&&t.buffer.push(r),t.buffer.push('\n                        </h3>\n                    </div>\n                    <div class="vlt-body">\n                        '),r=n["if"].call(e,"workspace.description",{hash:{},hashTypes:{},hashContexts:{},inverse:h.program(3,l,t),fn:h.program(1,i,t),contexts:[e],types:["ID"],data:t}),(r||0===r)&&t.buffer.push(r),t.buffer.push('\n                    </div>\n                </div>\n\n                <div class="vlt-sidebar-block-sharing">\n                    <div class="vlt-header">\n                        <img src="/static/vaultier/images/icon-team-grey.png" class="vlt-icon">\n\n                        <h3 class="vlt-title">\n                            Sharing with\n                        </h3>\n                    </div>\n                    <div class="vlt-body">\n                         '),t.buffer.push(p((c=n["member-box"]||e&&e["member-box"],o={hash:{roles:"memberships",user:"auth.user"},hashTypes:{roles:"ID",user:"ID"},hashContexts:{roles:e,user:e},contexts:[],types:[],data:t},c?c.call(e,o):v.call(e,"member-box",o)))),t.buffer.push("\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n"),d});
//# sourceMappingURL=data:application/json;base64,