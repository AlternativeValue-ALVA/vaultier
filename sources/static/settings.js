Vaultier.ChangeKeyComponent=Ember.Component.extend({layoutName:"Settings/ChangeKey",keys:null,privateKeySaved:!1,publicKeySaved:!1,publicButtonDisabled:function(){return this.get("publicKeySaved")||!this.get("privateKeySaved")}.property("privateKeySaved","publicKeySaved"),didInsertElement:function(){if(!this.get("changekey"))throw Error("service:changekey has to be injected into changekey component");this.get("keys")||this.generate()},generate:function(){var e=this.get("changekey");e.generateKeys(function(e){this.set("keys",e)}.bind(this))},actions:{savePrivateKey:function(){var e=this.get("keys.privateKey"),t=new Blob([e],{type:"text/plain;charset=utf-8"});saveAs(t,"vaultier.key"),this.set("privateKeySaved",!0)},savePublicKey:function(){this.set("publicKeySaved",!0);var e={};this.sendAction("action",this.get("keys"),e),e.promise&&e.promise.catch(function(e){throw this.set("publicKeySaved",!1),e}.bind(this))}}});
Vaultier.SettingsRoute=Ember.Route.extend({beforeModel:function(t){return this.get("auth").checkAuthenticatedOrLogin(t)?void 0:!1},deactivate:function(){this.get("auth.user").rollback()}}),Vaultier.SettingsView=Ember.View.extend({TabView:Ember.View.extend({classNameBindings:"isActive:active".w(),tagName:"li",isActive:function(){var t=this.get("tab"),e=this.get("parentView.controller.controllers.application.currentPath"),i=e.split(".")[e.split(".").length-1];return t==i}.property("parentView.controller.controllers.application.currentPath")}),templateName:"Settings/SettingsIndex",layoutName:"Layout/LayoutStandard"}),Vaultier.SettingsController=Ember.Controller.extend({needs:["application"]}),Vaultier.SettingsIndexRoute=Ember.Route.extend({beforeModel:function(t){t.abort(),this.transitionTo("Settings.personal")}});
Vaultier.SettingsPersonalRoute=Ember.Route.extend({renderTemplate:function(){this.render("SettingsPersonal",{outlet:"Settings"})},setupController:function(e){e.set("content",this.get("auth.user")),e.get("controllers.Settings").set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addSettings().addText("Personal settings"))},actions:{save:function(){var e=this.get("controller.content"),t=e.saveRecord().then(function(){$.notify("Your changes has been successfully saved.","success")}.bind(this),function(){$.notify("Oooups! Something went wrong.","error")});ApplicationLoader.promise(t)}}}),Vaultier.SettingsPersonalController=Ember.ObjectController.extend({needs:["Settings"]}),Vaultier.SettingsPersonalView=Ember.View.extend({templateName:"Settings/SettingsPersonal"});
Vaultier.SettingsKeysRoute=Ember.Route.extend({renderTemplate:function(){this.render("SettingsKeys",{outlet:"Settings"})},setupController:function(e){e.set("stepInfo",!0),e.set("stepSuccess",!1),e.set("stepKeys",!1),e.get("controllers.Settings").set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addSettings().addText("Regenerate private key"))},actions:{generate:function(){this.set("controller.stepInfo",!1),this.set("controller.stepKeys",!0)},savePrivateKey:function(){var e=this.get("controller.keys.privateKey"),t=new Blob([e],{type:"text/plain;charset=utf-8"});saveAs(t,"vaultier.key"),this.set("privateKeySaved",!0)},save:function(e,t){this.set("controller.keys",e);var s=this.get("changekey").changeKey(e).then(function(){this.set("controller.stepKeys",!1),this.set("controller.stepSuccess",!0)}.bind(this)).catch(function(e){$.notify("There was an error during update of your key","error"),this.get("errors").consoleError(e)}.bind(this));ApplicationLoader.promise(s),t.promise=s}}}),Vaultier.SettingsKeysController=Ember.Controller.extend({needs:["Settings"]}),Vaultier.SettingsKeysView=Ember.View.extend({templateName:"Settings/SettingsKeys"});
//# sourceMappingURL=data:application/json;base64,