Vaultier.WorkspacesRoute=Ember.Route.extend({beforeModel:function(e){if(!this.get("auth").checkAuthenticatedOrLogin(e))return!1;if(this.get("invitations").hasInvitationsInSession()){e.abort();var t=e.router.generate("Invitation.accept");return void this.router.replaceWith(t)}}}),Vaultier.WorkspacesIndexRoute=Ember.Route.extend({model:function(){var e=this.get("store"),t=e.find("Workspace").then(function(e){if(1==e.get("length")){var t=e.objectAt(0);this.transitionTo("Workspace.index",t.get("slug"))}else this.transitionTo("Workspaces.select")}.bind(this));return t}}),Vaultier.WorkspacesSelectRoute=Ember.Route.extend({model:function(){var e=this.get("store"),t=e.find("Workspace");return t},setupController:function(e,t){this._super(e,t),e.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addText("List of workspaces","/static/vaultier/images/icon-home-grey.png"))},renderTemplate:function(){this.render("WorkspacesIndex")}}),Vaultier.WorkspacesIndexView=Ember.View.extend({templateName:"Workspace/WorkspacesIndex",layoutName:"Layout/LayoutStandard"}),Vaultier.WorkspacesIndexItemView=Ember.View.extend({templateName:"Workspace/WorkspacesIndexItem"}),Vaultier.WorkspacesIndexWithoutKeysView=Ember.View.extend({templateName:"Workspace/WorkspacesIndexWithoutKeys"});
Vaultier.WorkspacesCreateRoute=Ember.Route.extend({actions:{save:function(){var e=this.get("controller.content"),t=e.saveRecord().then(function(){$.notify("You workspace has been successfully created.","success"),this.transitionTo("Workspace.index",e.get("slug"))}.bind(this)).catch(function(e){$.notify("Oooups! Something went wrong.","error"),this.get("errors").logError(e)}.bind(this));return ApplicationLoader.promise(t),t}},setupController:function(e,t){this._super(e,t),e.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addText("Create new workspace"))},model:function(){var e=this.get("store"),t=e.createRecord("Workspace");return t}}),Vaultier.WorkspacesCreateController=Ember.ObjectController.extend({breadcrumbs:null}),Vaultier.WorkspacesCreateView=Ember.View.extend({templateName:"Workspace/WorkspacesCreate",layoutName:"Layout/LayoutStandard"});
Vaultier.WorkspaceKeysMixin=Ember.Mixin.create({checkWorkspaceKeys:function(){var e=this.modelFor("Workspace");return e.get("membership.status")!=Vaultier.Member.proto().statuses.MEMBER.value?(this.transitionTo("Workspace.noKeys"),!1):!0}}),Vaultier.WorkspaceRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{workspacekey:null,model:function(e){var t=this.get("store").find("Workspace",e.workspace);return t},afterModel:function(e){this.get("workspacekey").selectWorkspace(e),this.get("environment").set("workspace",e),this.checkWorkspaceKeys()},deactivate:function(){this.get("environment").set("workspace",null)},serialize:function(e){return"string"==typeof e||"number"==typeof e?e:{workspace:e.get("slug")}},actions:{deleteWorkspace:function(e){Vaultier.confirmModal(this,"Are you sure?",function(){var t=e.deleteRecord().then(function(){$.notify("Your workspace has been successfully deleted.","success"),this.transitionTo("Workspaces.select")}.bind(this)).catch(function(e){throw $.notify("Oooups! Something went wrong.","error"),e}.bind(this));ApplicationLoader.promise(t)}.bind(this))}}}),Vaultier.WorkspaceIndexRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,Ember.Evented,{beforeModel:function(){this.checkWorkspaceKeys()&&this.transitionTo("Vaults.index")}}),Vaultier.WorkspaceNoKeysRoute=Ember.Route.extend({workspacekey:null,keysTransfered:function(){var e=this.get("controller.workspace");this.transitionTo("Workspace.index",e)},activate:function(){var e=this.get("workspacekey");e.on("keyTransfered",this,this.keysTransfered)},deactivate:function(){var e=this.get("workspacekey");e.off("keyTransfered",this,this.keysTransfered)},model:function(){var e=this.modelFor("Workspace"),t=this.get("store"),r=t.find("Role",{to_workspace:e.get("id")}).then(function(e){return e.toArray()});return Ember.RSVP.hash({workspace:e,memberships:r})},afterModel:function(e,t){e.workspace.get("membership.status")==Vaultier.Member.proto().statuses.MEMBER.value&&(t.abort(),this.transitionTo("Workspace.index"),$.notify("Your already have valid workspace keys.","success"))},setupController:function(e,t){this._super.apply(this,arguments);var r=this.get("environment");e.set("memberships",t.memberships),e.set("workspace",t.workspace),r.set("workspace",t.workspace),e.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:r}).addHome().addWorkspace().addText("Waiting for keys"))}}),Vaultier.WorkspaceNoKeysView=Ember.View.extend({templateName:"Workspace/WorkspaceNoKeys",layoutName:"Layout/LayoutStandard"});
Vaultier.WorkspaceEditRoute=Ember.Route.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},model:function(e,t){var r=this.modelFor("Workspace");if(this.get("auth").checkPermissions(t,function(){return r.get("perms.update")}.bind(this),!0))return r},setupController:function(e,t){this._super(e,t),e.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addWorkspace().addText("Edit workspace"))},actions:{save:function(){var e=this.get("controller.content"),t=e.saveRecord().then(function(){$.notify("Your changes has been successfully saved.","success"),history.go(-1)}.bind(this)).catch(function(e){$.notify("Oooups! Something went wrong.","error"),this.get("errors").logError(e)}.bind(this));ApplicationLoader.promise(t)}}}),Vaultier.WorkspaceEditController=Ember.ObjectController.extend({breadcrumbs:null}),Vaultier.WorkspaceEditView=Ember.View.extend({templateName:"Workspace/WorkspaceEdit",layoutName:"Layout/LayoutStandard"});
Vaultier.WorkspaceMixin=Em.Mixin.create({beforeModel:function(){this.checkWorkspaceKeys()},setupInviteData:function(){var e=this.modelFor("Workspace");return{inviteObject:e}},setupBlocks:function(){return{workspace:!0}},setupBreadcrumbs:function(){return Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addWorkspace().addCollaboratorsIndex("Workspace.memberIndex")},setupInviteRoute:function(){return{inviteRouteName:"Workspace.memberInvite"}}}),Vaultier.WorkspaceMemberIndexRoute=Vaultier.MemberIndexRoute.extend(Vaultier.WorkspaceKeysMixin,Vaultier.WorkspaceMixin),Vaultier.WorkspaceMemberIndexController=Vaultier.MemberIndexController.extend({}),Vaultier.WorkspaceMemberInviteRoute=Vaultier.MemberInviteRoute.extend(Vaultier.WorkspaceKeysMixin,{beforeModel:function(){this.checkWorkspaceKeys()},setupInviteData:function(){var e=this.modelFor("Workspace");return{inviteObject:e,inviteParams:{to_workspace:e},inviteWorkspace:e}},setupBreadcrumbs:function(){return Vaultier.Breadcrumbs.create({router:this.get("router"),environment:this.get("environment")}).addHome().addWorkspace().addCollaboratorsIndex("Workspace.memberIndex").addCollaboratorsInvite("Workspace.memberInvite")}}),Vaultier.WorkspaceMemberInviteController=Vaultier.MemberInviteController.extend({});
"use strict";Vaultier.WorkspaceMemberManagementRoute=Vaultier.MemberManagementRoute.extend(Vaultier.WorkspaceKeysMixin,Vaultier.WorkspaceMixin),Vaultier.WorkspaceMemberManagementController=Vaultier.MemberManagementController.extend({});
//# sourceMappingURL=data:application/json;base64,