Po.NS("Utils"),Utils.E={recordId:function(t,i){if(i=Po.F.optional(i,!1),t instanceof RL.Model){var r=parseInt(t.get("id"));return isNaN(r)&&(r=t.get("id")),r}var n=parseInt(t);if(isNaN(n)){if(i)throw"Not an id";return null}return n}};
Po.NS("Utils"),Utils.ConstantList=function(t){Po.merge(this,t)},Utils.ConstantList.prototype.toArray=function(){var t=[];for(prop in this)this.hasOwnProperty(prop)&&t.push({id:prop,text:this[prop].text,value:this[prop].value});return t},Utils.ConstantList.prototype.getByValue=function(t){for(prop in this)if(this.hasOwnProperty(prop)&&this[prop].value==t)return this[prop]},Utils.ConstantList.prototype.getKeyByValue=function(t){for(prop in this)if(this.hasOwnProperty(prop)&&this[prop].value==t)return prop};
Po.NS("Utils"),Utils.Singleton=Ember.Mixin.create({current:function(){return this._current||(this._current=this.createCurrent()),this._current},createCurrent:function(){return this.create({})},currentProp:function(t,r){var e=this.current();if(e)return"undefined"!=typeof r?(e.set(t,r),r):e.get(t)}});
Po.NS("Utils"),Utils.HandlebarsHelpers=Ember.Object.extend({debug:function(e){"use strict";console.log(e)},ucfirst:function(e){return e&&(e=e.charAt(0).toUpperCase()+e.slice(1)),e},humanFileSize:function(e){var r=Math.floor(Math.log(e)/Math.log(1024));return 1*(e/Math.pow(1024,r)).toFixed(2)+" "+["B","kB","MB","GB","TB"][r]},renderMarkdown:function(e,r){return e||(e=""),marked.setOptions(Po.merge({gfm:!0,tables:!0,breaks:!1,pedantic:!1,sanitize:!0,smartLists:!0,smartypants:!1},r)),marked(e)},gravatarImg:function(e,r){var t=r.hash.class||"",i=window.location.protocol+"//"+window.location.host,s="mm";-1===i.indexOf(":")&&(s=encodeURIComponent(i+"/static/vaultier/images/icon-avatar-grey.png"));var n="undefined"==typeof r.hash.size?32:r.hash.size,a='<img style="width:'+n+"px; height:"+n+'px;" class="'+t+'" src="http://www.gravatar.com/avatar/'+CryptoJS.MD5(e)+"?s="+n+"&d="+s+'" />';return a},printUser:function(e,r){e||(e={email:"deleteduser@vaultier.org",nickname:"Deleted user"});var t,i=e.email||e.get("email"),s=e.nickname||e.get("nickname"),n=r.hash.size||25,a=r.hash.ellipsis||60,o=r.hash.prefix||"",l=r.hash.disableTooltip||!1,p=r.hash.disableName||!1,d=this.gravatarImg(i,{hash:{size:n}});t=r.hash.email?i:this.ucfirst(s);var h=this.ellipsis(t,a);if(l)u="";else var u='data-toggle="tooltip" title="{prefix} {name} ({email})"'.replace("{prefix}",o).replace("{name}",t).replace("{email}",i);return p&&(h="",t=""),'<span class="vlt-user" {tooltip} >{avatar}{name}</span>'.replace("{tooltip}",u).replace("{name}",h).replace("{avatar}",d)},printAgo:function(e,r){var t,i=r.hash.prefix||"";try{t=moment(e).fromNow()}catch(s){console.error(s.stack)}return i&&(e=i+" "+e),'<span data-toggle=tooltip title="'+e+'">'+t+"</span>"},ellipsis:function(e,r,t){"string"!=typeof t&&(t="..."),e||(e="");var i=e.replace(/(<([^>]+)>)/g,"");if(i.length>r){var s=i.substr(0,r-t.length)+t;return s}return i},ifIndex:function(e){var r=e.data.view.contentIndex+1,t=e.hash.is;return r%t===0?e.fn(this):void 0},times:function(e,r){for(var t="",i=0;e>i;++i)t+=r.fn(i);return t},ifCond:function(v1,operator,v2,options){switch(operator){case"==":return v1==v2?options.fn(this):options.inverse(this);case"!=":return v1!=v2?options.fn(this):options.inverse(this);case"===":return v1===v2?options.fn(this):options.inverse(this);case"!==":return v1!==v2?options.fn(this):options.inverse(this);case"&&":return v1&&v2?options.fn(this):options.inverse(this);case"||":return v1||v2?options.fn(this):options.inverse(this);case"<":return v2>v1?options.fn(this):options.inverse(this);case"<=":return v2>=v1?options.fn(this):options.inverse(this);case">":return v1>v2?options.fn(this):options.inverse(this);case">=":return v1>=v2?options.fn(this):options.inverse(this);default:return eval(""+v1+operator+v2)?options.fn(this):options.inverse(this)}},register:function(){var renderMarkdown=this.renderMarkdown.bind(this);Ember.Handlebars.registerBoundHelper("renderMarkdown",function(e){return new Ember.Handlebars.SafeString(renderMarkdown(e))});var printAgo=this.printAgo.bind(this);Ember.Handlebars.registerBoundHelper("printAgo",function(e,r){return new Ember.Handlebars.SafeString(printAgo(e,r))});var debug=this.debug.bind(this);Ember.Handlebars.registerBoundHelper("debug",debug);var ucfirst=this.ucfirst.bind(this);Ember.Handlebars.registerBoundHelper("ucfirst",ucfirst);var humanFilesize=this.humanFileSize.bind(this);Ember.Handlebars.registerBoundHelper("humanFilesize",humanFilesize);var gravatarImg=this.gravatarImg.bind(this);Ember.Handlebars.registerBoundHelper("gravatarImg",function(e,r){return new Ember.Handlebars.SafeString(gravatarImg(e,r))});var printUser=this.printUser.bind(this);Ember.Handlebars.registerBoundHelper("printUser",function(e,r){return new Ember.Handlebars.SafeString(printUser(e,r))});var ellipsis=this.ellipsis.bind(this);Ember.Handlebars.registerBoundHelper("ellipsis",ellipsis);var times=this.times.bind(this);Ember.Handlebars.registerHelper("times",times);var ifCond=this.ifCond.bind(this);Ember.Handlebars.registerHelper("ifCond",ifCond);var ifIndex=this.ifIndex;Ember.Handlebars.registerHelper("ifIndex",ifIndex),Ember.Handlebars.registerHelper("exp",function(exp,options){var get=function(e){return options.data.view.get("controller."+e)},parseVariable=function(e){return e.object?parseVariable(e.object)+"."+e.property.name:e.name},variables=function(e,r){return r||(r=[]),e&&("MemberExpression"==e.type||"Identifier"==e.type?r.push(parseVariable(e,"")):(variables(e.left,r),variables(e.right,r))),r},result;try{for(var parsed=jsep(exp),vars=variables(parsed),mutated=exp,i=0;i<vars.length;i++)mutated=mutated.replace(vars[i],"get('"+vars[i]+"')");result=!1,eval("result = ("+mutated+")")}catch(e){throw console.error(e.stack),Error("Cannot parse expression: {exp}, parsed as {mutated}".replace("{exp}",exp).replace("{mutated}",mutated))}return result?options.fn(this):options.inverse(this)})}}),Utils.HandlebarsHelpers.reopenClass(Utils.Singleton);
Po.NS("Utils"),Utils.RSVPAjax=function(n){return new Ember.RSVP.Promise(function(i,o){Ember.$.ajax(n).done(function(n){i(n)}).fail(function(n){o(n)})})};
Po.NS("Utils"),Utils.MutableMethodsAdapterMixin=Ember.Mixin.create({getOverride:function(r,e){return e=e.typeKey,this.overrides&&this.overrides[e]&&this.overrides[e][r]?this.overrides[e][r]:void 0},doOverride:function(r,e,i){var t=this.getOverride(r,e);return t?t.apply(this,i):this._super.apply(this,i)},findQuery:function(r,e){return this.doOverride("findQuery",e,arguments)},find:function(r,e){return this.doOverride("find",e,arguments)},updateRecord:function(r,e){return this.doOverride("updateRecord",e,arguments)}}),Utils.MutableUrlsAdapterMixin=Ember.Mixin.create({buildURL:function(r,e){return this.urls[r]?(url=this.urls[r],e&&("/"!==url.charAt(url.length-1)&&(url+="/"),url+=e),url):this._super(r,e)}});
Ember.FEATURES["query-params"]=!0,Ember.MODEL_FACTORY_INJECTIONS=!0,Vaultier=Ember.Application.create({LOG_TRANSITIONS:!0,ready:function(){InitializeConfig(this),LGTM.configure("defer",Ember.RSVP.defer),$.notify.defaults({className:"success",style:"bootstrap",position:"bottom center",autoHideDelay:7e3,css:"vlt-notification"}),Utils.HandlebarsHelpers.current().register(),$.cookie.json=!0,$("body").tooltip({selector:"[data-toggle=tooltip]"}),setInterval(function(){var e=$("body").height(),t=$(window).height(),i=$("#vlt-footer").height();$("#vlt-footer").css(t>e+i?{position:"fixed"}:{position:"relative"})},500),this.keypressBindings(),this.registerDI(this)}}),Vaultier.deferReadiness();
"use strict";Vaultier.keypressBindings=function(){var n=[{keys:"alt s",is_exclusive:!0,on_keydown:function(){var n=$(".vlt-search-box select");return n.length&&n[0].selectize.focus(),!1},on_keyup:function(){},"this":window}],e=function(){keypress.register_many(n)},i=function(){keypress.unregister_many(n)};$(document).on("ApplicationLoaderShow",function(){e()}),$(document).on("ApplicationLoaderHide",function(){i()}),e()};
Vaultier.registerDI=function(e){e.register("config:main",Vaultier.Config),e.inject("route","config","config:main"),e.inject("controller","config","config:main"),e.inject("view","config","config:main"),e.inject("service","config","config:main"),e.register("store:main",Vaultier.Client,{instantiate:!1}),e.inject("route","store","store:main"),e.inject("controller","store","store:main"),RESTless.set("client",Vaultier.Client),e.register("service:errors",Service.Errors),e.inject("route","errors","service:errors"),e.inject("service:errors","errorController","controller:ErrorGeneric"),e.inject("service:errors","router","router:main"),e.register("service:session",Service.Session),e.register("service:storage",Service.Storage),e.register("service:auth",Service.Auth),e.inject("service:auth","coder","service:coder"),e.inject("service:auth","store","store:main"),e.inject("service:auth","router","router:main"),e.inject("service:auth","session","service:session"),e.inject("service:auth","storage","service:storage"),e.inject("route","auth","service:auth"),e.inject("controller","auth","service:auth"),e.register("service:coder",Service.Coder),e.register("service:invitations",Service.Invitations),e.inject("service:invitations","store","store:main"),e.inject("service:invitations","session","service:session"),e.inject("service:invitations","auth","service:auth"),e.inject("service:invitations","router","router:main"),e.inject("route:InvitationUse","invitations","service:invitations"),e.inject("route:InvitationAccept","invitations","service:invitations"),e.inject("route:WorkspaceMemberInvite","invitations","service:invitations"),e.inject("route:VaultMemberInvite","invitations","service:invitations"),e.inject("route:CardMemberInvite","invitations","service:invitations"),e.inject("route:Workspaces","invitations","service:invitations"),e.register("service:keytransfer",Service.KeyTransfer),e.inject("service:keytransfer","store","store:main"),e.inject("service:keytransfer","auth","service:auth"),e.inject("service:keytransfer","coder","service:coder"),e.register("service:workspacekey",Service.WorkspaceKey),e.inject("service:workspacekey","auth","service:auth"),e.inject("service:workspacekey","store","store:main"),e.inject("service:workspacekey","coder","service:coder"),e.inject("service:workspacekey","keytransfer","service:keytransfer"),e.inject("route:WorkspacesCreate","workspacekey","service:workspacekey"),e.inject("route:Workspace","workspacekey","service:workspacekey"),e.inject("route:WorkspaceNoKeys","workspacekey","service:workspacekey"),e.inject("route:WorkspaceMemberApprove","workspacekey","service:workspacekey"),e.register("service:changekey",Service.ChangeKey),e.inject("route:SettingsKeys","changekey","service:changekey"),e.inject("route:AuthLostKeyRecoveryRebuild","changekey","service:changekey"),e.inject("service:changekey","store","store:main"),e.inject("service:changekey","auth","service:auth"),e.inject("service:changekey","coder","service:coder"),e.register("service:newuserinit",Service.NewUserInit),e.inject("service:newuserinit","auth","service:auth"),e.inject("service:newuserinit","router","router:main"),e.inject("service:newuserinit","invitations","service:invitations"),e.inject("route:AuthRegisterCreds","newuserinit","service:newuserinit"),e.inject("component:change-key","changekey","service:changekey"),e.inject("component:member-manager-accordion","store","store:main"),e.register("service:environment",Service.Environment),e.inject("route","environment","service:environment"),e.inject("controller:LayoutWorkspaceBox","environment","service:environment"),e.inject("service:invitations","env","service:environment")};
var router=Vaultier.Router.map(function(){this.resource("AuthRegister",{path:"/auth/register"},function(){this.route("before",{path:"overview"}),this.route("keys",{path:"generate-keys"}),this.route("creds",{path:"submit-credentials"}),this.route("sum",{path:"/registration-done"})}),this.route("AuthLogin",{path:"/auth/login"}),this.resource("AuthLostKey",{path:"/lostkey"},function(){this.route("success",{path:"success"}),this.resource("AuthLostKeyRecovery",{path:"/:id/:hash"},function(){this.route("reset",{path:"reset"}),this.route("rebuild",{path:"rebuild"}),this.route("disable",{path:"disable"}),this.route("success",{path:"success"})})}),this.resource("Invitation",{path:"/invitations"},function(){this.route("use",{path:"/use/:invitation/:hash"}),this.route("anonymous",{path:"/anonymous"}),this.route("accept",{path:"/accept"})}),this.resource("Settings",{path:"/settings"},function(){this.route("personal",{path:"/personal"}),this.route("keys",{path:"/keys"})}),this.resource("Workspaces",{path:"/workspaces"},function(){this.route("create",{path:"/create"}),this.route("select",{path:"/select"}),this.resource("Workspace",{path:"/w/:workspace"},function(){this.route("edit",{path:"/edit"}),this.route("noKeys",{path:"/waiting-for-keys"}),this.route("memberIndex",{path:"/team"}),this.route("memberInvite",{path:"/team/invite"}),this.route("memberManagement",{path:"/team/management"}),this.resource("Vaults",{path:"/vaults"},function(){this.route("create",{path:"/create"}),this.resource("Vault",{path:"/v/:vault"},function(){this.route("edit",{path:"/edit"}),this.route("memberIndex",{path:"/team"}),this.route("memberInvite",{path:"/team/invite"}),this.resource("Cards",{path:"/cards"},function(){this.route("create",{path:"/create"}),this.resource("Card",{path:"/c/:card"},function(){this.route("edit",{path:"/edit"}),this.route("move",{path:"/move"}),this.route("memberIndex",{path:"/team"}),this.route("memberInvite",{path:"/team/invite"}),this.resource("Secret",{path:"/secrets"},function(){this.route("createSelect",{path:"/create/select"}),this.route("createSubmit",{path:"/create/submit/:type"}),this.route("edit",{path:"/edit/:secret"}),this.route("move",{path:"/move/:secret"})})})})})})})}),this.resource("Home",{path:"/home"},function(){}),this.route("ErrorGeneric",{path:"/errors/"}),this.route("Error404",{path:"*path"})});Ember.Route.reopen({activate:function(){this._super(),window.scrollTo(0,0)}}),Vaultier.ApplicationRoute=Ember.Route.extend({actions:{error:function(t){return this.get("errors").processError(t),!1},loading:function(t){ApplicationLoader.showLoader(),t.promise.finally(function(){ApplicationLoader.hideLoader()}.bind(this))}},beforeModel:function(){var t=this.get("auth"),e=t.reload();return e}}),Vaultier.IndexRoute=Ember.Route.extend({redirect:function(){var t=this.get("auth");return this.transitionTo(t.get("isAuthenticated")?"Workspaces.index":"Home.index")}});
Po.NS("Service"),Service.Errors=Ember.Object.extend({errorController:null,router:null,errorRoute:"ErrorGeneric",rendering:!1,init:function(){this._super();var r=this.get("config.FT_FEATURES.raven_key");r&&Raven.config(r,{whitelistUrls:[]}).install()},parseError:function(r){var e={title:"Oooups! Something wrong happen here",message:"Fatal error",template:"ErrorGeneric",error:r};return r&&(r.message||r.detail)&&(e.message=r.message||r.detail),r&&r.title&&(e.title=r.title),r&&403==r.status&&(e.title="Access denied!",e.message="You do not have access to desired area"),r&&404==r.status&&(e.template="Error404"),e},consoleError:function(r,e){e=e||"error",console[e](r.stack?r.stack:r)},renderError:function(r){var e=this.get("errorController"),t=this.parseError(r);e.set("error",r),e.set("content",t);var o=this.get("router"),n=this.get("errorRoute");o.intermediateTransitionTo(n),ApplicationLoader.hideLoader()},logError:function(r){var e=this.get("container");this.consoleError(r),Raven.setUser(null);var t,o=e.lookup("service:auth");o&&(t=o.get("user"))&&(t={email:t.get("email"),id:t.get("id")},Raven.setUser(t));var n=e.lookup("controller:application"),s="";n&&(s=n.get("currentPath"));var i={};i.type=r.type,i.errorDuringRendering=this.get("rendering"),i.currentPath=s,Raven.captureException(r,{extra:i})},processError:function(r){try{this.logError(r)}catch(e){console.error("--CANNOT-CAPTURE-ERROR"),console.log(e.stack)}try{this.renderError(r)}catch(e){console.error("--CANNOT-RENDER-ERROR--"),console.error(e.stack)}}});
"use strict";var Service=Po.NS("Service");Service.Environment=Ember.Object.extend({workspace:null,vault:null,card:null,secret:null,router:null});
Po.NS("Service"),Service.Auth=Ember.Object.extend({init:function(){this._super(arguments),this.promises=Service.AuthPromises.create({store:this.store,coder:this.coder})},store:null,coder:null,router:null,session:null,storage:null,token:null,user:null,checked:!1,privateKey:null,transition:null,isAuthenticated:function(){return null!==this.get("user.id")}.property("user"),isChecked:function(){return 1==this.get("checked")}.property("user","checked"),generateKeys:function(e){this.get("coder");return this.coder.generateKeys(e)},checkPermissions:function(e,t,r){var i=function(e){var r=!1;try{r=t(e)}catch(i){console.error(i.stack)}if(!r){var i=new Error("Missing client permission");throw i.status=403,i}return r}.bind(this);return r?i():i},login:function(e,t,r){return e||(e=""),e=e.toLowerCase(),this.promises.login(e,t).then(function(e){if(this.setAuthenticatedUser(e,t,this.promises.get("token")),r){var i=this.get("transition");i?i.retry():this.get("router").transitionTo("index")}return e}.bind(this),function(){return this.setAuthenticatedUser(null),Ember.RSVP.reject()}.bind(this))},rememberUser:function(e,t,r){e&&r?this.get("storage").set("remember",{email:e,privateKey:t,ttl:r},r):this.get("storage").remove("remember")},getRememberedUser:function(){return this.get("storage").get("remember",null)},reload:function(){var e=this.loadFromSession()||{},t=e.user||null,r=e.privateKey||null,i=e.token||null;return this.promises.user(t,i).then(function(e){return this.setAuthenticatedUser(e,r,i)}.bind(this),function(){return this.setAuthenticatedUser(null)}.bind(this))},logout:function(){return this.promises.logout().then(function(){this.setAuthenticatedUser(null)}.bind(this)).then(function(){window.location="/"})},checkAuthenticatedOrLogin:function(e){return this.get("isAuthenticated")?!0:($.notify("You do not have access to secured area. Please login","error"),e.abort(),this.set("transition",e),this.get("router").transitionTo("AuthLogin"),!1)},setAuthenticatedUser:function(e,t,r){var i;return e&&t&&r?(i=!0,this.setProperties({checked:!0,isAuthenticated:!0,user:e,privateKey:t,token:r})):(i=!1,this.setProperties({checked:!0,isAuthenticated:!1,user:null,privateKey:null,token:null})),this.saveToSession(),i},saveToSession:function(){this.session.set("auth",{token:this.get("token"),email:this.get("user.email"),user:this.get("user.id"),privateKey:this.get("privateKey")})},loadFromSession:function(){return this.session.get("auth")}});
Service.AuthPromises=Ember.Object.extend({token:null,store:null,coder:null,_auth:function(e,t){var r=this.coder,n=r.sign(e,t);return Utils.RSVPAjax({url:"/api/auth/auth",type:"post",data:{email:e,signature:n}})},_retrieveUser:function(e){return e?this.get("store").find("User",e).catch(function(){throw Error("Cannot retrieve user with id {id}".replace("{id}",e))}):Ember.RSVP.reject("User id not specified")},_useToken:function(e){return Ember.$.ajaxSetup({beforeSend:function(t){t.setRequestHeader("X-Vaultier-Token",e)}}),this.set("token",e),Ember.RSVP.resolve()},_resetToken:function(){return Ember.$.ajaxSetup({beforeSend:function(e){e.setRequestHeader("X-Vaultier-Token","")}}),this.set("token",null),Ember.RSVP.resolve()},_unauth:function(){return Utils.RSVPAjax({url:"/api/auth/logout",type:"post"})},user:function(e,t){return this._useToken(t),this._retrieveUser(e)},logout:function(){return Ember.RSVP.resolve().then(this._unauth()).then(this._resetToken())},login:function(e,t){var r,n;return Ember.RSVP.resolve().then(function(){return this._auth(e,t)}.bind(this)).then(function(e){return r=e.user,n=e.token,this._useToken(n)}.bind(this)).then(function(){return this._retrieveUser(r)}.bind(this))}});
Po.NS("Service"),Service.Session=Ember.CoreObject.extend({init:function(){if(!window.sessionStorage)throw"Vaultier requires sessionStorage to be supported by browser"},prefix:"vaultier.",set:function(e,r){Ember.$(document).sessionStorage(this.prefix+e,r)},get:function(e,r){var t=Ember.$(document).sessionStorage(this.prefix+e);return"undefined"!=typeof t&&null!==t||"undefined"==typeof r?t:r},remove:function(e){return Ember.$(document).sessionStorage(this.prefix+e,null)}});
Po.NS("Service"),Service.Storage=Ember.CoreObject.extend({init:function(){if(!window.localStorage)throw"Vaultier requires localStorage to be supported by browser"},prefix:"vaultier.",set:function(e,t,r){var r=r||0;$.jStorage.set(this.prefix+e,t),$.jStorage.setTTL(this.prefix+e,r)},get:function(e,t){var r=$.jStorage.get(this.prefix+e);return"undefined"!=typeof r&&null!==r||"undefined"==typeof t?r:t},remove:function(e){return $.jStorage.deleteKey(this.prefix+e)}});
Po.NS("Service"),Service.Coder=Ember.Object.extend({TestingGenerator:Ember.Object.extend({getPrivateKey:function(){return this.private},getPublicKey:function(){return this.public},getKey:function(e){return this.private=$("div.vlt-test-private-key").text().trim(),this.public=$("div.vlt-test-public-key").text().trim(),e?e(this):this}}),generateKeys:function(e){if(this.get("config.FT_FEATURES.dev_shared_key"))var t=this.TestingGenerator.create();else var t=new JSEncrypt({default_key_size:2048});var r=function(){return{privateKey:t.getPrivateKey(),publicKey:t.getPublicKey()}};return e?void t.getKey(function(){e(r())}):(t.getKey(),r())},sign:function(e,t){var r=new RSAKey;r.readPrivateKeyFromPEMString(t);var n=hex2b64(r.signString(e,"sha1"));return n},encryptRSA:function(e,t){var r=new JSEncrypt;r.setPublicKey(t);var n=r.encrypt(e);return n},encryptWorkspaceKey:function(e,t){return this.encryptRSA(e,t)},decryptRSA:function(e,t){var r=new JSEncrypt;r.setPrivateKey(t);var n=r.decrypt(e);return n},decryptWorkspaceKey:function(e,t){return this.decryptRSA(e,t)},generateWorkspaceKey:function(){for(var e=32,t="",r=0;e>r;r++)t+=String.fromCharCode(Math.floor(255*Math.random()));return t},decryptAES:function(e,t){return CryptoJS.AES.decrypt(e,t).toString(CryptoJS.enc.Utf8)},encryptAES:function(e,t){return CryptoJS.AES.encrypt(e,t).toString()},decryptWorkspaceData:function(e,t){return this.decryptAES(e,t)},encryptWorkspaceData:function(e,t){return this.encryptAES(e,t)}});
Po.NS("Service"),Service.Invitations=Ember.Object.extend({SESSION_KEY:"invitations",session:null,auth:null,store:null,router:null,init:function(){this._super()},_memberPromise:function(t,n,i,e){var s=n.indexOf("@")<0?parseInt(n):null;return Utils.RSVPAjax(s?{url:"/api/members/"+s+"/",type:"get"}:{url:"/api/members/",type:"post",data:{workspace:Utils.E.recordId(t),email:n,send:i,resend:e}})},_invitePromise:function(t,n,i){var e={member:t.id,level:n,to_workspace:Utils.E.recordId(i.to_workspace),to_vault:Utils.E.recordId(i.to_vault),to_card:Utils.E.recordId(i.to_card)};return Utils.RSVPAjax({url:"/api/roles/",type:"post",data:e})},invite:function(t,n,i,e,s,r){return s=Po.F.optional(s,!1),r=Po.F.optional(r,!1),Ember.RSVP.resolve().then(function(){return this._memberPromise(t,n,s,r)}.bind(this)).then(function(t){return this._invitePromise(t,i,e)}.bind(this))},_storeInvitationToSession:function(t,n){return new Ember.RSVP.Promise(function(i){var e={id:t,hash:n},s=this.get("session").get(this.SESSION_KEY,{});s[t]=e,this.session.set(this.SESSION_KEY,s),i(e)}.bind(this))},hasInvitationsInSession:function(){var t=this.session.get(this.SESSION_KEY,null);return null!==t},acceptInvitationsInSession:function(t){t=t?Ember.RSVP.resolve(t):this.fetchInvitationsInSession();var n=t.then(function(t){var n=[];return t.forEach(function(t){t.set("status",200),n.push(t.saveRecord())}),Ember.RSVP.all(n)});return n},clearInvitationsInSession:function(){this.session.set(this.SESSION_KEY,null)},_validateInvitation:function(){return Ember.RSVP.resolve()},fetchInvitationsInSession:function(){var t=this.session.get(this.SESSION_KEY,{}),n=[],e=this.get("store");for(i in t)t.hasOwnProperty(i)&&n.push(e.find("Invitation",t[i].hash));return Ember.RSVP.all(n)},useInvitation:function(t,n){return Ember.RSVP.resolve().then(function(){return this._validateInvitation(t,n)}.bind(this)).then(function(){return this._storeInvitationToSession(t,n)}.bind(this)).then(function(){return this.get("router").transitionTo(this.get("auth").get("isAuthenticated")?"Invitation.accept":"Invitation.anonymous")}.bind(this))}});
Po.NS("Service"),Service.WorkspaceKeyDecryptSoftError=function(){var e=Error.apply(this,arguments);this.stack=e.stack},Service.WorkspaceKey=Ember.Object.extend(Ember.Evented,{coder:null,auth:null,store:null,keytransfer:null,membersToApprove:null,workspace:null,workspaceKey:null,checkInterval:6e4,checkIntervalId:null,init:function(){this._super(this,arguments)},startChecking:function(e){this.set("checkIntervalId",setInterval(function(){this.checkWorkspaceKey(e)}.bind(this),this.get("checkInterval")))},stopChecking:function(){clearInterval(this.get("checkIntervalId"))},checkWorkspaceKey:function(e){this.get("store").find("Workspace",e.get("id")).then(function(t){t.get("membership.status")==Vaultier.Member.proto().statuses.MEMBER.value&&(this.stopChecking(),e.reloadRecord().then(function(){this.selectWorkspace(e),$.notify(['Keys to workspace "{workspace}" has been transfered to you. ',"You can now fully work with workspace"].join("").replace("{workspace}",e.get("name")),{autoHideDelay:1e4}),this.trigger("keyTransfered",e)}.bind(this)))}.bind(this))},selectWorkspace:function(e){if(this.set("membersToApprove",null),this.set("workspace",e),e){this.stopChecking();var t=e.get("membership.workspace_key"),r=null;if(e.set("keyError",!1),this.hasValidWorkspaceKey()){try{r=this.get("keytransfer").decryptWorkspaceKey(t)}catch(s){console.error(s.stack),e.set("keyError",!0)}this.set("workspaceKey",r)}else this.startChecking(e)}else this.set("workspaceKey",null)},hasValidWorkspaceKey:function(){var e=this.get("workspace");return e.get("membership.status")==Vaultier.Member.proto().statuses.MEMBER.value},transferKeyToCreatedWorkspace:function(e){var t=this.get("keytransfer"),r=t.generateWorkspaceKey();return t.transferKeyToMember(e.get("membership.id"),r)},decryptWorkspaceData:function(e){var t=this.get("coder"),r=this.get("workspace");if(!r)throw new Error("Workspace not selected");if(this.hasValidWorkspaceKey){var s=this.get("workspaceKey");return e=t.decryptWorkspaceData(e,s),e=JSON.parse(e)}throw new Service.WorkspaceKeyDecryptSoftError("Cannot decrypt: workspace.membership.status {status}".replace("{status}",r.get("membership.status")))},encryptWorkspaceData:function(e){var t=this.get("coder"),r=this.get("workspace");if(!r)throw new Error("Workspace not selected");if(this.hasValidWorkspaceKey){var s=this.get("workspaceKey");return e=JSON.stringify(e),t.encryptWorkspaceData(e,s)}throw new Error("Cannot encrypt. workspace.membership.status {status}".replace("{status}",r.get("membership.status")))}});
Po.NS("Service"),Service.KeyTransfer=Ember.Object.extend({coder:null,auth:null,store:null,interval:6e4,_registeredQuery:null,init:function(){this._super.apply(this,arguments),this.register()},destroy:function(){this.unregister(),this._super.apply(this,arguments)},register:function(){if(this._registeredQuery)throw Error("Already registered");var e=this._query.bind(this);this._registeredQuery=setInterval(e,this.interval),e()},unregister:function(){clearInterval(this._registeredQuery),this._registeredQuery=null},_query:function(){this.get("auth.isAuthenticated")&&this.get("store").find("WorkspaceKey").then(function(e){var r=[];return e.forEach(function(e){if(e.get("user")!=this.get("auth.user.id")){var t=e.get("workspace");t?this.get("store").find("Workspace",t).then(function(t){try{var i=t.get("membership.workspace_key"),s=this.decryptWorkspaceKey(i);r.push(this.transferKeyToMember(e,s))}catch(n){console.error("Keytransfer failed for member {id}".replace("{id}",e.get("id"))),console.error(n.stack)}}.bind(this)):console.error("missing workspace id")}}.bind(this)),Ember.RSVP.all(r)}.bind(this))},generateWorkspaceKey:function(){return this.get("coder").generateWorkspaceKey()},decryptWorkspaceKey:function(e){var r=e,t=this.get("coder"),i=this.get("auth.privateKey");if(r=t.decryptWorkspaceKey(r,i),!r)throw new Error("Cannot decrypt workspace key");return r},transferKeyToMember:function(e,r){var t=Utils.E.recordId(e),i=this.get("store"),s=this.get("coder"),n=i.find("WorkspaceKey",t).then(function(e){var t=e.get("public_key"),i=s.encryptWorkspaceKey(r,t);return e.set("workspace_key",i),e.saveRecord()});return n}});
Po.NS("Service"),Service.ChangeKey=Ember.Object.extend({auth:null,store:null,coder:null,generateKeys:function(e){return this.get("auth").generateKeys(e)},changeKey:function(e){if(!this.get("auth.isAuthenticated"))throw Error("Only authenticated user can change his privatekey");var t=this.get("auth.privateKey"),r=e.privateKey,i=e.publicKey,n=this.get("auth.user"),s=this.get("coder"),a=this.get("store").find("UserKey",n.get("id")).then(function(e){return e.set("isDirty",!0),e.set("public_key",i),e.get("membership").forEach(function(e){var r=s.decryptWorkspaceKey(e.workspace_key,t),n=s.encryptWorkspaceKey(r,i);e.workspace_key=n}.bind(this)),e.saveRecord().then(function(){return this.get("auth").login(n.get("email"),r)}.bind(this))}.bind(this));return a}});
Po.NS("Service"),Service.NewUserInit=Ember.Object.extend({auth:null,invitations:null,router:null,createTransitionFunction:function(e,t){var n=this.get("router");return t&&e?function(){n.transitionTo("Vault.index",e,t)}:function(){n.transitionTo("index")}},initializeUser:function(){var e=this.get("auth"),t=this.get("invitations");if(!e.get("isAuthenticated"))throw new Error("User is not authenticated");if(t.hasInvitationsInSession())return Ember.RSVP.resolve(this.createTransitionFunction());var n=Utils.HandlebarsHelpers.create(),r=n.ucfirst(e.get("user.nickname")),i="{nickname}'s workspace",a="{nickname}'s default workspace to store vaults, cards and secrets",s="Default vault",o="{nickname}'s default vault to store cards and secrets",c=new Vaultier.Workspace;c.setProperties({name:i.replace("{nickname}",r),description:a.replace("{nickname}",r)});var u=new Vaultier.Vault;u.setProperties({name:s.replace("{nickname}",r),description:o.replace("{nickname}",r)});var l=Ember.RSVP.resolve().then(function(){return c.saveRecord()}).then(function(){return u.set("workspace",c.get("id")),u.saveRecord()}).then(function(){return new Ember.RSVP.Promise(function(e){e({transitionAfterRegister:this.createTransitionFunction(c,u),defaultWorkspace:c,defaultVault:u})}.bind(this))}.bind(this));return l}});
Vaultier.CreatedUpdatedMixin=Ember.Mixin.create({created_at:RL.attr("date",{readOnly:!0}),updated_at:RL.attr("date",{readOnly:!0}),created_by:RL.attr("object",{readOnly:!0}),updated_ago:function(){var t,e=this.get("updated_at");try{t=moment(e).fromNow()}catch(a){console.error(a.stack)}return t}.property("updated_at"),created_ago:function(){var t,e=this.get("created_at");try{t=moment(e).fromNow()}catch(a){console.error(a.stack)}return t}.property("created_at")});
Vaultier.MutableModel=Vaultier.MutableModel||{},Vaultier.MutableModel.Mixin=Ember.Mixin.create({init:function(){this._super.apply(this,arguments);var e=this.get("mutableModelTypeField");if(!e)throw new Error("mutableModelTypeField must be specified");var i=this.get("mutableModelMapping");if(!i)throw new Error("mutableModelMapping has to be specified ");this.addObserver(e,this,function(){this.applyMutableMixin(this.getMutableType())})},getMutableType:function(){var e=this.get("mutableModelTypeField");return this.get(e)},getMutableClass:function(e){var i=this.get("mutableModelMapping"),t=i[e];if(!t)throw new Error("Mutation mixin class not found for type {type}".replace("{type}",e));return t},applyMutableMixin:function(e){var i=this.getMutableClass(e),t=Ember.get(i);if(!t)throw new Error("Cannot instantiate secret class mixin {mixin} for type {type}".replace("{type}",e).replace("{mixin}",i));var a=t.detect(this);if(a)throw new Error("Cannot apply mixin {mixin}, already applied {applied}".replace("{mixin}",i).replace("{applied}",appliedMixin));t.apply(this),t.mixins.forEach(function(e){e.properties.init&&e.properties.init.apply(this)}.bind(this)),this.set("mutableMixinApplied",i)}});
Vaultier.EncryptedModel=Vaultier.EncryptedModel||{};var getEncryptedDataKey=function(e){return"_decrypted-data-"+e};Vaultier.EncryptedModel.Mixin=Ember.Mixin.create({EncryptedModelMixedIn:!0,workspacekey:null,init:function(){this.workspacekey=Vaultier.__container__.lookup("service:workspacekey"),this._super.apply(this,arguments),this.get("isNew")&&this.set("decrypted",!0)},decryptedFields:Ember.computed(function(){var e=Ember.Map.create();return this.constructor.eachComputedProperty(function(t,r){r.isDecryptedField&&e.set(t,!0)}),e}),encryptedFields:Ember.computed(function(){var e=Ember.meta(this,!1).descs,t=Ember.Map.create();for(var r in e){var i=e[r];i instanceof Ember.ComputedProperty&&i._meta&&i._meta.isDecryptedField&&t.set(i._meta.encryptedField,!0)}return t}),getDirtyEncryptedFields:function(){var e=Ember.Map.create();return this.get("encryptedFields").forEach(function(t){var r=this.getDecryptedData(t);r&&r.isDirty&&e.set(t,!0)}.bind(this)),e},areDecryptedDataDirty:function(e){var t=Ember.keys(e.data),r=Ember.keys(e.cleanData);if(t.length!==r.length)return!0;for(var i=0;i<t.length;i++){var a=t[i];if(Ember.get(e,"data."+a)!=Ember.get(e,"cleanData."+a))return!0}return!1},setDecryptedData:function(e,t,r){var i=getEncryptedDataKey(e),t=t||{},a={cleanData:t.cleanData||{},data:t,isDirty:null};r?(a.cleanData=Ember.merge({},t),a.isDirty=!1):a.isDirty=this.areDecryptedDataDirty(a),this.set(i,a)},clearDecryptedData:function(){this.get("encryptedFields").forEach(function(e){this.setDecryptedData(e)}.bind(this))},getDecryptedData:function(e){var t=getEncryptedDataKey(e),r=this.get(t);return r?r:(this.setDecryptedData(e),this.get(t))},decryptField:function(e){var t,r=this.get(e);t=r?this.workspacekey.decryptWorkspaceData(r)||{}:null,this.setDecryptedData(e,t,!0)},decryptFields:function(){this.get("encryptedFields").forEach(function(e){this.decryptField(e)}.bind(this))},encryptField:function(e){var t=this.getDecryptedData(e),r=this.workspacekey.encryptWorkspaceData(t.data);this.set(e,r)},deserialize:function(){var e=this._super.apply(this,arguments);e.clearDecryptedData(),this.set("decrypted",!1);try{e.decryptFields(),this.set("decrypted",!0)}catch(t){throw this.set("decrypted",!1),console.error("Secret decryption failed"),console.error(t.stack),t}return e},serialize:function(){return this.getDirtyEncryptedFields().forEach(function(e){this.encryptField(e)}.bind(this)),this._super.apply(this,arguments)}}),Vaultier.EncryptedModel.decryptedField=function(e,t){return Ember.computed(function(r,i){if(!Vaultier.EncryptedModel.Mixin.detect(this))throw new Error("Only models with mixin Vaultier.EncryptedModelMixin can have decryptedField");t&&(r=t);var a=this.getDecryptedData(e);return 1===arguments.length?a?Ember.get(a,"data."+r):void 0:(Ember.set(a,"data."+r,i),Ember.set(a,"isDirty",this.areDecryptedDataDirty(a)),this.set("isDirty",!0),this)}).property(getEncryptedDataKey(e)).meta({encryptedField:e,isDecryptedField:!0})};
Vaultier.RollbackMixin=Ember.Mixin.create({init:function(){this._super.apply(this,arguments),this.on("didLoad",function(){this.storeCleanValues()}.bind(this)),this.on("didUpdate",function(){this.storeCleanValues()}.bind(this)),this.on("didCreate",function(){this.storeCleanValues()}.bind(this)),this.storeCleanValues()},cleanValues:{},storeCleanValues:function(){this.set("cleanValues",{}),Ember.get(this.constructor,"fields").forEach(function(t){this.set("cleanValues."+t,this.get(t))}.bind(this))},rollback:function(){if(this.get("isSaving"))throw Error("Cannot rollback. Record is in state isSaving.");Ember.get(this.constructor,"fields").forEach(function(t){this.set(t,this.get("cleanValues."+t))}.bind(this)),this.set("isDirty",!1)}});
Vaultier.JSONSerializer=RESTless.JSONSerializer.extend({serialize:function(e,r){return r=r||{},r.nonEmbedded=!0,this._super.apply(this,[e,r])},keyForResourceName:function(e){return e},attributeNameForKey:function(e,r){return r}}),Vaultier.RESTAdapter=RL.RESTAdapter.extend({url:"/",namespace:"api",serializer:Vaultier.JSONSerializer.create(),buildUrl:function(e,r){var t,a,i=this.resourcePath(Ember.get(e.constructor,"resourceName")),n=Ember.get(e.constructor,"resourceListFormat"),u=Ember.get(e.constructor,"resourceDetailFormat"),o=this.get("rootPath"),c=Ember.get(e.constructor,"primaryKey"),s="",l="";if(r?l=r:e.get(c)&&(l=e.get(c)),this.get("useContentTypeExtension")&&s)var s=this.get("serializer.dataType");n||(n="{rootPath}/{resourcePath}/{dataType}"),u||(u="{rootPath}/{resourcePath}/{id}/{dataType}"),t=l?u:n;var a=t.replace("{rootPath}",o).replace("{resourcePath}",i).replace("{id}",l).replace("{dataType}",s);return a}}).create(),Vaultier.RESTAdapter.registerTransform("object",{deserialize:function(e){return e},serialize:function(e){return e}}),Vaultier.Client=RL.Client.create({adapter:Vaultier.RESTAdapter,createRecord:function(e,r){return Vaultier[e].create(r)},find:function(){var e=arguments[0],r=arguments[1];return Vaultier[e].fetch(r)}});
Vaultier.User=RL.Model.extend(Vaultier.CreatedUpdatedMixin,Vaultier.RollbackMixin,{email:RL.attr("string"),nickname:RL.attr("string"),public_key:RL.attr("string"),saveRecord:function(){var e=this.get("email");return e&&this.set("email",e.toLowerCase()),this._super.apply(this,arguments)}}),Vaultier.UserKey=RL.Model.extend({public_key:RL.attr("string"),membership:RL.attr("object")}),Vaultier.UserKey.reopenClass({resourceDetailFormat:"{rootPath}/users/{id}/key/"});
Vaultier.Workspace=RL.Model.extend(Vaultier.CreatedUpdatedMixin,Vaultier.RollbackMixin,{init:function(){return this.set("workspacekey",Vaultier.__container__.lookup("service:workspacekey")),this._super.apply(this,arguments)},workspacekey:null,keyError:!1,name:RL.attr("string"),slug:RL.attr("string"),description:RL.attr("string"),perms:RL.attr("object",{readOnly:!0}),membership:RL.attr("object",{readOnly:!0}),hasValidKey:function(){return this.get("membership.status")==Vaultier.Member.proto().statuses.MEMBER.value}.property("membership.status"),saveRecord:function(){var e=this.get("isNew"),t=this._super.apply(this,arguments),r=this;return e&&(t=t.then(function(){return this.get("workspacekey").transferKeyToCreatedWorkspace(r)}.bind(this)).then(function(){return r.reloadRecord()}.bind(this))),t}});
Vaultier.WorkspaceKey=RL.Model.extend({public_key:RL.attr("string"),workspace_key:RL.attr("longs"),status:RL.attr("string"),workspace:RL.attr("object"),user:RL.attr("object")});
"use strict";Vaultier.Member=RL.Model.extend(Vaultier.CreatedUpdatedMixin,{status:RL.attr("number"),email:RL.attr("string"),nickname:RL.attr("string"),user:RL.attr("object"),workspace:RL.attr("object"),statuses:new Utils.ConstantList({INVITED:{value:100,text:"INVITED"},MEMBER_WITHOUT_WORKSPACE_KEY:{value:200,text:"MEMBER_WITHOUT_WORKSPACE_KEY"},MEMBER:{value:300,text:"MEMBER"}})});
Vaultier.Invitation=RL.Model.extend(Vaultier.CreatedUpdatedMixin,{invitation_email:RL.attr("string"),invitation_hash:RL.attr("string"),status:RL.attr("number"),roles:RL.hasMany("Vaultier.InvitationRole")}),Vaultier.Invitation.reopenClass({primaryKey:"invitation_hash"}),Vaultier.InvitationRole=RL.Model.extend(Vaultier.CreatedUpdatedMixin,{to_name:RL.attr("string"),to_type:RL.attr("number"),name:function(){var t=Vaultier.Role.proto(),e=this.get("to_type"),a=this.get("to_name");return e==t.types.TO_WORKSPACE.value?'Invited to workspace "{to_name}"'.replace("{to_name}",a):e==t.types.TO_VAULT.value?'Invited to vault "{to_name}"'.replace("{to_name}",a):e==t.types.TO_CARD.value?'Invited to card "{to_name}"'.replace("{to_name}",a):void 0}.property("to_name","to_type")});
Vaultier.Role=RL.Model.extend(Vaultier.CreatedUpdatedMixin,Vaultier.RollbackMixin,{auth:null,init:function(){return this.set("auth",Vaultier.__container__.lookup("service:auth")),this._super.apply(this,arguments)},level:RL.attr("number"),member:RL.attr("object"),to_workspace:RL.attr("object"),to_vault:RL.attr("object"),to_card:RL.attr("object"),roles:new Utils.ConstantList({CREATE:{value:50,text:"Create new",desc:"Can read this object. Can create new child objects. Can modify, delete, invite and grant permissions to created objects"},READ:{value:100,desc:"Can read this object and all child objects",text:"View only"},WRITE:{value:200,text:"Manage",desc:"Can create, modify, delete, invite and grant permissions to this object and all child objects"}}),types:new Utils.ConstantList({TO_WORKSPACE:{value:100,text:"TO_WORKSPACE"},TO_VAULT:{value:200,text:"TO_VAULT"},TO_CARD:{value:300,text:"TO_CARD"}}),isCurrentUser:function(){var e=this.get("auth"),t=e.get("user.id");return this.get("member.user")==t}.property("member.user"),isMember:function(){return this.get("member.status")==Vaultier.Member.proto().statuses.MEMBER.value}.property("member.status"),isInvited:function(){return this.get("member.status")==Vaultier.Member.proto().statuses.INVITED.value}.property("member.status"),isMemberWithoutKeys:function(){return this.get("member.status")==Vaultier.Member.proto().statuses.MEMBER_WITHOUT_WORKSPACE_KEY.value}.property("member.status"),printableDesc:function(){var e=this.roles.getByValue(this.get("level"));return e?e.desc:"Unknown role level"}.property("level"),printableName:function(){var e=this.roles.getByValue(this.get("level"));return e?e.text:"Unknown role level"}.property("level")});
Vaultier.Vault=RL.Model.extend(Vaultier.CreatedUpdatedMixin,Vaultier.RollbackMixin,{name:RL.attr("string"),slug:RL.attr("string"),workspace:RL.attr("number"),description:RL.attr("string"),perms:RL.attr("object")});
Vaultier.Card=RL.Model.extend(Vaultier.CreatedUpdatedMixin,Vaultier.RollbackMixin,{name:RL.attr("string"),slug:RL.attr("string"),description:RL.attr("string"),vault:RL.attr("number"),perms:RL.attr("object")});
var decryptedField=Vaultier.EncryptedModel.decryptedField;Vaultier.Secret=RL.Model.extend(Vaultier.CreatedUpdatedMixin,Vaultier.EncryptedModel.Mixin,Vaultier.MutableModel.Mixin,{mutableModelTypeField:"type",mutableModelMapping:{100:"Vaultier.SecretNoteMixin",200:"Vaultier.SecretPasswordMixin",300:"Vaultier.SecretFileMixin"},types:new Utils.ConstantList({NOTE:{value:100,text:"NOTE"},PASSWORD:{value:200,text:"PASSWORD"},FILE:{value:300,text:"FILE"}}),type:RL.attr("number"),data:RL.attr("string"),blob_meta:RL.attr("string"),card:RL.attr("number"),perms:RL.attr("object"),name:RL.attr("string")}),Vaultier.SecretNoteMixin=Ember.Mixin.create({note:decryptedField("data","note"),isNote:function(){return this.get("type")==this.types.NOTE.value}.property("type")}),Vaultier.SecretPasswordMixin=Ember.Mixin.create({password:decryptedField("data","password"),username:decryptedField("data","username"),url:decryptedField("data","url"),note:decryptedField("data","note"),isPassword:function(){return this.get("type")==this.types.PASSWORD.value}.property("type")}),Vaultier.SecretFileMixin=Ember.Mixin.create({filename:decryptedField("blob_meta","filename"),filesize:decryptedField("blob_meta","filesize"),filetype:decryptedField("blob_meta","filetype"),password:decryptedField("data","password"),username:decryptedField("data","username"),url:decryptedField("data","url"),note:decryptedField("data","note"),blob:null,store:null,init:function(){this.set("store",Vaultier.__container__.lookup("store:main")),this.on("didLoad",this,this.emptyBlob),this.on("didReload",this,this.emptyBlob),this.emptyBlob()},isFile:function(){return this.get("type")==this.types.FILE.value}.property("type"),emptyBlob:function(){this.set("blob",new Vaultier.SecretBlob({id:this.get("id")}))},loadBlob:function(){var e=this.get("blob");if(e.get("isNew")){var t=this.get("store").find("SecretBlob",this.get("id")).then(function(e){return this.set("blob",e),e}.bind(this));return t}return Ember.RSVP.resolve(e)},saveRecord:function(){var e=this.get("blob");return this._super.apply(this,arguments).then(function(){return e.set("id",this.get("id")),e.saveRecord()}.bind(this)).then(this.emptyBlob.bind(this))}}),Vaultier.SecretBlob=RL.Model.extend(Vaultier.EncryptedModel.Mixin,{blob_meta:RL.attr("string"),blob_data:RL.attr("string"),filename:decryptedField("blob_meta","filename"),filesize:decryptedField("blob_meta","filesize"),filetype:decryptedField("blob_meta","filetype"),filedata:decryptedField("blob_data","filedata"),workspacekey:null,serialize:function(){data=this._super.apply(this,arguments);var e=new FormData;return e.append("blob_data",new Blob([data.blob_data],{type:"application/octet-stream"})),e.append("blob_meta",data.blob_meta),e},saveRecord:function(){if(this.get("isDirty")){var e={url:"/api/secret_blobs/"+this.get("id")+"/",type:"PUT",data:this.serialize(),processData:!1,contentType:!1};return Utils.RSVPAjax(e)}return Ember.RSVP.resolve(this)}});
"use strict";Vaultier.LostKey=RL.Model.extend(Vaultier.CreatedUpdatedMixin,{email:RL.attr("string"),recover_type:RL.attr("integer"),hash:RL.attr("string"),public_key:RL.attr("key"),memberships:RL.hasMany("Vaultier.LostKeyMemberships"),recoverType:new Utils.ConstantList({REBUILD:{value:1,text:"REBUILD"},DISABLE:{value:2,text:"DISABLE"}})}),Vaultier.LostKeyMemberships=RL.Model.extend({workspace_name:RL.attr("string"),is_recoverable:RL.attr("boolean")});
//# sourceMappingURL=data:application/json;base64,