Vaultier.InvitationUseRoute=Ember.Route.extend({invitations:null,model:function(t,n){return n.abort(),this.get("invitations").useInvitation(t.invitation,t.hash,t.data)}}),Vaultier.InvitationAcceptRoute=Ember.Route.extend({invitations:null,model:function(t,n){var e=this.get("invitations"),i=e.fetchInvitationsInSession().catch(function(t){if(n.abort(),e.clearInvitationsInSession(),!(t&&400==t.status&&t.errors&&t.errors.hash||t&&404==t.status))throw new Error("Invalid invitation");this.get("errors").consoleError(t),this.get("errors").renderError({title:"Invalid invitation.",message:"this invitation cannot be used. Not found or it was already used by other member"})}.bind(this));return i},setupController:function(t,n){t.set("content",n);var e=this.get("environment");t.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:e}).addHome().addText("List of invitations to accept"))},actions:{acceptInvitations:function(){var t=this.get("controller.content"),n=this.get("invitations"),e=n.acceptInvitationsInSession(t).then(function(){n.clearInvitationsInSession(),$.notify("You have accepted your invitations","success"),this.transitionTo("index")}.bind(this));ApplicationLoader.promise(e)},rejectInvitations:function(){var t=this.get("invitations");t.clearInvitationsInSession(),$.notify("You have rejected your pending invitations","warning"),this.transitionTo("index")}}}),Vaultier.InvitationAnonymousRoute=Ember.Route.extend({setupController:function(t,n){t.set("content",n);var e=this.get("environment");t.set("breadcrumbs",Vaultier.Breadcrumbs.create({router:this.get("router"),environment:e}).addHome().addText("Accept invitation"))}}),Vaultier.InvitationAcceptView=Ember.View.extend({templateName:"Invitation/InvitationAccept",layoutName:"Layout/LayoutStandard"}),Vaultier.InvitationListView=Ember.View.extend({templateName:"Invitation/InvitationList",layoutName:"Layout/LayoutStandard"}),Vaultier.InvitationAnonymousView=Ember.View.extend({templateName:"Invitation/InvitationAnonymous",layoutName:"Layout/LayoutStandard"});
Vaultier.MemberInviteInput=Ember.Component.extend({classNames:["vaultier-member-invite-input"],value:null,store:null,auth:null,workspace:null,tagName:"input",didInsertElement:function(){function e(e){var t=/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return t.test(e)}if(!this.store)throw"MemberInviteInput requires store to autocomplete. Inject store to component as store=store";if(!this.workspace)throw"MemberInviteInput requires workspace to autocomplete. Inject workspace to component as workspace=workspace";if(!this.auth)throw"MemberInviteInput requires auth service to autocomplete. Inject auth to component as auth=auth";var t=Ember.$(this.get("element")),i={},n=function(){this.store.find("Member",{workspace:Utils.E.recordId(this.workspace),search:this.query.term,ordering:"-status"}).then(function(e){var t=[];e.forEach(function(e){var i=e.get("status")==e.statuses.INVITED.value;e.get("user")!=this.auth.get("user.id")&&t.push({invitation:i,text:e.get("email"),id:e.get(i?"email":"id"),nickname:e.get("nickname"),email:e.get("email")})}.bind(this)),this.query.callback({results:t})}.bind(this))};t.select2({tokenSeparators:[","," ",";"],createSearchChoice:function(t,i){var n=!0;return i.forEach(function(e){return t==e.id?(n=!1,!1):void 0}),e(t)||(n=!1),n?{invitation:!0,text:t,nickname:t,email:t.toLowerCase(),id:t.toLowerCase()}:void 0},multiple:!0,query:function(e){i.store=this.get("controller.store"),i.query=e,i.auth=this.get("auth"),i.workspace=this.get("workspace"),Ember.run.debounce(i,n,500)}.bind(this),formatResult:function(e){var t=Utils.HandlebarsHelpers.current().printUser(e,{hash:{disableTooltip:!0}});return t=e.invitation?"Invite <b>"+t+"</b>":"grant to <b>"+t+"</b>"},formatSelection:function(e){var t=Utils.HandlebarsHelpers.current().printUser(e,{hash:{disableTooltip:!0}});return t=e.invitation?"Invite <b>"+t+"</b>":"grant to <b>"+t+"</b>"}}),t.on("change",function(e){this.set("value",e.val)}.bind(this))}}),Vaultier.MemberSelectRoleView=Ember.Select.extend({willDestroyElement:function(){var e=$(this.get("element")),t=e[0].selectize;t.destroy()},didInsertElement:function(){var e=$(this.get("element"));e.selectize({create:!1,highlight:!1,render:{option:function(e){var e=Vaultier.Role.proto().roles.getByValue(e.value);return["<div>","<div>"+e.text+"</div>",'<div class="help-block">'+e.desc+"</div>","</div>"].join("")}.bind(this)}});var t=e[0].selectize;t.setValue(this.get("role.level")),t.on("dropdown_close",function(){t.getValue()||t.setValue(this.get("role.level"))}.bind(this)),t.on("change",function(e){e&&(this.set("role.level",e),this.send("changed",e))}.bind(this))}});
Vaultier.MemberIndexRoute=Ember.Route.extend({inviteObject:null,model:function(e,t){if(this.setProperties(this.setupInviteData(e)),this.get("auth").checkPermissions(t,function(){return this.get("inviteObject.perms.invite")}.bind(this),!0)){var r=this.setupBlocks(),o=this.modelFor("Workspace"),s=this.modelFor("Vault"),n=this.modelFor("Card"),i=this.get("store"),l={workspace:null,workspaceRoles:null,vault:null,vaultRoles:null,card:null,cardRoles:null};r.workspace&&(l.workspace=o,l.workspaceRoles=i.find("Role",{to_workspace:o.get("id")})),r.vault&&(l.vault=s,l.vaultRoles=i.find("Role",{to_vault:s.get("id")})),r.card&&(l.card=n,l.cardRoles=i.find("Role",{to_card:n.get("id")}));var a=Ember.RSVP.hash(l);return a}},setupBlocks:function(){throw"Please override this in your route"},setupInviteRoute:function(){throw"Please override this in your route"},setupInviteData:function(){throw"Please override this in your route"},setupRoleLevels:function(){return Vaultier.Role.proto().roles.toArray()},setupBreadcrumbs:function(){throw"Please override this in your route"},setupController:function(e,t){var r=[];t.card&&r.push(Ember.Object.create({url:null,type:"card",object:t.card,roles:t.cardRoles})),t.vault&&r.push(Ember.Object.create({type:"vault",url:this.get("router").generate("Vault.memberIndex",t.vault),object:t.vault,roles:t.vaultRoles})),t.workspace&&r.push(Ember.Object.create({type:"workspace",url:this.get("router").generate("Workspace.memberIndex",t.workspace),object:t.workspace,roles:t.workspaceRoles})),e.set("content",r),e.set("roleLevels",this.setupRoleLevels()),e.setProperties(this.setupInviteRoute(t)),e.set("breadcrumbs",this.setupBreadcrumbs(t))},renderTemplate:function(){this.render("MemberIndex",{controller:this.get("controller")})},actions:{deleteRole:function(e,t){Vaultier.confirmModal(this,"Are you sure?",function(){var r=e.deleteRecord().then(function(){t.roles.removeObject(e),$.notify("User 's permission has been removed.","success")}).catch(function(e){$.notify("Oooups! Something went wrong.","error"),this.get("errors").logError(e)}.bind(this));ApplicationLoader.promise(r)})},changeRole:function(e){var t=e.saveRecord().then(function(){$.notify("User 's permission has been updated.","success")}).catch(function(e){$.notify("Oooups! Something went wrong.","error"),this.get("errors").logError(e)}.bind(this));ApplicationLoader.promise(t)}}}),Vaultier.MemberIndexController=Ember.Controller.extend({blocks:function(){var e=0;return this.get("content").map(function(t,r){var o=0===t.roles.get("length")&&r>0;o||e++;var s=!o&&2===e;return t.setProperties({index:r,isSecond:s,isHidden:o,readOnly:r>0}),t})}.property("content.@each")}),Vaultier.MemberIndexView=Ember.View.extend({templateName:"Member/MemberIndex",layoutName:"Layout/LayoutStandard",Item:Ember.View.extend({tagName:"div",Select:Vaultier.MemberSelectRoleView.extend({actions:{changed:function(){this.get("controller").send("changeRole",this.get("role"),this.get("block"))}}})})});
Vaultier.MemberInviteRoute=Ember.Route.extend({inviteObject:null,model:function(e,t){this.setProperties(this.setupInviteData(e)),!this.get("auth").checkPermissions(t,function(){return this.get("inviteObject.perms.invite")}.bind(this),!0)},setupInviteData:function(){throw"Please override this in your route"},setupBreadcrumbs:function(){throw"Please override this in your route"},setupRoleLevels:function(){return Vaultier.Role.proto().roles.toArray()},getDefaultRoleLevel:function(){return Vaultier.Role.proto().roles.READ.value},actions:{save:function(e,t,r){var i=this.get("invitations"),n=this.get("inviteWorkspace"),o=this.get("inviteParams"),l=[];e.forEach(function(e){l.push(i.invite(n,e,t.level,o,!0,r))});var s=Ember.RSVP.all(l).then(function(){$.notify("Your invitations has been saved","success"),window.history.go(-1)}).catch(function(){$.notify("Oooups! Something went wrong.","error")});return ApplicationLoader.promise(s),s}},setupController:function(e){e.set("workspace",this.modelFor("Workspace")),e.set("breadcrumbs",this.setupBreadcrumbs()),e.set("invited",[]),e.set("role",{level:this.getDefaultRoleLevel()}),e.set("roleLevels",this.setupRoleLevels())},renderTemplate:function(){this.render("MemberInvite",{controller:this.get("controller")})}}),Vaultier.MemberInviteController=Ember.Controller.extend({workspace:null,role:null,invited:[],resend:!0,isSubmitDisabled:function(){return!this.get("invited.length")||!this.get("role.level")}.property("invited.length","role.level"),breadcrumbs:null}),Vaultier.MemberInviteView=Ember.View.extend({templateName:"Member/MemberInvite",layoutName:"Layout/LayoutStandard",Select:Vaultier.MemberSelectRoleView});
Vaultier.MemberBoxComponent=Ember.Component.extend({layoutName:"Member/MemberBox",init:function(){this._super.apply(this,arguments),this.checkParameters()},checkParameters:function(){var e=this.get("roles"),r=this.get("user");if("[object Array]"!=Object.prototype.toString.call(e))throw new Error("Roles array has to be passed as roles=[Vaultier.Role] parameter");if(!r||r.constructor!=Vaultier.User)throw new Error("Current user has to be passed as user=Vaultier.User")},processedRoles:function(){var e=this.get("roles").filter(function(e){return e.get("member.user")!=this.get("user.id")?e:void 0}.bind(this));e=e.sort(function(e,r){return r.get("level")-e.get("level")});var r=[];return e=e.filter(function(e){var t=e.get("member.id");return-1==r.indexOf(t)?(r.push(t),e):void 0})}.property("roles"),hasAny:function(){return this.get("processedRoles").length>0?!0:!1}.property("processedRoles"),hasRead:function(){return 0!=this.get("rolesRead").length}.property("rolesRead"),rolesRead:function(){return this.get("processedRoles").filter(function(e){return e.get("level")==Vaultier.Role.proto().roles.READ.value?e:void 0})}.property("processedRoles"),hasCreate:function(){return 0!=this.get("rolesCreate").length}.property("rolesCreate"),rolesCreate:function(){return this.get("processedRoles").filter(function(e){return e.get("level")==Vaultier.Role.proto().roles.CREATE.value?e:void 0})}.property("processedRoles"),hasWrite:function(){return 0!=this.get("rolesWrite").length}.property("rolesWrite"),rolesWrite:function(){return this.get("processedRoles").filter(function(e){return e.get("level")==Vaultier.Role.proto().roles.WRITE.value?e:void 0})}.property("processedRoles")});
"use strict";Vaultier.MemberManagementRoute=Vaultier.MemberIndexRoute.extend({model:function(e){this.setProperties(this.setupInviteData(e));var t=this.modelFor("Workspace"),r=this.get("store"),n=r.find("Member",{workspace:t.get("id")}).then(function(e){return Em.ArrayProxy.create({content:e})}),o={workspace:t,members:n};return Ember.RSVP.hash(o)},setupController:function(e,t){e.set("content",t),e.set("breadcrumbs",this.setupBreadcrumbs(t))},renderTemplate:function(){this.render("MemberManagement",{controller:this.get("controller")})},actions:{deleteRole:function(e,t){Vaultier.confirmModal(this,"Are you sure you want to delete this permission?",function(){var r=t.deleteRecord().then(function(){var r=e.get("roles");r.removeObject(t),$.notify("Role has been remove","success")}.bind(this)).catch(function(e){$.notify("Oooups! Something went wrong.","error"),this.get("errors").logError(e)}.bind(this));ApplicationLoader.promise(r)})},loadRoles:function(e,t){var r=(e.get("roles"),this.get("store")),n=r.find("Role",{to_workspace:t.get("workspace"),to_member:t.get("id")}).then(function(t){var r=Em.ArrayProxy.create({content:t}).toArray();return e.set("roles",r),r}.bind(this));ApplicationLoader.promise(n)},deleteMember:function(e,t){Vaultier.confirmModal(this,"Are you sure you want to delete this member?",function(){var r=t.deleteRecord().then(function(){var r=e.get("members");r.removeObject(t),$.notify("Member has been remove","success")}.bind(this)).catch(function(e){$.notify("Oooups! Something went wrong.","error"),this.get("errors").logError(e)}.bind(this));ApplicationLoader.promise(r)})}}}),Vaultier.MemberManagementController=Vaultier.MemberIndexController.extend({members:function(){var e=this.get("auth.user");return this.get("content.members").filter(function(t){return t.get("email")!==e.get("email")}).toArray()}.property("content.@each")}),Vaultier.MemberManagementView=Vaultier.MemberIndexView.extend({templateName:"Member/MemberManagement"}),Vaultier.MemberManagerAccordionComponent=Em.Component.extend({store:null,layoutName:"Member/MemberManagerAccordion",buildId:function(e){return e=e.replace(/[@\.]/g," "),Em.String.dasherize(e)+"-roles"},targetElement:function(){var e=this.buildId(this.get("member.nickname"));return"#"+e}.property(),id:function(){return this.buildId(this.get("member.nickname"))}.property(),roles:null,control:null,member:null,roleLevels:function(){return Vaultier.Role.proto().roles.toArray()}.property("content.@each"),actions:{loadRoles:function(){this.sendAction("loadRoles",this.get("context"),this.get("member"))},deleteRole:function(e){this.sendAction("deleteRole",this.get("context"),e)},deleteMember:function(e){this.sendAction("deleteMember",this.get("context"),e)}}});
//# sourceMappingURL=data:application/json;base64,