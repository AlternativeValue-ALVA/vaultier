Ember.TEMPLATES["Member/MemberManagerAccordion"]=Ember.Handlebars.template(function(e,s,t,a,n){function r(e,s){var a,n="";return s.buffer.push("\n                "),a=t.each.call(e,"role","in","roles",{hash:{itemController:"role"},hashTypes:{itemController:"ID"},hashContexts:{itemController:e},inverse:C.noop,fn:C.program(2,h,s),contexts:[e,e,e],types:["ID","ID","ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n            "),n}function h(e,s){var a,n="";return s.buffer.push('\n                    <div class="list-group-item">\n                        <div class="col-md-3">\n                             <span data-toggle="tooltip" data-placement="top" title="type">\n                                 '),a=t["if"].call(e,"role.to_card",{hash:{},hashTypes:{},hashContexts:{},inverse:C.program(5,o,s),fn:C.program(3,l,s),contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push('\n                             </span>\n                        </div>\n                        <div class="col-md-3">\n                            <span data-toggle="tooltip" data-placement="top" title="name">\n                                '),a=t["if"].call(e,"role.to_card",{hash:{},hashTypes:{},hashContexts:{},inverse:C.program(13,c,s),fn:C.program(11,i,s),contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push('\n                            </span>\n                        </div>\n                        <div class="col-md-6">\n                            <div class="col-md-8 vlt-edit-perms">\n                                '),a=t["if"].call(e,"role.isMemberWithoutKeys",{hash:{},hashTypes:{},hashContexts:{},inverse:C.noop,fn:C.program(19,g,s),contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                                "),a=t["if"].call(e,"role.isInvited",{hash:{},hashTypes:{},hashContexts:{},inverse:C.noop,fn:C.program(21,m,s),contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                                <span data-toggle='tooltip'\n                                      class=\"label label-warning\" "),s.buffer.push(T(t["bind-attr"].call(e,{hash:{title:"role.printableDesc"},hashTypes:{title:"ID"},hashContexts:{title:e},contexts:[],types:[],data:s}))),s.buffer.push(">\n                                    "),a=t._triageMustache.call(e,"role.printableName",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push('\n                                </span>\n                            </div>\n                            <div class="col-md-4">\n                                <a class="vlt-delete btn btn-default btn-sm">\n                                    <span class="glyphicon glyphicon-trash" '),s.buffer.push(T(t.action.call(e,"deleteRole","role",{hash:{target:"view"},hashTypes:{target:"ID"},hashContexts:{target:e},contexts:[e,e],types:["STRING","ID"],data:s}))),s.buffer.push('></span>\n                                </a>\n                            </div>\n                        </div>\n                        <div class="clearfix"></div>\n                    </div>\n                '),n}function l(e,s){s.buffer.push("\n                                     Card\n                                 ")}function o(e,s){var a,n="";return s.buffer.push("\n                                     "),a=t["if"].call(e,"role.to_vault",{hash:{},hashTypes:{},hashContexts:{},inverse:C.program(8,f,s),fn:C.program(6,p,s),contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                                 "),n}function p(e,s){s.buffer.push("\n                                         Vault\n                                     ")}function f(e,s){var a,n="";return s.buffer.push("\n                                         "),a=t["if"].call(e,"role.to_workspace",{hash:{},hashTypes:{},hashContexts:{},inverse:C.noop,fn:C.program(9,u,s),contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                                     "),n}function u(e,s){s.buffer.push("\n                                             Workspace\n                                         ")}function i(e,s){var a,n="";return s.buffer.push("\n                                    "),a=t._triageMustache.call(e,"role.to_card.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                                "),n}function c(e,s){var a,n="";return s.buffer.push("\n                                    "),a=t["if"].call(e,"role.to_vault",{hash:{},hashTypes:{},hashContexts:{},inverse:C.program(16,b,s),fn:C.program(14,d,s),contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                                "),n}function d(e,s){var a,n="";return s.buffer.push("\n                                        "),a=t._triageMustache.call(e,"role.to_vault.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                                    "),n}function b(e,s){var a,n="";return s.buffer.push("\n                                        "),a=t["if"].call(e,"role.to_workspace",{hash:{},hashTypes:{},hashContexts:{},inverse:C.noop,fn:C.program(17,v,s),contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                                    "),n}function v(e,s){var a,n="";return s.buffer.push("\n                                            "),a=t._triageMustache.call(e,"role.to_workspace.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:s}),(a||0===a)&&s.buffer.push(a),s.buffer.push("\n                                        "),n}function g(e,s){s.buffer.push('\n                                    <span class="label label-warning">\n                                        Does not have workspace key yet\n                                    </span>\n                                ')}function m(e,s){s.buffer.push('\n                                    <span class="label label-warning">\n                                        Invited only. Did not show up yet!\n                                    </span>\n                                ')}this.compilerInfo=[4,">= 1.0.0"],t=this.merge(t,Ember.Handlebars.helpers),n=n||{};var y,x,I,D="",C=this,T=this.escapeExpression,w=t.helperMissing;return n.buffer.push('<div class="table vlt-table">\n\n    <div class="vlt-row">\n        <div class="vlt-col col-md-1" role="button">\n            <button type="button" class="btn btn-default" '),n.buffer.push(T(t.action.call(s,"deleteMember","member",{hash:{target:"view"},hashTypes:{target:"ID"},hashContexts:{target:s},contexts:[s,s],types:["STRING","ID"],data:n}))),n.buffer.push('>\n                <span class="glyphicon glyphicon-remove"></span>\n            </button>\n        </div>\n        <div class="vlt-col  col-md-6 col-md-offset-3"><span\n                class="lead">'),n.buffer.push(T((x=t.printUser||s&&s.printUser,I={hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:n},x?x.call(s,"member",I):w.call(s,"printUser","member",I)))),n.buffer.push('</span>\n        </div>\n        <div class="vlt-col col-md-2 pull-right">\n\n            <a class="btn btn-default accordion-toggle" type="button" data-toggle="collapse"\n                '),n.buffer.push(T(t["bind-attr"].call(s,{hash:{href:"targetElement"},hashTypes:{href:"ID"},hashContexts:{href:s},contexts:[],types:[],data:n}))),n.buffer.push(" "),n.buffer.push(T(t.action.call(s,"loadRoles",{hash:{target:"view"},hashTypes:{target:"ID"},hashContexts:{target:s},contexts:[s],types:["STRING"],data:n}))),n.buffer.push('>\n                Display permissions\n                <span class="caret vlt-caret"></span>\n            </a>\n        </div>\n        <div class="clearfix"></div>\n    </div>\n\n    <div class="vlt-row collapse" '),n.buffer.push(T(t["bind-attr"].call(s,{hash:{id:"id"},hashTypes:{id:"STRING"},hashContexts:{id:s},contexts:[],types:[],data:n}))),n.buffer.push('>\n        <div class="list-group well-lg">\n            '),x=t.ifCond||s&&s.ifCond,I={hash:{},hashTypes:{},hashContexts:{},inverse:C.noop,fn:C.program(1,r,n),contexts:[s,s,s],types:["ID","STRING","ID"],data:n},y=x?x.call(s,"roles","&&","roles.length",I):w.call(s,"ifCond","roles","&&","roles.length",I),(y||0===y)&&n.buffer.push(y),n.buffer.push('\n\n        </div>\n        <!-- End list-group -->\n\n    </div>\n    <!-- End vlt-row collapse -->\n\n</div>\n<!-- end table -->\n<div class="vlt-divider">&nbsp;</div>'),D});
Ember.TEMPLATES["Member/MemberManagement"]=Ember.Handlebars.template(function(e,s,a,n,l){function t(e,s){s.buffer.push('\n                        <span class="glyphicon glyphicon-user"></span>\n                        Invite\n                    ')}function r(e,s){var n,l,t="";return s.buffer.push("\n                    "),s.buffer.push(p((n=a["member-manager-accordion"]||e&&e["member-manager-accordion"],l={hash:{member:"member",deleteMember:"deleteMember",loadRoles:"loadRoles",deleteRole:"deleteRole"},hashTypes:{member:"ID",deleteMember:"STRING",loadRoles:"STRING",deleteRole:"STRING"},hashContexts:{member:e,deleteMember:e,loadRoles:e,deleteRole:e},contexts:[],types:[],data:s},n?n.call(e,l):d.call(e,"member-manager-accordion",l)))),s.buffer.push("\n                "),t}this.compilerInfo=[4,">= 1.0.0"],a=this.merge(a,Ember.Handlebars.helpers),l=l||{};var h,i,o,c="",d=a.helperMissing,p=this.escapeExpression,f=this;return l.buffer.push('<div class="container">\n    <div class="vlt-page vlt-page-plain">\n        <div class="vlt-page-nav">\n\n            <div class="vlt-page-toolbar pull-right">\n                <div>\n                    <a href="javascript:window.history.go(-1)" class="btn btn-default">\n                        <span class="glyphicon glyphicon-chevron-left"></span>\n                        Back\n                    </a>\n\n                    '),i=a["link-to"]||s&&s["link-to"],o={hash:{"class":"btn btn-primary"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},inverse:f.noop,fn:f.program(1,t,l),contexts:[s],types:["ID"],data:l},h=i?i.call(s,"inviteRouteName",o):d.call(s,"link-to","inviteRouteName",o),(h||0===h)&&l.buffer.push(h),l.buffer.push('\n                </div>\n            </div>\n            <div class="pull-left">\n                <h2>'),h=a._triageMustache.call(s,"content.workspace.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:l}),(h||0===h)&&l.buffer.push(h),l.buffer.push('</h2>\n            </div>\n            <div class="clearfix"></div>\n        </div>\n        <div class="panel panel-default">\n            <div class="panel-heading ">\n                <div class="vlt-col col-md-8">\n                    <h4> '),h=a._triageMustache.call(s,"members.length",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:l}),(h||0===h)&&l.buffer.push(h),l.buffer.push(" members at <strong>"),h=a._triageMustache.call(s,"content.workspace.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:l}),(h||0===h)&&l.buffer.push(h),l.buffer.push('</strong></h4>\n                </div>\n                <div class="clearfix"></div>\n            </div>\n            <!-- End of heading -->\n            <div class="panel-body" id="collapse">\n                '),h=a.each.call(s,"member","in","members",{hash:{},hashTypes:{},hashContexts:{},inverse:f.noop,fn:f.program(3,r,l),contexts:[s,s,s],types:["ID","ID","ID"],data:l}),(h||0===h)&&l.buffer.push(h),l.buffer.push('\n            </div>\n            <!-- End of panel-body -->\n            <div class="clearfix"></div>\n\n        </div>\n\n        <div class="clearfix"></div>\n    </div>\n</div>'),c});
Ember.TEMPLATES["Member/MemberIndex"]=Ember.Handlebars.template(function(s,n,e,r,a){function t(s,n){n.buffer.push('\r\n                <span class="glyphicon glyphicon-user"></span>\r\n                Invite\r\n            ')}function l(s,n){var r,a="";return n.buffer.push("\r\n\r\n        "),r=e["if"].call(s,"block.isSecond",{hash:{},hashTypes:{},hashContexts:{},inverse:R.noop,fn:R.program(4,h,n),contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push("\r\n\r\n        "),r=e.unless.call(s,"block.isHidden",{hash:{},hashTypes:{},hashContexts:{},inverse:R.noop,fn:R.program(7,i,n),contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push("\r\n    "),a}function h(s,n){var r,a="";return n.buffer.push("\r\n            "),r=e.unless.call(s,"block.isHidden",{hash:{},hashTypes:{},hashContexts:{},inverse:R.noop,fn:R.program(5,o,n),contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push("\r\n        "),a}function o(s,n){n.buffer.push('\r\n                <div class="top-30">\r\n                    <h3>Inherited memberships</h3>\r\n                </div>\r\n            ')}function i(s,n){var r,a="";return n.buffer.push('\r\n\r\n            <div class="panel panel-default vlt-panel-permissions top-30">\r\n                <div class="panel-heading">\r\n                    <div class="col-md-8">\r\n                        <h4>\r\n                            '),r=e._triageMustache.call(s,"block.roles.length",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push(" collaborators at "),r=e._triageMustache.call(s,"block.type",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push(" <b>"),r=e._triageMustache.call(s,"block.object.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push('</b>\r\n                        </h4>\r\n                    </div>\r\n                    <div class="col-md-4 vlt-controls">\r\n                        '),r=e["if"].call(s,"block.readOnly",{hash:{},hashTypes:{},hashContexts:{},inverse:R.noop,fn:R.program(8,p,n),contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push('\r\n\r\n                    </div>\r\n\r\n                    <div class="clearfix"></div>\r\n                </div>\r\n                <div class="table vlt-table">\r\n\r\n                    '),r=e.unless.call(s,"block.roles.length",{hash:{},hashTypes:{},hashContexts:{},inverse:R.noop,fn:R.program(11,f,n),contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push("\r\n\r\n                    "),r=e.each.call(s,"role","in","block.roles",{hash:{},hashTypes:{},hashContexts:{},inverse:R.noop,fn:R.program(14,b,n),contexts:[s,s,s],types:["ID","ID","ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push("\r\n                </div>\r\n\r\n            </div>\r\n        "),a}function p(s,n){var r,a="";return n.buffer.push("\r\n                            "),r=e["if"].call(s,"block.object.perms.invite",{hash:{},hashTypes:{},hashContexts:{},inverse:R.noop,fn:R.program(9,u,n),contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push("\r\n                        "),a}function u(s,n){var r="";return n.buffer.push('\r\n                                <a class="btn btn-default btn-sm"\r\n                                    '),n.buffer.push(w(e["bind-attr"].call(s,{hash:{href:"block.url"},hashTypes:{href:"ID"},hashContexts:{href:s},contexts:[],types:[],data:n}))),n.buffer.push('\r\n                                   data-toggle="tooltip"\r\n                                   title="Edit inherited roles"\r\n                                        >\r\n                                    <span class="glyphicon glyphicon-edit"></span>\r\n                                </a>\r\n                            '),r}function f(s,n){var r,a,t,l="";return n.buffer.push('\r\n                        <div>\r\n                            <div class="padding-15">\r\n                                There are no permission to this object.\r\n\r\n                                '),a=e["link-to"]||s&&s["link-to"],t={hash:{"class":"btn btn-default btn-sm"},hashTypes:{"class":"STRING"},hashContexts:{"class":s},inverse:R.noop,fn:R.program(12,c,n),contexts:[s],types:["ID"],data:n},r=a?a.call(s,"inviteRouteName",t):S.call(s,"link-to","inviteRouteName",t),(r||0===r)&&n.buffer.push(r),n.buffer.push("\r\n\r\n                            </div>\r\n                        </div>\r\n                    "),l}function c(s,n){n.buffer.push('\r\n                                    <span class="glyphicon glyphicon-user"></span>\r\n                                    Invite\r\n                                ')}function b(s,n){var r,a="";return n.buffer.push("\r\n\r\n                        "),r=e.view.call(s,"view.Item",{hash:{role:"role",block:"block","class":"vlt-row",classNameBindings:"role.isMember:normal:invited"},hashTypes:{role:"ID",block:"ID","class":"STRING",classNameBindings:"STRING"},hashContexts:{role:s,block:s,"class":s,classNameBindings:s},inverse:R.noop,fn:R.program(15,d,n),contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push("\r\n\r\n                    "),a}function d(s,n){var r,a,t,l="";return n.buffer.push('\r\n                            <div class="vlt-col col-sm-4 vlt-user">\r\n                                '),n.buffer.push(w((a=e.printUser||s&&s.printUser,t={hash:{size:50},hashTypes:{size:"INTEGER"},hashContexts:{size:s},contexts:[s],types:["ID"],data:n},a?a.call(s,"role.member",t):S.call(s,"printUser","role.member",t)))),n.buffer.push('\r\n                            </div>\r\n                            <div class="vlt-col col-sm-4 vlt-labels">\r\n                                '),r=e["if"].call(s,"role.isMemberWithoutKeys",{hash:{},hashTypes:{},hashContexts:{},inverse:R.noop,fn:R.program(16,v,n),contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push("\r\n\r\n                                "),r=e["if"].call(s,"role.isInvited",{hash:{},hashTypes:{},hashContexts:{},inverse:R.noop,fn:R.program(18,y,n),contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push('\r\n                                <div class="clearfix"></div>\r\n                            </div>\r\n                            <div class="vlt-col col-sm-4 vlt-actions">\r\n                                '),r=e.unless.call(s,"block.readOnly",{hash:{},hashTypes:{},hashContexts:{},inverse:R.program(25,I,n),fn:R.program(20,g,n),contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push('\r\n                            </div>\r\n                            <div class="clearfix"></div>\r\n\r\n                        '),l}function v(s,n){n.buffer.push('\r\n                                    <div class="label label-warning">\r\n                                        Does not have workspace key yet\r\n                                    </div>\r\n                                ')}function y(s,n){n.buffer.push('\r\n                                    <div class="label label-warning">\r\n                                        Invited only. Did not show up yet!\r\n                                    </div>\r\n                                ')}function g(s,n){var r,a="";return n.buffer.push("\r\n\r\n                                    "),r=e["if"].call(s,"role.isCurrentUser",{hash:{},hashTypes:{},hashContexts:{},inverse:R.program(23,x,n),fn:R.program(21,m,n),contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push("\r\n                                "),a}function m(s,n){var r,a="";return n.buffer.push('\r\n                                        <span class="label label-warning">\r\n                                        It\'s you\r\n                                        </span>\r\n                                        <span class="label label-default" data-toggle="tooltip" '),n.buffer.push(w(e["bind-attr"].call(s,{hash:{"data-toggle":"tooltip",title:"role.printableDesc"},hashTypes:{"data-toggle":"STRING",title:"ID"},hashContexts:{"data-toggle":s,title:s},contexts:[],types:[],data:n}))),n.buffer.push(">\r\n                                            "),r=e._triageMustache.call(s,"role.printableName",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push("\r\n                                        </span>\r\n\r\n\r\n                                    "),a}function x(s,n){var r="";return n.buffer.push('\r\n                                        <div class="vlt-edit-perms">\r\n                                            <a class="vlt-delete btn btn-default btn-sm" '),n.buffer.push(w(e.action.call(s,"deleteRole","role","block",{hash:{},hashTypes:{},hashContexts:{},contexts:[s,s,s],types:["ID","ID","ID"],data:n}))),n.buffer.push('>\r\n                                                <span class="glyphicon glyphicon-trash"></span>\r\n                                            </a>\r\n                                            '),n.buffer.push(w(e.view.call(s,"view.Select",{hash:{role:"role","class":"form-control vlt-perms",contentBinding:"roleLevels",optionValuePath:"content.value",optionLabelPath:"content.text"},hashTypes:{role:"ID","class":"STRING",contentBinding:"STRING",optionValuePath:"STRING",optionLabelPath:"STRING"},hashContexts:{role:s,"class":s,contentBinding:s,optionValuePath:s,optionLabelPath:s},contexts:[s],types:["ID"],data:n}))),n.buffer.push("\r\n                                        </div>\r\n                                    "),r}function I(s,n){var r,a="";return n.buffer.push("\r\n\r\n                                    "),r=e["if"].call(s,"role.isCurrentUser",{hash:{},hashTypes:{},hashContexts:{},inverse:R.noop,fn:R.program(26,D,n),contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push("\r\n\r\n                                    <span class=\"label label-default\" data-toggle='tooltip' "),n.buffer.push(w(e["bind-attr"].call(s,{hash:{title:"role.printableDesc"},hashTypes:{title:"ID"},hashContexts:{title:s},contexts:[],types:[],data:n}))),n.buffer.push(">\r\n                                        "),r=e._triageMustache.call(s,"role.printableName",{hash:{},hashTypes:{},hashContexts:{},contexts:[s],types:["ID"],data:n}),(r||0===r)&&n.buffer.push(r),n.buffer.push("\r\n                                    </span>\r\n\r\n                                "),a}function D(s,n){n.buffer.push('\r\n                                        <span class="label label-warning">\r\n                                        It\'s you\r\n                                        </span>\r\n                                    ')}this.compilerInfo=[4,">= 1.0.0"],e=this.merge(e,Ember.Handlebars.helpers),a=a||{};var T,C,k,N="",R=this,w=this.escapeExpression,S=e.helperMissing;return a.buffer.push('<div class="container">\r\n<div class="vlt-page vlt-page-plain">\r\n<div class="vlt-page-nav">\r\n\r\n    <div class="vlt-page-toolbar pull-right">\r\n        <div>\r\n\r\n            <a href="javascript:window.history.go(-1)" class="btn btn-default">\r\n                <span class="glyphicon glyphicon-chevron-left"></span>\r\n                Back\r\n            </a>\r\n\r\n            <div style="display: none">\r\n                <a href="#" class="btn btn-default">\r\n                    <span class="glyphicon glyphicon-question-sign"></span>\r\n                    Permissions\r\n                </a>\r\n            </div>\r\n\r\n            '),C=e["link-to"]||n&&n["link-to"],k={hash:{"class":"btn btn-primary"},hashTypes:{"class":"STRING"},hashContexts:{"class":n},inverse:R.noop,fn:R.program(1,t,a),contexts:[n],types:["ID"],data:a},T=C?C.call(n,"inviteRouteName",k):S.call(n,"link-to","inviteRouteName",k),(T||0===T)&&a.buffer.push(T),a.buffer.push('\r\n\r\n\r\n        </div>\r\n    </div>\r\n\r\n    <div class="pull-left">\r\n        <h2>Collaborators</h2>\r\n    </div>\r\n\r\n    <div class="clearfix"></div>\r\n</div>\r\n\r\n<div class="vlt-page-invitations">\r\n\r\n    '),T=e.each.call(n,"block","in","blocks",{hash:{},hashTypes:{},hashContexts:{},inverse:R.noop,fn:R.program(3,l,a),contexts:[n,n,n],types:["ID","ID","ID"],data:a}),(T||0===T)&&a.buffer.push(T),a.buffer.push('\r\n\r\n\r\n\r\n</div>\r\n<div class="clearfix"></div>\r\n</div>\r\n</div>'),N});
Ember.TEMPLATES["Member/MemberInvite"]=Ember.Handlebars.template(function(e,n,s,t,r){this.compilerInfo=[4,">= 1.0.0"],s=this.merge(s,Ember.Handlebars.helpers),r=r||{};var a,i,l="",o=this.escapeExpression,d=s.helperMissing;return r.buffer.push('<div class="vlt-page vlt-page-plain">\r\n<div class="vlt-dialog col-md-8 col-md-offset-2 top-50">\r\n    <form>\r\n        <div class="vlt-dialog-content">\r\n            <div class="vlt-dialog-header">\r\n                <h2>Invite collaborators</h2>\r\n            </div>\r\n            <div class="vlt-dialog-body">\r\n\r\n                <div class="col-md-10 col-md-offset-1">\r\n\r\n                    <div class="form-group">\r\n                        <label for="invite-form-invited">Select users</label>\r\n\r\n                        '),r.buffer.push(o(s.view.call(n,"Vaultier.MemberInviteInput",{hash:{store:"store",workspace:"workspace",auth:"auth","class":"form-control",elementId:"invite-form-invited",valueBinding:"invited"},hashTypes:{store:"ID",workspace:"ID",auth:"ID","class":"STRING",elementId:"STRING",valueBinding:"STRING"},hashContexts:{store:n,workspace:n,auth:n,"class":n,elementId:n,valueBinding:n},contexts:[n],types:["ID"],data:r}))),r.buffer.push('\r\n                        <span class="help-block"><b>Select existing users or invite new by email</b>. You can invite more users at once. Seperate them with space, comma or semicolon</span>\r\n                    </div>\r\n\r\n                    <div class="form-group">\r\n                        <div class="checkbox">\r\n                            <label for="invite-form-resend">\r\n                                '),r.buffer.push(o((a=s.input||n&&n.input,i={hash:{type:"checkbox",elementId:"invite-form-resend",checkedBinding:"resend"},hashTypes:{type:"ID",elementId:"STRING",checkedBinding:"STRING"},hashContexts:{type:n,elementId:n,checkedBinding:n},contexts:[],types:[],data:r},a?a.call(n,i):d.call(n,"input",i)))),r.buffer.push('\r\n                                Resend invitation to already invited user\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class="form-group">\r\n                        <label for="invite-form-role">Permissions</label>\r\n                        '),r.buffer.push(o(s.view.call(n,"view.Select",{hash:{role:"role","class":"form-control",elementId:"invite-form-role",contentBinding:"roleLevels",optionValuePath:"content.value",optionLabelPath:"content.text"},hashTypes:{role:"ID","class":"STRING",elementId:"STRING",contentBinding:"STRING",optionValuePath:"STRING",optionLabelPath:"STRING"},hashContexts:{role:n,"class":n,elementId:n,contentBinding:n,optionValuePath:n,optionLabelPath:n},contexts:[n],types:["ID"],data:r}))),r.buffer.push('\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div class="clearfix"></div>\r\n\r\n            </div>\r\n            <div class="vlt-dialog-footer">\r\n                <a href="javascript:window.history.go(-1)" class="btn btn-default btn-sm">\r\n                    <span class="glyphicon glyphicon-chevron-left"></span>\r\n                    Back\r\n                </a>\r\n                <button '),r.buffer.push(o(s["bind-attr"].call(n,{hash:{disabled:"isSubmitDisabled"},hashTypes:{disabled:"ID"},hashContexts:{disabled:n},contexts:[],types:[],data:r}))),r.buffer.push(" "),r.buffer.push(o(s.action.call(n,"save","invited","role","resend",{hash:{},hashTypes:{},hashContexts:{},contexts:[n,n,n,n],types:["ID","ID","ID","ID"],data:r}))),r.buffer.push('\r\n                        class="btn btn-primary">\r\n                    <span class="glyphicon glyphicon-ok"></span>\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>\r\n<div class="clearfix"></div>\r\n</div>\r\n'),l});
Ember.TEMPLATES["Member/MemberBox"]=Ember.Handlebars.template(function(e,s,n,r,a){function t(e,s){s.buffer.push("\n        Not shared with anybody yet\n    ")}function h(e,s){var r,a="";return s.buffer.push('\n        <div class="vlt-perms-section">\n            Users able to manage\n        </div>\n        <div class="vlt-perms-roles">\n            '),r=n.each.call(e,"role","in","rolesWrite",{hash:{},hashTypes:{},hashContexts:{},inverse:b.noop,fn:b.program(4,o,s),contexts:[e,e,e],types:["ID","ID","ID"],data:s}),(r||0===r)&&s.buffer.push(r),s.buffer.push('\n        </div>\n        <div class="clearfix"></div>\n    '),a}function o(e,s){var r,a,t="";return s.buffer.push("\n                "),s.buffer.push(c((r=n.printUser||e&&e.printUser,a={hash:{size:50,disableName:1},hashTypes:{size:"INTEGER",disableName:"INTEGER"},hashContexts:{size:e,disableName:e},contexts:[e],types:["ID"],data:s},r?r.call(e,"role.member",a):u.call(e,"printUser","role.member",a)))),s.buffer.push("\n            "),t}function p(e,s){var r,a="";return s.buffer.push('\n        <div class="vlt-perms-section">\n            Users able to read\n        </div>\n        <div class="vlt-perms-roles">\n            '),r=n.each.call(e,"role","in","rolesRead",{hash:{},hashTypes:{},hashContexts:{},inverse:b.noop,fn:b.program(4,o,s),contexts:[e,e,e],types:["ID","ID","ID"],data:s}),(r||0===r)&&s.buffer.push(r),s.buffer.push('\n        </div>\n        <div class="clearfix"></div>\n    '),a}function i(e,s){var r,a="";return s.buffer.push('\n        <div class="vlt-perms-section">\n            Users able to create only\n        </div>\n        <div class="vlt-perms-roles">\n            '),r=n.each.call(e,"role","in","rolesCreate",{hash:{},hashTypes:{},hashContexts:{},inverse:b.noop,fn:b.program(4,o,s),contexts:[e,e,e],types:["ID","ID","ID"],data:s}),(r||0===r)&&s.buffer.push(r),s.buffer.push('\n        </div>\n        <div class="clearfix"></div>\n    '),a}this.compilerInfo=[4,">= 1.0.0"],n=this.merge(n,Ember.Handlebars.helpers),a=a||{};var f,l="",u=n.helperMissing,c=this.escapeExpression,b=this;return a.buffer.push('<div class="vlt-member-box">\n    '),f=n.unless.call(s,"hasAny",{hash:{},hashTypes:{},hashContexts:{},inverse:b.noop,fn:b.program(1,t,a),contexts:[s],types:["ID"],data:a}),(f||0===f)&&a.buffer.push(f),a.buffer.push("\n\n\n    "),f=n["if"].call(s,"hasWrite",{hash:{},hashTypes:{},hashContexts:{},inverse:b.noop,fn:b.program(3,h,a),contexts:[s],types:["ID"],data:a}),(f||0===f)&&a.buffer.push(f),a.buffer.push("\n\n    "),f=n["if"].call(s,"hasRead",{hash:{},hashTypes:{},hashContexts:{},inverse:b.noop,fn:b.program(6,p,a),contexts:[s],types:["ID"],data:a}),(f||0===f)&&a.buffer.push(f),a.buffer.push("\n\n    "),f=n["if"].call(s,"hasCreate",{hash:{},hashTypes:{},hashContexts:{},inverse:b.noop,fn:b.program(8,i,a),contexts:[s],types:["ID"],data:a}),(f||0===f)&&a.buffer.push(f),a.buffer.push("\n\n</div>"),l});
Ember.TEMPLATES["Invitation/InvitationAnonymous"]=Ember.Handlebars.template(function(n,e,r,t,s){function o(n,e){e.buffer.push("Create an account")}function a(n,e){e.buffer.push("Login")}this.compilerInfo=[4,">= 1.0.0"],r=this.merge(r,Ember.Handlebars.helpers),s=s||{};var i,l,c,h="",d=this,f=r.helperMissing;return s.buffer.push('<div class="vlt-dialog col-md-8 col-md-offset-2 top-50">\r\n    <form>\r\n        <div class="vlt-dialog-content">\r\n            <div class="vlt-dialog-header">\r\n                <h2>You have been invited to vaultier</h2>\r\n            </div>\r\n            <div class="vlt-dialog-body">\r\n\r\n                <div class="col-md-8 col-md-offset-2 top-30 bottom-30">\r\n                    <b>\r\n                        Before further procceeding we need you to have account. Please login or create new\r\n                        account.\r\n                    </b>\r\n                </div>\r\n\r\n                <div class="clearfix"></div>\r\n\r\n            </div>\r\n            <div class="vlt-dialog-footer">\r\n                '),l=r["link-to"]||e&&e["link-to"],c={hash:{"class":"btn btn-default btn-sm"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},inverse:d.noop,fn:d.program(1,o,s),contexts:[e],types:["STRING"],data:s},i=l?l.call(e,"AuthRegister",c):f.call(e,"link-to","AuthRegister",c),(i||0===i)&&s.buffer.push(i),s.buffer.push("\r\n                "),l=r["link-to"]||e&&e["link-to"],c={hash:{"class":"btn btn-primary"},hashTypes:{"class":"STRING"},hashContexts:{"class":e},inverse:d.noop,fn:d.program(3,a,s),contexts:[e],types:["STRING"],data:s},i=l?l.call(e,"AuthLogin",c):f.call(e,"link-to","AuthLogin",c),(i||0===i)&&s.buffer.push(i),s.buffer.push("\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>\r\n"),h});
Ember.TEMPLATES["Invitation/InvitationAccept"]=Ember.Handlebars.template(function(n,t,e,s,a){function i(n,t){var s,a="";return t.buffer.push("\n                            "),s=e.each.call(n,"role","in","invitation.roles",{hash:{},hashTypes:{},hashContexts:{},inverse:p.noop,fn:p.program(2,o,t),contexts:[n,n,n],types:["ID","ID","ID"],data:t}),(s||0===s)&&t.buffer.push(s),t.buffer.push("\n                        "),a}function o(n,t){var s,a,i,o="";return t.buffer.push("\n                                <tr>\n                                    <td>"),s=e._triageMustache.call(n,"role.name",{hash:{},hashTypes:{},hashContexts:{},contexts:[n],types:["ID"],data:t}),(s||0===s)&&t.buffer.push(s),t.buffer.push(" by user "),t.buffer.push(c((a=e.printUser||n&&n.printUser,i={hash:{},hashTypes:{},hashContexts:{},contexts:[n],types:["ID"],data:t},a?a.call(n,"role.created_by",i):l.call(n,"printUser","role.created_by",i)))),t.buffer.push(" </td>\n                                </tr>\n                            "),o}this.compilerInfo=[4,">= 1.0.0"],e=this.merge(e,Ember.Handlebars.helpers),a=a||{};var h,r="",l=e.helperMissing,c=this.escapeExpression,p=this;return a.buffer.push('<div class="vlt-dialog col-md-8 col-md-offset-2 top-50">\n    <form>\n        <div class="vlt-dialog-content">\n            <div class="vlt-dialog-header">\n                <h2>You have pending invitations</h2>\n            </div>\n            <div class="vlt-dialog-body">\n\n                <div class="col-md-8 col-md-offset-2 top-15 bottom-30">\n                    <div class="bottom-15">\n                        You have been invited to Vaultier.\n                        <b>Please see invitations to accept:</b>\n                    </div>\n                    <table class="table vlt-table table-bordered">\n                        <tbody>\n                        '),h=e.each.call(t,"invitation","in","content",{hash:{},hashTypes:{},hashContexts:{},inverse:p.noop,fn:p.program(1,i,a),contexts:[t,t,t],types:["ID","ID","ID"],data:a}),(h||0===h)&&a.buffer.push(h),a.buffer.push('\n                        </tbody>\n                    </table>\n                </div>\n\n                <div class="clearfix"></div>\n\n            </div>\n            <div class="vlt-dialog-footer">\n                <a href="#" class="btn btn-default btn-sm" '),a.buffer.push(c(e.action.call(t,"rejectInvitations",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["ID"],data:a}))),a.buffer.push('>\n                    <span class="glyphicon glyphicon-remove"></span>\n                    Reject invitations\n                </a>\n                <a href="#" class="btn btn-primary btn" '),a.buffer.push(c(e.action.call(t,"acceptInvitations",{hash:{},hashTypes:{},hashContexts:{},contexts:[t],types:["ID"],data:a}))),a.buffer.push('>\n                    <span class="glyphicon glyphicon-ok"></span>\n                    Accept invitations\n                </a>\n            </div>\n        </div>\n    </form>\n</div>\n\n'),r});
//# sourceMappingURL=data:application/json;base64,