#!/bin/bash
set -e
#postinst for Vaultier

. /usr/share/debconf/confmodule

db_get vaultier/domain
domain="$RET"

db_get vaultier/database_host
database_host="$RET"
db_get vaultier/database_port
database_port="$RET"
db_get vaultier/database_name
database_name="$RET"
db_get vaultier/database_user
database_user="$RET"
db_get vaultier/database_password
database_password="$RET"

db_get vaultier/email_host
email_host="$RET"
db_get vaultier/email_port
email_port="$RET"
if [ -z "$email_port" ]; then
    email_port="25"
fi
db_get vaultier/email_user
email_user="$RET"
db_get vaultier/email_password
email_password="$RET"
db_get vaultier/email_tls
email_tls="$RET"
if $email_tls; then
    email_tls="True"
else
    email_tls="False"
fi

db_get vaultier/http_scheme
http_scheme="$RET"

db_get vaultier/allow_registration
allow_registration="$RET"
if $allow_registration; then
    allow_registration="True"
else
    allow_registration="False"
fi

db_get vaultier/allow_statistics
allow_statistics="$RET"
if $allow_statistics; then
    allow_statistics="True"
else
    allow_statistics="False"
fi

if [ "$http_scheme" = "https" ] ; then
     cp /usr/share/ssl-cert/ssleay.cnf /var/tmp
     sed -i "/default_keyfile/c\default_keyfile = $domain.pem" /var/tmp/ssleay.cnf
     sed -i "/commonName/c\commonName = $domain " /var/tmp/ssleay.cnf
     make-ssl-cert /var/tmp/ssleay.cnf /etc/ssl/certs/$domain.pem
     rm /var/tmp/ssleay.cnf
fi


db_get vaultier/reconfigure-webserver
webservers="$RET"


db_get vaultier/webpath

#FIXME: http://git.rclick.cz/rclick/vaultier/issues/383 
#if [ "$RET" == "/" ]
#then
    webpath1="/"
    webpath2=""
#else
#    webpath1="$RET"
#    webpath2="$RET"
#fi


for webserver in $webservers; do
    webserver=${webserver%,}

    echo "Configuring $webserver webserver ..."

    if [ "$webserver" = "nginx" ] ; then
	###################################### NGINX

	if [ "$http_scheme" = 'http' ]; then
	    cp /usr/share/vaultier/config/nginx/vaultier /etc/nginx/sites-available/vaultier
	else
	    cp /usr/share/vaultier/config/nginx/vaultier-ssl /etc/nginx/sites-available/vaultier
	    sed -i "/ssl_certificate /c\		ssl_certificate /etc/ssl/certs/$domain.pem;" /etc/nginx/sites-available/vaultier
	    sed -i "/ssl_certificate_key/c\		ssl_certificate_key /etc/ssl/certs/$domain.pem;" /etc/nginx/sites-available/vaultier
	fi

	sed -i "s/DEB_DOMAIN/${domain}/g" /etc/nginx/sites-available/vaultier
	ln -s /etc/nginx/sites-available/vaultier /etc/nginx/sites-enabled
    else 
	###################################### APACHE 
        mkdir -p /etc/apache2/conf-available
	a2enmod uwsgi
#	WEBCFG="/etc/apache2/conf-available/vaultier.conf"
#	echo  "<Location $webpath1>" > $WEBCFG
#	echo  "    SetHandler uwsgi-handler" >> $WEBCFG
#	echo  "    uWSGISocket /run/uwsgi/app/vaultier/socket" >> $WEBCFG
#	echo  "</Location>" >> $WEBCFG
#	echo  "alias ${webpath2}/static /opt/vaultier/venv/lib/python2.7/site-packages/vaultier/vaultier/static/" >> $WEBCFG
#	echo  "alias ${webpath2}/media  /opt/vaultier/venv/lib/python2.7/site-packages/vaultier/vaultier/media/" >> $WEBCFG
#	a2enconf vaultier

	if [ -n "$domain" ]; then
	    SITECFG="/etc/apache2/sites-available/vaultier.conf"
	    echo  > $SITECFG

	    if [ "$http_scheme" = "https" ] ; then
		a2enmod ssl
	        echo  "<VirtualHost *:80>" >> $SITECFG
	        echo  "        ServerName $domain" >> $SITECFG
	        echo  "        Redirect permanent / https://$domain/$webpath2" >> $SITECFG
	        echo  "</VirtualHost>" >> $SITECFG
		echo  "<VirtualHost *:443>" >> $SITECFG
		echo  "        SSLEngine on" >> $SITECFG
		echo  "        SSLProtocol all -SSLv2" >> $SITECFG
		echo  "        SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM" >> $SITECFG
		echo  "        SSLCertificateFile /etc/ssl/certs/$domain.pem" >> $SITECFG
	    else
	        echo  "<VirtualHost *:80>" >> $SITECFG
	    fi
	    echo  "        ServerName $domain" >> $SITECFG
	    echo  "        alias ${webpath2}/static /opt/vaultier/venv/lib/python2.7/site-packages/vaultier/vaultier/static/" >> $SITECFG
	    echo  "        alias ${webpath2}/media  /opt/vaultier/venv/lib/python2.7/site-packages/vaultier/vaultier/media/" >> $SITECFG
	    echo  "        <Location />" >> $SITECFG
	    echo  "                SetHandler uwsgi-handler" >> $SITECFG
	    echo  "                uWSGISocket /run/uwsgi/app/vaultier/socket" >> $SITECFG
	    echo  "        </Location>" >> $SITECFG
	    echo  '        ErrorLog ${APACHE_LOG_DIR}/error.log' >> $SITECFG
	    echo  '        CustomLog ${APACHE_LOG_DIR}/access.log combined' >> $SITECFG
	    echo  '        <Location /static>' >> $SITECFG
	    echo  '                Order allow,deny' >> $SITECFG
	    echo  '                Allow from all' >> $SITECFG
	    echo  '                SetHandler none' >> $SITECFG
	    echo  '        </Location>' >> $SITECFG
	    echo  '        <Location /media>' >> $SITECFG
	    echo  '                Order allow,deny' >> $SITECFG
	    echo  '                Allow from all' >> $SITECFG
	    echo  '                SetHandler none' >> $SITECFG
	    echo  '         </Location>' >> $SITECFG
	    echo  '        <Directory /opt/vaultier/venv/lib/python2.7/site-packages/vaultier/vaultier/static/>' >> $SITECFG
	    echo  '            Order Allow,Deny' >> $SITECFG
	    echo  '            Allow from all' >> $SITECFG
	    echo  '            Require all granted' >> $SITECFG
	    echo  '        </Directory>' >> $SITECFG
	    echo  '        <Directory /opt/vaultier/venv/lib/python2.7/site-packages/vaultier/vaultier/media/>' >> $SITECFG
	    echo  '            Order Allow,Deny' >> $SITECFG
	    echo  '            Allow from all' >> $SITECFG
	    echo  '            Require all granted' >> $SITECFG
	    echo  '        </Directory>' >> $SITECFG
	    echo  "</VirtualHost>" >> $SITECFG
	    a2ensite vaultier
	fi

    fi

    # Reload webserver in any case, configuration might have changed
    # Redirection of 3 is needed because Debconf uses it and it might 
    # be inherited by webserver. See bug #446324.
    if [ -f /etc/init.d/$webserver ] ; then
	if [ -x /usr/sbin/invoke-rc.d ]; then
                invoke-rc.d $webserver reload 3>/dev/null || true
        else
                service $webserver reload 3>/dev/null || true
        fi
    fi
done




# add Vaultier user, if it does not exists
id -u vaultier &>/dev/null || useradd -r -d /opt/vaultier -s /bin/bash vaultier

mkdir -p /opt/vaultier/logs/

# Setup postgres account
service postgresql start

if sudo -u postgres psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='$database_user'" | grep -q 1; then
    echo "Database user $database_user already exists."
else
    sudo -u postgres psql --command "CREATE USER $database_user WITH SUPERUSER PASSWORD '$database_password';" &>/dev/null
fi

if ! sudo -u postgres psql ${database_name} -c '\q' &>/dev/null; then
    sudo -u postgres createdb --template=template0 -E UTF-8 -O ${database_user} ${database_name}
fi

# install Vaultier
mkdir -p /opt/vaultier
cd /opt/vaultier
virtualenv venv

/opt/vaultier/venv/bin/pip install /usr/share/vaultier/source/Vaultier-latest.tar.gz

export PYTHONPATH=/opt/vaultier/venv/lib/python2.7/site-packages/vaultier

# Create a configuration, if we don't have one
if [ ! -f /opt/vaultier/vaultier_conf.py ]; then
    /opt/vaultier/venv/bin/vaultier init --managed
fi

sed -i "s/os.getenv('VAULTIER_DATABASE_HOST', '127.0.0.1')/'${database_host}'/g" /opt/vaultier/vaultier_conf.py
sed -i "s/os.getenv('VAULTIER_DATABASE_PORT', '')/'${database_port}'/g" /opt/vaultier/vaultier_conf.py
sed -i "s/os.getenv('VAULTIER_DATABASE_NAME', 'vaultier')/'${database_name}'/g" /opt/vaultier/vaultier_conf.py
sed -i "s/os.getenv('VAULTIER_DATABASE_USER', 'vaultier')/'${database_user}'/g" /opt/vaultier/vaultier_conf.py
sed -i "s/os.getenv('VAULTIER_DATABASE_PASSWORD', 'vaultier')/'${database_password}'/g" /opt/vaultier/vaultier_conf.py

if [ -f /etc/init.d/postgresql ]; then
    /opt/vaultier/venv/bin/vaultier setup
fi
chown -R vaultier:vaultier /opt/vaultier

# update configuration files
sed -i "s/os.getenv('VAULTIER_DOMAIN', 'example.com'),/'${domain}',/g" /opt/vaultier/vaultier_conf.py
sed -i "s/' + os.getenv('VAULTIER_DOMAIN', 'example.com') + '/${domain}/g" /opt/vaultier/vaultier_conf.py
sed -i "s/os.getenv('VAULTIER_HTTP_SCHEME', 'http') + '/'${http_scheme}/g" /opt/vaultier/vaultier_conf.py
sed -i "s/os.getenv('VAULTIER_FROM_EMAIL', 'noreply@example.com'),/'noreply@${domain}',/g" /opt/vaultier/vaultier_conf.py

sed -i "s/os.getenv('VAULTIER_EMAIL_HOST', '')/'${email_host}'/g" /opt/vaultier/vaultier_conf.py
sed -i "s/os.getenv('VAULTIER_EMAIL_PORT', 25)/${email_port}/g" /opt/vaultier/vaultier_conf.py
sed -i "s/os.getenv('VAULTIER_EMAIL_USER', '')/'${email_user}'/g" /opt/vaultier/vaultier_conf.py
sed -i "s/os.getenv('VAULTIER_EMAIL_PASSWORD', '')/'${email_password}'/g" /opt/vaultier/vaultier_conf.py
sed -i "s/bool(os.getenv('VAULTIER_EMAIL_TLS', False))/${email_tls}/g" /opt/vaultier/vaultier_conf.py

sed -i "s/bool(os.getenv('VAULTIER_ALLOW_REGISTRATION', False))/${allow_registration}/g" /opt/vaultier/vaultier_conf.py
sed -i "s/bool(os.getenv('VAULTIER_ALLOW_STATISTICS', True))/${allow_statistics}/g" /opt/vaultier/vaultier_conf.py


cp /usr/share/vaultier/config/supervisor/vaultier.conf /etc/supervisor/conf.d/vaultier.conf
cp /usr/share/vaultier/config/uwsgi/vaultier.ini /etc/uwsgi/apps-available/vaultier.ini

# symlink configs
ln -s /etc/uwsgi/apps-available/vaultier.ini /etc/uwsgi/apps-enabled


# start servers again
if ! service uwsgi start &> /dev/null; then
    echo "Starting uwsgi failed. Please try to start uwsgi manually."
fi

if [ "$webserver" = "nginx" ] ; then
    if ! service nginx start &> /dev/null; then
	echo "Starting nginx failed. Please try to start nginx manually."
    fi
else
    if ! service apache2 start &> /dev/null; then
	echo "Starting Apache failed. Please try to start apache manually."
    fi
fi


if ! service supervisor start &> /dev/null; then
    if ! service supervisor restart &> /dev/null; then
        echo "Starting supervisor failed. Please try to start supervisor manually."
    fi
else
    supervisorctl update
fi

db_stop
