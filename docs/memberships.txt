Membership of invited user: 
{
  email: 'jan.misek@rclick.cz'
  type: 'invited'

}






### Preface
Documents describes how the security of vaultier should work.  Each user of vaultier will be granted with roles to allow him perform specific operations on objects.                                            

### Structure of objects
#### Workspace
Workspace is space where team of users collaboratates. User can have access to one or more workspace. 
In real world workspace will be e.g rclick. inside this workspace vaults, cards and secrets will reside.

### Workspace membership  / invitations
if user is granted to access any object in workspace. he has to have also workspace membership. because of nature of PPK security workspace memberhips
contains his cyphered symteric key (symkey) which is used to encode and decode data inside workspace.
Workspace membership should be table:
```
Membership
- user_id

- workspace_id
- symkey: string
``` 

There will be no API to workspace membership. Memberships will be managed internally by other api calls. Workspace memebrship will be returned for current user by `api/workspace/1/` call in form of:

```javascript
Workspace = {
  id: 1
  name: 'Workspace name'
  // ...
  membership: {
      symkey: 
  }   

}

```


### Roles inside workspace



### Example of user interface for edit memberships
in latest master: http://dev.harmonika:8000/#/manage/workspace/3/members

- UI allows user to edit memberships only to specified object
- User is able to see inherited membership (Url mentioned above could be considered as example of  card memberships, where user sees inherited memberships of vault and workspace
- UI is based on gitlab, see granting access in gitlab

### Edit membership
Edit membership means:

- revoke access to specified object to specified user
- invite new user (by email) to specified object
- grant membership to specified user to specified object

### Roles:
Membership level is determined by role. User will work with following roles:

- Read - can only read specified and descending objects
- Read and create - can only read and create new descending objects
- Manage - user is able to read, write, create. In case of workspace also edit memberships

Mentioned roles should be granualized to permissions, which underlaying security layer will work with.

### Use cases:

- User is granted role read to workspace, he is able to see the workspace and underlaying objects
- User is granted role manage to card, he can manage card (read,write). But read only direct parent objects - eg. in workspace he sees only parent vault of card. 

### Membership/Invitations workflow:

- If user grants membership to existing user, membership is granted immediatelly
- If user grants membership to non existing user, invitation email is sent. Invited is required to create account. When account is created, inviting user is able grant permissions to invited user

Coded invite/grant modal will be provided later

### API/Model for memberships

Each objects contains permissions key, which contains list of permissions. eg: Vault

```javascript
Vault = {
   name: 'My vault'
   description: 'Vault desc'
   permissions: {
      read: true
      create: true
      update: false
      grant: false
      delete: false
   }
}
```

Api for working with memberships should be published `/api/memberships'

- Standard rest viewset with filtering options
- User is able only to see memberships of objects he has `grant` permissions
- User is able only to create memberships to objects he has `grant` permission (e.g user is has `manage` role on vault), so he is able to invite/grant to to vault, and all child cards, he is able to see vault memberships and card memberships



